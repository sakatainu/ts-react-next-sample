import { gql } from 'urql';
import * as Urql from 'urql';

      export const assertBrandedString : <T>(a: unknown) => asserts a is T = (a) => {
        if (typeof a !== 'string') throw new Error(`${a} is not string`);
      }
      
export type DateString = string & { __dateStringBrand: never };
export type TimestampString = string & { __timestampStringBrand: never };
export type UuidString = string & { __UuidStringBrand: never };
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  bigint: number;
  date: DateString;
  float8: number;
  timestamp: TimestampString;
  uuid: UuidString;
};

/** Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'. */
export type Int_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['Int']>;
  _gt?: InputMaybe<Scalars['Int']>;
  _gte?: InputMaybe<Scalars['Int']>;
  _in?: InputMaybe<Array<Scalars['Int']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['Int']>;
  _lte?: InputMaybe<Scalars['Int']>;
  _neq?: InputMaybe<Scalars['Int']>;
  _nin?: InputMaybe<Array<Scalars['Int']>>;
};

/** Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'. */
export type String_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['String']>;
  _gt?: InputMaybe<Scalars['String']>;
  _gte?: InputMaybe<Scalars['String']>;
  /** does the column match the given case-insensitive pattern */
  _ilike?: InputMaybe<Scalars['String']>;
  _in?: InputMaybe<Array<Scalars['String']>>;
  /** does the column match the given POSIX regular expression, case insensitive */
  _iregex?: InputMaybe<Scalars['String']>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  /** does the column match the given pattern */
  _like?: InputMaybe<Scalars['String']>;
  _lt?: InputMaybe<Scalars['String']>;
  _lte?: InputMaybe<Scalars['String']>;
  _neq?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given case-insensitive pattern */
  _nilike?: InputMaybe<Scalars['String']>;
  _nin?: InputMaybe<Array<Scalars['String']>>;
  /** does the column NOT match the given POSIX regular expression, case insensitive */
  _niregex?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given pattern */
  _nlike?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given POSIX regular expression, case sensitive */
  _nregex?: InputMaybe<Scalars['String']>;
  /** does the column NOT match the given SQL regular expression */
  _nsimilar?: InputMaybe<Scalars['String']>;
  /** does the column match the given POSIX regular expression, case sensitive */
  _regex?: InputMaybe<Scalars['String']>;
  /** does the column match the given SQL regular expression */
  _similar?: InputMaybe<Scalars['String']>;
};

/** columns and relationships of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords = {
  __typename?: 'articleContentDecreaseKeywords';
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  id: Scalars['uuid'];
  text: Scalars['String'];
};

/** aggregated selection of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate = {
  __typename?: 'articleContentDecreaseKeywords_aggregate';
  aggregate?: Maybe<ArticleContentDecreaseKeywords_Aggregate_Fields>;
  nodes: Array<ArticleContentDecreaseKeywords>;
};

export type ArticleContentDecreaseKeywords_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContentDecreaseKeywords_Aggregate_Bool_Exp_Count>;
};

export type ArticleContentDecreaseKeywords_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate_Fields = {
  __typename?: 'articleContentDecreaseKeywords_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<ArticleContentDecreaseKeywords_Max_Fields>;
  min?: Maybe<ArticleContentDecreaseKeywords_Min_Fields>;
};


/** aggregate fields of "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContentDecreaseKeywords_Max_Order_By>;
  min?: InputMaybe<ArticleContentDecreaseKeywords_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Arr_Rel_Insert_Input = {
  data: Array<ArticleContentDecreaseKeywords_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContentDecreaseKeywords_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContentDecreaseKeywords". All fields are combined with a logical 'AND'. */
export type ArticleContentDecreaseKeywords_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContentDecreaseKeywords_Bool_Exp>>;
  _not?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContentDecreaseKeywords_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContentDecreaseKeywords" */
export enum ArticleContentDecreaseKeywords_Constraint {
  /** unique or primary key constraint on columns "id", "text" */
  ArticleContentDecreaseKeywordsPkey = 'articleContentDecreaseKeywords_pkey'
}

/** input type for inserting data into table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Insert_Input = {
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type ArticleContentDecreaseKeywords_Max_Fields = {
  __typename?: 'articleContentDecreaseKeywords_max_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContentDecreaseKeywords_Min_Fields = {
  __typename?: 'articleContentDecreaseKeywords_min_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Mutation_Response = {
  __typename?: 'articleContentDecreaseKeywords_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContentDecreaseKeywords>;
};

/** on_conflict condition type for table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_On_Conflict = {
  constraint: ArticleContentDecreaseKeywords_Constraint;
  update_columns?: Array<ArticleContentDecreaseKeywords_Update_Column>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContentDecreaseKeywords". */
export type ArticleContentDecreaseKeywords_Order_By = {
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContentDecreaseKeywords */
export type ArticleContentDecreaseKeywords_Pk_Columns_Input = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};

/** select columns of table "articleContentDecreaseKeywords" */
export enum ArticleContentDecreaseKeywords_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "articleContentDecreaseKeywords" */
export type ArticleContentDecreaseKeywords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContentDecreaseKeywords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContentDecreaseKeywords_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** update columns of table "articleContentDecreaseKeywords" */
export enum ArticleContentDecreaseKeywords_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

export type ArticleContentDecreaseKeywords_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContentDecreaseKeywords_Set_Input>;
  where: ArticleContentDecreaseKeywords_Bool_Exp;
};

/** columns and relationships of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords = {
  __typename?: 'articleContentIncreaseKeywords';
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  id: Scalars['uuid'];
  text: Scalars['String'];
};

/** aggregated selection of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate = {
  __typename?: 'articleContentIncreaseKeywords_aggregate';
  aggregate?: Maybe<ArticleContentIncreaseKeywords_Aggregate_Fields>;
  nodes: Array<ArticleContentIncreaseKeywords>;
};

export type ArticleContentIncreaseKeywords_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContentIncreaseKeywords_Aggregate_Bool_Exp_Count>;
};

export type ArticleContentIncreaseKeywords_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate_Fields = {
  __typename?: 'articleContentIncreaseKeywords_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<ArticleContentIncreaseKeywords_Max_Fields>;
  min?: Maybe<ArticleContentIncreaseKeywords_Min_Fields>;
};


/** aggregate fields of "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContentIncreaseKeywords_Max_Order_By>;
  min?: InputMaybe<ArticleContentIncreaseKeywords_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Arr_Rel_Insert_Input = {
  data: Array<ArticleContentIncreaseKeywords_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContentIncreaseKeywords_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContentIncreaseKeywords". All fields are combined with a logical 'AND'. */
export type ArticleContentIncreaseKeywords_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContentIncreaseKeywords_Bool_Exp>>;
  _not?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContentIncreaseKeywords_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContentIncreaseKeywords" */
export enum ArticleContentIncreaseKeywords_Constraint {
  /** unique or primary key constraint on columns "id", "text" */
  ArticleContentIncreaseKeywordsPkey = 'articleContentIncreaseKeywords_pkey'
}

/** input type for inserting data into table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Insert_Input = {
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type ArticleContentIncreaseKeywords_Max_Fields = {
  __typename?: 'articleContentIncreaseKeywords_max_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContentIncreaseKeywords_Min_Fields = {
  __typename?: 'articleContentIncreaseKeywords_min_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Mutation_Response = {
  __typename?: 'articleContentIncreaseKeywords_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContentIncreaseKeywords>;
};

/** on_conflict condition type for table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_On_Conflict = {
  constraint: ArticleContentIncreaseKeywords_Constraint;
  update_columns?: Array<ArticleContentIncreaseKeywords_Update_Column>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContentIncreaseKeywords". */
export type ArticleContentIncreaseKeywords_Order_By = {
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContentIncreaseKeywords */
export type ArticleContentIncreaseKeywords_Pk_Columns_Input = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};

/** select columns of table "articleContentIncreaseKeywords" */
export enum ArticleContentIncreaseKeywords_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "articleContentIncreaseKeywords" */
export type ArticleContentIncreaseKeywords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContentIncreaseKeywords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContentIncreaseKeywords_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** update columns of table "articleContentIncreaseKeywords" */
export enum ArticleContentIncreaseKeywords_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

export type ArticleContentIncreaseKeywords_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContentIncreaseKeywords_Set_Input>;
  where: ArticleContentIncreaseKeywords_Bool_Exp;
};

/** columns and relationships of "articleContentKeywords" */
export type ArticleContentKeywords = {
  __typename?: 'articleContentKeywords';
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  id: Scalars['uuid'];
  text: Scalars['String'];
};

/** aggregated selection of "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate = {
  __typename?: 'articleContentKeywords_aggregate';
  aggregate?: Maybe<ArticleContentKeywords_Aggregate_Fields>;
  nodes: Array<ArticleContentKeywords>;
};

export type ArticleContentKeywords_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContentKeywords_Aggregate_Bool_Exp_Count>;
};

export type ArticleContentKeywords_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate_Fields = {
  __typename?: 'articleContentKeywords_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<ArticleContentKeywords_Max_Fields>;
  min?: Maybe<ArticleContentKeywords_Min_Fields>;
};


/** aggregate fields of "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "articleContentKeywords" */
export type ArticleContentKeywords_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContentKeywords_Max_Order_By>;
  min?: InputMaybe<ArticleContentKeywords_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContentKeywords" */
export type ArticleContentKeywords_Arr_Rel_Insert_Input = {
  data: Array<ArticleContentKeywords_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContentKeywords_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContentKeywords". All fields are combined with a logical 'AND'. */
export type ArticleContentKeywords_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContentKeywords_Bool_Exp>>;
  _not?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContentKeywords_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContentKeywords" */
export enum ArticleContentKeywords_Constraint {
  /** unique or primary key constraint on columns "id", "text" */
  ArticleContentKeywordsPkey = 'articleContentKeywords_pkey'
}

/** input type for inserting data into table "articleContentKeywords" */
export type ArticleContentKeywords_Insert_Input = {
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type ArticleContentKeywords_Max_Fields = {
  __typename?: 'articleContentKeywords_max_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "articleContentKeywords" */
export type ArticleContentKeywords_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContentKeywords_Min_Fields = {
  __typename?: 'articleContentKeywords_min_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "articleContentKeywords" */
export type ArticleContentKeywords_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContentKeywords" */
export type ArticleContentKeywords_Mutation_Response = {
  __typename?: 'articleContentKeywords_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContentKeywords>;
};

/** on_conflict condition type for table "articleContentKeywords" */
export type ArticleContentKeywords_On_Conflict = {
  constraint: ArticleContentKeywords_Constraint;
  update_columns?: Array<ArticleContentKeywords_Update_Column>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContentKeywords". */
export type ArticleContentKeywords_Order_By = {
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContentKeywords */
export type ArticleContentKeywords_Pk_Columns_Input = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};

/** select columns of table "articleContentKeywords" */
export enum ArticleContentKeywords_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "articleContentKeywords" */
export type ArticleContentKeywords_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "articleContentKeywords" */
export type ArticleContentKeywords_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContentKeywords_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContentKeywords_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** update columns of table "articleContentKeywords" */
export enum ArticleContentKeywords_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

export type ArticleContentKeywords_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContentKeywords_Set_Input>;
  where: ArticleContentKeywords_Bool_Exp;
};

/** columns and relationships of "articleContents" */
export type ArticleContents = {
  __typename?: 'articleContents';
  /** An array relationship */
  _articles: Array<Articles>;
  /** An aggregate relationship */
  _articles_aggregate: Articles_Aggregate;
  /** An object relationship */
  article?: Maybe<Articles>;
  /** An array relationship */
  articleContentDecreaseKeywords: Array<ArticleContentDecreaseKeywords>;
  /** An aggregate relationship */
  articleContentDecreaseKeywords_aggregate: ArticleContentDecreaseKeywords_Aggregate;
  /** An array relationship */
  articleContentIncreaseKeywords: Array<ArticleContentIncreaseKeywords>;
  /** An aggregate relationship */
  articleContentIncreaseKeywords_aggregate: ArticleContentIncreaseKeywords_Aggregate;
  /** An array relationship */
  articleContentKeywords: Array<ArticleContentKeywords>;
  /** An aggregate relationship */
  articleContentKeywords_aggregate: ArticleContentKeywords_Aggregate;
  id: Scalars['uuid'];
  text: Scalars['String'];
};


/** columns and relationships of "articleContents" */
export type ArticleContents_ArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContents_Articles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentDecreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentDecreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentIncreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentIncreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


/** columns and relationships of "articleContents" */
export type ArticleContentsArticleContentKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};

/** aggregated selection of "articleContents" */
export type ArticleContents_Aggregate = {
  __typename?: 'articleContents_aggregate';
  aggregate?: Maybe<ArticleContents_Aggregate_Fields>;
  nodes: Array<ArticleContents>;
};

export type ArticleContents_Aggregate_Bool_Exp = {
  count?: InputMaybe<ArticleContents_Aggregate_Bool_Exp_Count>;
};

export type ArticleContents_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<ArticleContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<ArticleContents_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articleContents" */
export type ArticleContents_Aggregate_Fields = {
  __typename?: 'articleContents_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<ArticleContents_Max_Fields>;
  min?: Maybe<ArticleContents_Min_Fields>;
};


/** aggregate fields of "articleContents" */
export type ArticleContents_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "articleContents" */
export type ArticleContents_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<ArticleContents_Max_Order_By>;
  min?: InputMaybe<ArticleContents_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articleContents" */
export type ArticleContents_Arr_Rel_Insert_Input = {
  data: Array<ArticleContents_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articleContents". All fields are combined with a logical 'AND'. */
export type ArticleContents_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleContents_Bool_Exp>>;
  _articles?: InputMaybe<Articles_Bool_Exp>;
  _articles_aggregate?: InputMaybe<Articles_Aggregate_Bool_Exp>;
  _not?: InputMaybe<ArticleContents_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleContents_Bool_Exp>>;
  article?: InputMaybe<Articles_Bool_Exp>;
  articleContentDecreaseKeywords?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
  articleContentDecreaseKeywords_aggregate?: InputMaybe<ArticleContentDecreaseKeywords_Aggregate_Bool_Exp>;
  articleContentIncreaseKeywords?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
  articleContentIncreaseKeywords_aggregate?: InputMaybe<ArticleContentIncreaseKeywords_Aggregate_Bool_Exp>;
  articleContentKeywords?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
  articleContentKeywords_aggregate?: InputMaybe<ArticleContentKeywords_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleContents" */
export enum ArticleContents_Constraint {
  /** unique or primary key constraint on columns "id" */
  ArticleContentsPkey = 'articleContents_pkey'
}

/** input type for inserting data into table "articleContents" */
export type ArticleContents_Insert_Input = {
  _articles?: InputMaybe<Articles_Arr_Rel_Insert_Input>;
  article?: InputMaybe<Articles_Obj_Rel_Insert_Input>;
  articleContentDecreaseKeywords?: InputMaybe<ArticleContentDecreaseKeywords_Arr_Rel_Insert_Input>;
  articleContentIncreaseKeywords?: InputMaybe<ArticleContentIncreaseKeywords_Arr_Rel_Insert_Input>;
  articleContentKeywords?: InputMaybe<ArticleContentKeywords_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type ArticleContents_Max_Fields = {
  __typename?: 'articleContents_max_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "articleContents" */
export type ArticleContents_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type ArticleContents_Min_Fields = {
  __typename?: 'articleContents_min_fields';
  id?: Maybe<Scalars['uuid']>;
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "articleContents" */
export type ArticleContents_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articleContents" */
export type ArticleContents_Mutation_Response = {
  __typename?: 'articleContents_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleContents>;
};

/** input type for inserting object relation for remote table "articleContents" */
export type ArticleContents_Obj_Rel_Insert_Input = {
  data: ArticleContents_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};

/** on_conflict condition type for table "articleContents" */
export type ArticleContents_On_Conflict = {
  constraint: ArticleContents_Constraint;
  update_columns?: Array<ArticleContents_Update_Column>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};

/** Ordering options when selecting data from "articleContents". */
export type ArticleContents_Order_By = {
  _articles_aggregate?: InputMaybe<Articles_Aggregate_Order_By>;
  article?: InputMaybe<Articles_Order_By>;
  articleContentDecreaseKeywords_aggregate?: InputMaybe<ArticleContentDecreaseKeywords_Aggregate_Order_By>;
  articleContentIncreaseKeywords_aggregate?: InputMaybe<ArticleContentIncreaseKeywords_Aggregate_Order_By>;
  articleContentKeywords_aggregate?: InputMaybe<ArticleContentKeywords_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleContents */
export type ArticleContents_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "articleContents" */
export enum ArticleContents_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "articleContents" */
export type ArticleContents_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "articleContents" */
export type ArticleContents_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleContents_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleContents_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  text?: InputMaybe<Scalars['String']>;
};

/** update columns of table "articleContents" */
export enum ArticleContents_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Text = 'text'
}

export type ArticleContents_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleContents_Set_Input>;
  where: ArticleContents_Bool_Exp;
};

/** columns and relationships of "articleSources" */
export type ArticleSources = {
  __typename?: 'articleSources';
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  code: Scalars['String'];
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "articleSources" */
export type ArticleSourcesArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};

/** aggregated selection of "articleSources" */
export type ArticleSources_Aggregate = {
  __typename?: 'articleSources_aggregate';
  aggregate?: Maybe<ArticleSources_Aggregate_Fields>;
  nodes: Array<ArticleSources>;
};

/** aggregate fields of "articleSources" */
export type ArticleSources_Aggregate_Fields = {
  __typename?: 'articleSources_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<ArticleSources_Max_Fields>;
  min?: Maybe<ArticleSources_Min_Fields>;
};


/** aggregate fields of "articleSources" */
export type ArticleSources_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<ArticleSources_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "articleSources". All fields are combined with a logical 'AND'. */
export type ArticleSources_Bool_Exp = {
  _and?: InputMaybe<Array<ArticleSources_Bool_Exp>>;
  _not?: InputMaybe<ArticleSources_Bool_Exp>;
  _or?: InputMaybe<Array<ArticleSources_Bool_Exp>>;
  articles?: InputMaybe<Articles_Bool_Exp>;
  articles_aggregate?: InputMaybe<Articles_Aggregate_Bool_Exp>;
  code?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articleSources" */
export enum ArticleSources_Constraint {
  /** unique or primary key constraint on columns "code" */
  ArticlesourcesPkey = 'articlesources_pkey'
}

export enum ArticleSources_Enum {
  NewsNikkei = 'news_nikkei',
  NewsPrtimes = 'news_prtimes',
  Other = 'other',
  Tanshin = 'tanshin',
  Yuuhou = 'yuuhou'
}

/** Boolean expression to compare columns of type "articleSources_enum". All fields are combined with logical 'AND'. */
export type ArticleSources_Enum_Comparison_Exp = {
  _eq?: InputMaybe<ArticleSources_Enum>;
  _in?: InputMaybe<Array<ArticleSources_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _neq?: InputMaybe<ArticleSources_Enum>;
  _nin?: InputMaybe<Array<ArticleSources_Enum>>;
};

/** input type for inserting data into table "articleSources" */
export type ArticleSources_Insert_Input = {
  articles?: InputMaybe<Articles_Arr_Rel_Insert_Input>;
  code?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type ArticleSources_Max_Fields = {
  __typename?: 'articleSources_max_fields';
  code?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type ArticleSources_Min_Fields = {
  __typename?: 'articleSources_min_fields';
  code?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "articleSources" */
export type ArticleSources_Mutation_Response = {
  __typename?: 'articleSources_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<ArticleSources>;
};

/** input type for inserting object relation for remote table "articleSources" */
export type ArticleSources_Obj_Rel_Insert_Input = {
  data: ArticleSources_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<ArticleSources_On_Conflict>;
};

/** on_conflict condition type for table "articleSources" */
export type ArticleSources_On_Conflict = {
  constraint: ArticleSources_Constraint;
  update_columns?: Array<ArticleSources_Update_Column>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};

/** Ordering options when selecting data from "articleSources". */
export type ArticleSources_Order_By = {
  articles_aggregate?: InputMaybe<Articles_Aggregate_Order_By>;
  code?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articleSources */
export type ArticleSources_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "articleSources" */
export enum ArticleSources_Select_Column {
  /** column name */
  Code = 'code'
}

/** input type for updating data in table "articleSources" */
export type ArticleSources_Set_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "articleSources" */
export type ArticleSources_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: ArticleSources_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type ArticleSources_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** update columns of table "articleSources" */
export enum ArticleSources_Update_Column {
  /** column name */
  Code = 'code'
}

export type ArticleSources_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<ArticleSources_Set_Input>;
  where: ArticleSources_Bool_Exp;
};

/** columns and relationships of "articles" */
export type Articles = {
  __typename?: 'articles';
  /** An array relationship */
  _articleContents: Array<ArticleContents>;
  /** An aggregate relationship */
  _articleContents_aggregate: ArticleContents_Aggregate;
  /** An object relationship */
  articleContent?: Maybe<ArticleContents>;
  /** An object relationship */
  articleSource: ArticleSources;
  articleSourceCode: ArticleSources_Enum;
  id: Scalars['uuid'];
  originalId: Scalars['String'];
  path: Scalars['String'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String'];
  timestamp: Scalars['timestamp'];
  title: Scalars['String'];
};


/** columns and relationships of "articles" */
export type Articles_ArticleContentsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


/** columns and relationships of "articles" */
export type Articles_ArticleContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};

/** aggregated selection of "articles" */
export type Articles_Aggregate = {
  __typename?: 'articles_aggregate';
  aggregate?: Maybe<Articles_Aggregate_Fields>;
  nodes: Array<Articles>;
};

export type Articles_Aggregate_Bool_Exp = {
  count?: InputMaybe<Articles_Aggregate_Bool_Exp_Count>;
};

export type Articles_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Articles_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Articles_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "articles" */
export type Articles_Aggregate_Fields = {
  __typename?: 'articles_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Articles_Max_Fields>;
  min?: Maybe<Articles_Min_Fields>;
};


/** aggregate fields of "articles" */
export type Articles_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Articles_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "articles" */
export type Articles_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Articles_Max_Order_By>;
  min?: InputMaybe<Articles_Min_Order_By>;
};

/** input type for inserting array relation for remote table "articles" */
export type Articles_Arr_Rel_Insert_Input = {
  data: Array<Articles_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};

/** Boolean expression to filter rows from the table "articles". All fields are combined with a logical 'AND'. */
export type Articles_Bool_Exp = {
  _and?: InputMaybe<Array<Articles_Bool_Exp>>;
  _articleContents?: InputMaybe<ArticleContents_Bool_Exp>;
  _articleContents_aggregate?: InputMaybe<ArticleContents_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Articles_Bool_Exp>;
  _or?: InputMaybe<Array<Articles_Bool_Exp>>;
  articleContent?: InputMaybe<ArticleContents_Bool_Exp>;
  articleSource?: InputMaybe<ArticleSources_Bool_Exp>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  originalId?: InputMaybe<String_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamp_Comparison_Exp>;
  title?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "articles" */
export enum Articles_Constraint {
  /** unique or primary key constraint on columns "originalId" */
  ArticlesOriginalIdKey = 'articles_originalId_key',
  /** unique or primary key constraint on columns "id" */
  ArticlesPkey = 'articles_pkey'
}

/** input type for inserting data into table "articles" */
export type Articles_Insert_Input = {
  _articleContents?: InputMaybe<ArticleContents_Arr_Rel_Insert_Input>;
  articleContent?: InputMaybe<ArticleContents_Obj_Rel_Insert_Input>;
  articleSource?: InputMaybe<ArticleSources_Obj_Rel_Insert_Input>;
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  id?: InputMaybe<Scalars['uuid']>;
  originalId?: InputMaybe<Scalars['String']>;
  path?: InputMaybe<Scalars['String']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['timestamp']>;
  title?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Articles_Max_Fields = {
  __typename?: 'articles_max_fields';
  id?: Maybe<Scalars['uuid']>;
  originalId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  stockIssueCode?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamp']>;
  title?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "articles" */
export type Articles_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Articles_Min_Fields = {
  __typename?: 'articles_min_fields';
  id?: Maybe<Scalars['uuid']>;
  originalId?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  stockIssueCode?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamp']>;
  title?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "articles" */
export type Articles_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "articles" */
export type Articles_Mutation_Response = {
  __typename?: 'articles_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Articles>;
};

/** input type for inserting object relation for remote table "articles" */
export type Articles_Obj_Rel_Insert_Input = {
  data: Articles_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};

/** on_conflict condition type for table "articles" */
export type Articles_On_Conflict = {
  constraint: Articles_Constraint;
  update_columns?: Array<Articles_Update_Column>;
  where?: InputMaybe<Articles_Bool_Exp>;
};

/** Ordering options when selecting data from "articles". */
export type Articles_Order_By = {
  _articleContents_aggregate?: InputMaybe<ArticleContents_Aggregate_Order_By>;
  articleContent?: InputMaybe<ArticleContents_Order_By>;
  articleSource?: InputMaybe<ArticleSources_Order_By>;
  articleSourceCode?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  originalId?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  title?: InputMaybe<Order_By>;
};

/** primary key columns input for table: articles */
export type Articles_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "articles" */
export enum Articles_Select_Column {
  /** column name */
  ArticleSourceCode = 'articleSourceCode',
  /** column name */
  Id = 'id',
  /** column name */
  OriginalId = 'originalId',
  /** column name */
  Path = 'path',
  /** column name */
  StockIssueCode = 'stockIssueCode',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  Title = 'title'
}

/** input type for updating data in table "articles" */
export type Articles_Set_Input = {
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  id?: InputMaybe<Scalars['uuid']>;
  originalId?: InputMaybe<Scalars['String']>;
  path?: InputMaybe<Scalars['String']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['timestamp']>;
  title?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "articles" */
export type Articles_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Articles_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Articles_Stream_Cursor_Value_Input = {
  articleSourceCode?: InputMaybe<ArticleSources_Enum>;
  id?: InputMaybe<Scalars['uuid']>;
  originalId?: InputMaybe<Scalars['String']>;
  path?: InputMaybe<Scalars['String']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['timestamp']>;
  title?: InputMaybe<Scalars['String']>;
};

/** update columns of table "articles" */
export enum Articles_Update_Column {
  /** column name */
  ArticleSourceCode = 'articleSourceCode',
  /** column name */
  Id = 'id',
  /** column name */
  OriginalId = 'originalId',
  /** column name */
  Path = 'path',
  /** column name */
  StockIssueCode = 'stockIssueCode',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  Title = 'title'
}

export type Articles_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Articles_Set_Input>;
  where: Articles_Bool_Exp;
};

/** Boolean expression to compare columns of type "bigint". All fields are combined with logical 'AND'. */
export type Bigint_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['bigint']>;
  _gt?: InputMaybe<Scalars['bigint']>;
  _gte?: InputMaybe<Scalars['bigint']>;
  _in?: InputMaybe<Array<Scalars['bigint']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['bigint']>;
  _lte?: InputMaybe<Scalars['bigint']>;
  _neq?: InputMaybe<Scalars['bigint']>;
  _nin?: InputMaybe<Array<Scalars['bigint']>>;
};

/** columns and relationships of "contracts" */
export type Contracts = {
  __typename?: 'contracts';
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  expireAt: Scalars['timestamp'];
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid'];
  maxUsers: Scalars['bigint'];
  /** An object relationship */
  plan?: Maybe<Plans>;
  planCode: Scalars['String'];
  startAt: Scalars['timestamp'];
};


/** columns and relationships of "contracts" */
export type Contracts_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "contracts" */
export type Contracts_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "contracts" */
export type Contracts_Aggregate = {
  __typename?: 'contracts_aggregate';
  aggregate?: Maybe<Contracts_Aggregate_Fields>;
  nodes: Array<Contracts>;
};

export type Contracts_Aggregate_Bool_Exp = {
  count?: InputMaybe<Contracts_Aggregate_Bool_Exp_Count>;
};

export type Contracts_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Contracts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Contracts_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "contracts" */
export type Contracts_Aggregate_Fields = {
  __typename?: 'contracts_aggregate_fields';
  avg?: Maybe<Contracts_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<Contracts_Max_Fields>;
  min?: Maybe<Contracts_Min_Fields>;
  stddev?: Maybe<Contracts_Stddev_Fields>;
  stddev_pop?: Maybe<Contracts_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<Contracts_Stddev_Samp_Fields>;
  sum?: Maybe<Contracts_Sum_Fields>;
  var_pop?: Maybe<Contracts_Var_Pop_Fields>;
  var_samp?: Maybe<Contracts_Var_Samp_Fields>;
  variance?: Maybe<Contracts_Variance_Fields>;
};


/** aggregate fields of "contracts" */
export type Contracts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Contracts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "contracts" */
export type Contracts_Aggregate_Order_By = {
  avg?: InputMaybe<Contracts_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Contracts_Max_Order_By>;
  min?: InputMaybe<Contracts_Min_Order_By>;
  stddev?: InputMaybe<Contracts_Stddev_Order_By>;
  stddev_pop?: InputMaybe<Contracts_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<Contracts_Stddev_Samp_Order_By>;
  sum?: InputMaybe<Contracts_Sum_Order_By>;
  var_pop?: InputMaybe<Contracts_Var_Pop_Order_By>;
  var_samp?: InputMaybe<Contracts_Var_Samp_Order_By>;
  variance?: InputMaybe<Contracts_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "contracts" */
export type Contracts_Arr_Rel_Insert_Input = {
  data: Array<Contracts_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};

/** aggregate avg on columns */
export type Contracts_Avg_Fields = {
  __typename?: 'contracts_avg_fields';
  maxUsers?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "contracts" */
export type Contracts_Avg_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "contracts". All fields are combined with a logical 'AND'. */
export type Contracts_Bool_Exp = {
  _and?: InputMaybe<Array<Contracts_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Contracts_Bool_Exp>;
  _or?: InputMaybe<Array<Contracts_Bool_Exp>>;
  expireAt?: InputMaybe<Timestamp_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  maxUsers?: InputMaybe<Bigint_Comparison_Exp>;
  plan?: InputMaybe<Plans_Bool_Exp>;
  planCode?: InputMaybe<String_Comparison_Exp>;
  startAt?: InputMaybe<Timestamp_Comparison_Exp>;
};

/** unique or primary key constraints on table "contracts" */
export enum Contracts_Constraint {
  /** unique or primary key constraint on columns "groupId" */
  ContractsPkey = 'contracts_pkey'
}

/** input type for incrementing numeric columns in table "contracts" */
export type Contracts_Inc_Input = {
  maxUsers?: InputMaybe<Scalars['bigint']>;
};

/** input type for inserting data into table "contracts" */
export type Contracts_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  expireAt?: InputMaybe<Scalars['timestamp']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  maxUsers?: InputMaybe<Scalars['bigint']>;
  plan?: InputMaybe<Plans_Obj_Rel_Insert_Input>;
  planCode?: InputMaybe<Scalars['String']>;
  startAt?: InputMaybe<Scalars['timestamp']>;
};

/** aggregate max on columns */
export type Contracts_Max_Fields = {
  __typename?: 'contracts_max_fields';
  expireAt?: Maybe<Scalars['timestamp']>;
  groupId?: Maybe<Scalars['uuid']>;
  maxUsers?: Maybe<Scalars['bigint']>;
  planCode?: Maybe<Scalars['String']>;
  startAt?: Maybe<Scalars['timestamp']>;
};

/** order by max() on columns of table "contracts" */
export type Contracts_Max_Order_By = {
  expireAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  maxUsers?: InputMaybe<Order_By>;
  planCode?: InputMaybe<Order_By>;
  startAt?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Contracts_Min_Fields = {
  __typename?: 'contracts_min_fields';
  expireAt?: Maybe<Scalars['timestamp']>;
  groupId?: Maybe<Scalars['uuid']>;
  maxUsers?: Maybe<Scalars['bigint']>;
  planCode?: Maybe<Scalars['String']>;
  startAt?: Maybe<Scalars['timestamp']>;
};

/** order by min() on columns of table "contracts" */
export type Contracts_Min_Order_By = {
  expireAt?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  maxUsers?: InputMaybe<Order_By>;
  planCode?: InputMaybe<Order_By>;
  startAt?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "contracts" */
export type Contracts_Mutation_Response = {
  __typename?: 'contracts_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Contracts>;
};

/** input type for inserting object relation for remote table "contracts" */
export type Contracts_Obj_Rel_Insert_Input = {
  data: Contracts_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};

/** on_conflict condition type for table "contracts" */
export type Contracts_On_Conflict = {
  constraint: Contracts_Constraint;
  update_columns?: Array<Contracts_Update_Column>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};

/** Ordering options when selecting data from "contracts". */
export type Contracts_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  expireAt?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  maxUsers?: InputMaybe<Order_By>;
  plan?: InputMaybe<Plans_Order_By>;
  planCode?: InputMaybe<Order_By>;
  startAt?: InputMaybe<Order_By>;
};

/** primary key columns input for table: contracts */
export type Contracts_Pk_Columns_Input = {
  groupId: Scalars['uuid'];
};

/** select columns of table "contracts" */
export enum Contracts_Select_Column {
  /** column name */
  ExpireAt = 'expireAt',
  /** column name */
  GroupId = 'groupId',
  /** column name */
  MaxUsers = 'maxUsers',
  /** column name */
  PlanCode = 'planCode',
  /** column name */
  StartAt = 'startAt'
}

/** input type for updating data in table "contracts" */
export type Contracts_Set_Input = {
  expireAt?: InputMaybe<Scalars['timestamp']>;
  groupId?: InputMaybe<Scalars['uuid']>;
  maxUsers?: InputMaybe<Scalars['bigint']>;
  planCode?: InputMaybe<Scalars['String']>;
  startAt?: InputMaybe<Scalars['timestamp']>;
};

/** aggregate stddev on columns */
export type Contracts_Stddev_Fields = {
  __typename?: 'contracts_stddev_fields';
  maxUsers?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "contracts" */
export type Contracts_Stddev_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type Contracts_Stddev_Pop_Fields = {
  __typename?: 'contracts_stddev_pop_fields';
  maxUsers?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "contracts" */
export type Contracts_Stddev_Pop_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type Contracts_Stddev_Samp_Fields = {
  __typename?: 'contracts_stddev_samp_fields';
  maxUsers?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "contracts" */
export type Contracts_Stddev_Samp_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "contracts" */
export type Contracts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Contracts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Contracts_Stream_Cursor_Value_Input = {
  expireAt?: InputMaybe<Scalars['timestamp']>;
  groupId?: InputMaybe<Scalars['uuid']>;
  maxUsers?: InputMaybe<Scalars['bigint']>;
  planCode?: InputMaybe<Scalars['String']>;
  startAt?: InputMaybe<Scalars['timestamp']>;
};

/** aggregate sum on columns */
export type Contracts_Sum_Fields = {
  __typename?: 'contracts_sum_fields';
  maxUsers?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "contracts" */
export type Contracts_Sum_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** update columns of table "contracts" */
export enum Contracts_Update_Column {
  /** column name */
  ExpireAt = 'expireAt',
  /** column name */
  GroupId = 'groupId',
  /** column name */
  MaxUsers = 'maxUsers',
  /** column name */
  PlanCode = 'planCode',
  /** column name */
  StartAt = 'startAt'
}

export type Contracts_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<Contracts_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Contracts_Set_Input>;
  where: Contracts_Bool_Exp;
};

/** aggregate var_pop on columns */
export type Contracts_Var_Pop_Fields = {
  __typename?: 'contracts_var_pop_fields';
  maxUsers?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "contracts" */
export type Contracts_Var_Pop_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type Contracts_Var_Samp_Fields = {
  __typename?: 'contracts_var_samp_fields';
  maxUsers?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "contracts" */
export type Contracts_Var_Samp_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type Contracts_Variance_Fields = {
  __typename?: 'contracts_variance_fields';
  maxUsers?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "contracts" */
export type Contracts_Variance_Order_By = {
  maxUsers?: InputMaybe<Order_By>;
};

/** ordering argument of a cursor */
export enum Cursor_Ordering {
  /** ascending ordering of the cursor */
  Asc = 'ASC',
  /** descending ordering of the cursor */
  Desc = 'DESC'
}

/** columns and relationships of "dailyImpacts" */
export type DailyImpacts = {
  __typename?: 'dailyImpacts';
  date: Scalars['date'];
  id: Scalars['uuid'];
  /** An object relationship */
  mlModel: MlModels;
  mlModelId: Scalars['uuid'];
  name: Scalars['String'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String'];
  timestamp: Scalars['timestamp'];
  value: Scalars['float8'];
};

/** aggregated selection of "dailyImpacts" */
export type DailyImpacts_Aggregate = {
  __typename?: 'dailyImpacts_aggregate';
  aggregate?: Maybe<DailyImpacts_Aggregate_Fields>;
  nodes: Array<DailyImpacts>;
};

export type DailyImpacts_Aggregate_Bool_Exp = {
  avg?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp_Var_Samp>;
};

export type DailyImpacts_Aggregate_Bool_Exp_Avg = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Corr = {
  arguments: DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments = {
  X: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type DailyImpacts_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type DailyImpacts_Aggregate_Bool_Exp_Max = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Min = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Sum = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type DailyImpacts_Aggregate_Bool_Exp_Var_Samp = {
  arguments: DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<DailyImpacts_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "dailyImpacts" */
export type DailyImpacts_Aggregate_Fields = {
  __typename?: 'dailyImpacts_aggregate_fields';
  avg?: Maybe<DailyImpacts_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<DailyImpacts_Max_Fields>;
  min?: Maybe<DailyImpacts_Min_Fields>;
  stddev?: Maybe<DailyImpacts_Stddev_Fields>;
  stddev_pop?: Maybe<DailyImpacts_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<DailyImpacts_Stddev_Samp_Fields>;
  sum?: Maybe<DailyImpacts_Sum_Fields>;
  var_pop?: Maybe<DailyImpacts_Var_Pop_Fields>;
  var_samp?: Maybe<DailyImpacts_Var_Samp_Fields>;
  variance?: Maybe<DailyImpacts_Variance_Fields>;
};


/** aggregate fields of "dailyImpacts" */
export type DailyImpacts_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "dailyImpacts" */
export type DailyImpacts_Aggregate_Order_By = {
  avg?: InputMaybe<DailyImpacts_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<DailyImpacts_Max_Order_By>;
  min?: InputMaybe<DailyImpacts_Min_Order_By>;
  stddev?: InputMaybe<DailyImpacts_Stddev_Order_By>;
  stddev_pop?: InputMaybe<DailyImpacts_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<DailyImpacts_Stddev_Samp_Order_By>;
  sum?: InputMaybe<DailyImpacts_Sum_Order_By>;
  var_pop?: InputMaybe<DailyImpacts_Var_Pop_Order_By>;
  var_samp?: InputMaybe<DailyImpacts_Var_Samp_Order_By>;
  variance?: InputMaybe<DailyImpacts_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "dailyImpacts" */
export type DailyImpacts_Arr_Rel_Insert_Input = {
  data: Array<DailyImpacts_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<DailyImpacts_On_Conflict>;
};

/** aggregate avg on columns */
export type DailyImpacts_Avg_Fields = {
  __typename?: 'dailyImpacts_avg_fields';
  value?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "dailyImpacts" */
export type DailyImpacts_Avg_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "dailyImpacts". All fields are combined with a logical 'AND'. */
export type DailyImpacts_Bool_Exp = {
  _and?: InputMaybe<Array<DailyImpacts_Bool_Exp>>;
  _not?: InputMaybe<DailyImpacts_Bool_Exp>;
  _or?: InputMaybe<Array<DailyImpacts_Bool_Exp>>;
  date?: InputMaybe<Date_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  mlModel?: InputMaybe<MlModels_Bool_Exp>;
  mlModelId?: InputMaybe<Uuid_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  timestamp?: InputMaybe<Timestamp_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "dailyImpacts" */
export enum DailyImpacts_Constraint {
  /** unique or primary key constraint on columns "id" */
  DailyImpactsPkey = 'dailyImpacts_pkey'
}

/** input type for incrementing numeric columns in table "dailyImpacts" */
export type DailyImpacts_Inc_Input = {
  value?: InputMaybe<Scalars['float8']>;
};

/** input type for inserting data into table "dailyImpacts" */
export type DailyImpacts_Insert_Input = {
  date?: InputMaybe<Scalars['date']>;
  id?: InputMaybe<Scalars['uuid']>;
  mlModel?: InputMaybe<MlModels_Obj_Rel_Insert_Input>;
  mlModelId?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['timestamp']>;
  value?: InputMaybe<Scalars['float8']>;
};

/** aggregate max on columns */
export type DailyImpacts_Max_Fields = {
  __typename?: 'dailyImpacts_max_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  mlModelId?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  stockIssueCode?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamp']>;
  value?: Maybe<Scalars['float8']>;
};

/** order by max() on columns of table "dailyImpacts" */
export type DailyImpacts_Max_Order_By = {
  date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  mlModelId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type DailyImpacts_Min_Fields = {
  __typename?: 'dailyImpacts_min_fields';
  date?: Maybe<Scalars['date']>;
  id?: Maybe<Scalars['uuid']>;
  mlModelId?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  stockIssueCode?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['timestamp']>;
  value?: Maybe<Scalars['float8']>;
};

/** order by min() on columns of table "dailyImpacts" */
export type DailyImpacts_Min_Order_By = {
  date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  mlModelId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "dailyImpacts" */
export type DailyImpacts_Mutation_Response = {
  __typename?: 'dailyImpacts_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<DailyImpacts>;
};

/** on_conflict condition type for table "dailyImpacts" */
export type DailyImpacts_On_Conflict = {
  constraint: DailyImpacts_Constraint;
  update_columns?: Array<DailyImpacts_Update_Column>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};

/** Ordering options when selecting data from "dailyImpacts". */
export type DailyImpacts_Order_By = {
  date?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  mlModel?: InputMaybe<MlModels_Order_By>;
  mlModelId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  timestamp?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
};

/** primary key columns input for table: dailyImpacts */
export type DailyImpacts_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  MlModelId = 'mlModelId',
  /** column name */
  Name = 'name',
  /** column name */
  StockIssueCode = 'stockIssueCode',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_avg_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Avg_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_corr_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Corr_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_max_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Max_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_min_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Min_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_sum_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Sum_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** select "dailyImpacts_aggregate_bool_exp_var_samp_arguments_columns" columns of table "dailyImpacts" */
export enum DailyImpacts_Select_Column_DailyImpacts_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns {
  /** column name */
  Value = 'value'
}

/** input type for updating data in table "dailyImpacts" */
export type DailyImpacts_Set_Input = {
  date?: InputMaybe<Scalars['date']>;
  id?: InputMaybe<Scalars['uuid']>;
  mlModelId?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['timestamp']>;
  value?: InputMaybe<Scalars['float8']>;
};

/** aggregate stddev on columns */
export type DailyImpacts_Stddev_Fields = {
  __typename?: 'dailyImpacts_stddev_fields';
  value?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "dailyImpacts" */
export type DailyImpacts_Stddev_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type DailyImpacts_Stddev_Pop_Fields = {
  __typename?: 'dailyImpacts_stddev_pop_fields';
  value?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "dailyImpacts" */
export type DailyImpacts_Stddev_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type DailyImpacts_Stddev_Samp_Fields = {
  __typename?: 'dailyImpacts_stddev_samp_fields';
  value?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "dailyImpacts" */
export type DailyImpacts_Stddev_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "dailyImpacts" */
export type DailyImpacts_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: DailyImpacts_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type DailyImpacts_Stream_Cursor_Value_Input = {
  date?: InputMaybe<Scalars['date']>;
  id?: InputMaybe<Scalars['uuid']>;
  mlModelId?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['timestamp']>;
  value?: InputMaybe<Scalars['float8']>;
};

/** aggregate sum on columns */
export type DailyImpacts_Sum_Fields = {
  __typename?: 'dailyImpacts_sum_fields';
  value?: Maybe<Scalars['float8']>;
};

/** order by sum() on columns of table "dailyImpacts" */
export type DailyImpacts_Sum_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** update columns of table "dailyImpacts" */
export enum DailyImpacts_Update_Column {
  /** column name */
  Date = 'date',
  /** column name */
  Id = 'id',
  /** column name */
  MlModelId = 'mlModelId',
  /** column name */
  Name = 'name',
  /** column name */
  StockIssueCode = 'stockIssueCode',
  /** column name */
  Timestamp = 'timestamp',
  /** column name */
  Value = 'value'
}

export type DailyImpacts_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<DailyImpacts_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<DailyImpacts_Set_Input>;
  where: DailyImpacts_Bool_Exp;
};

/** aggregate var_pop on columns */
export type DailyImpacts_Var_Pop_Fields = {
  __typename?: 'dailyImpacts_var_pop_fields';
  value?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "dailyImpacts" */
export type DailyImpacts_Var_Pop_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type DailyImpacts_Var_Samp_Fields = {
  __typename?: 'dailyImpacts_var_samp_fields';
  value?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "dailyImpacts" */
export type DailyImpacts_Var_Samp_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type DailyImpacts_Variance_Fields = {
  __typename?: 'dailyImpacts_variance_fields';
  value?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "dailyImpacts" */
export type DailyImpacts_Variance_Order_By = {
  value?: InputMaybe<Order_By>;
};

/** Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'. */
export type Date_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['date']>;
  _gt?: InputMaybe<Scalars['date']>;
  _gte?: InputMaybe<Scalars['date']>;
  _in?: InputMaybe<Array<Scalars['date']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['date']>;
  _lte?: InputMaybe<Scalars['date']>;
  _neq?: InputMaybe<Scalars['date']>;
  _nin?: InputMaybe<Array<Scalars['date']>>;
};

/** columns and relationships of "eventTypeTranslations" */
export type EventTypeTranslations = {
  __typename?: 'eventTypeTranslations';
  /** An object relationship */
  eventType?: Maybe<EventTypes>;
  eventTypeCode: EventTypes_Enum;
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  text: Scalars['String'];
};

/** aggregated selection of "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate = {
  __typename?: 'eventTypeTranslations_aggregate';
  aggregate?: Maybe<EventTypeTranslations_Aggregate_Fields>;
  nodes: Array<EventTypeTranslations>;
};

export type EventTypeTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<EventTypeTranslations_Aggregate_Bool_Exp_Count>;
};

export type EventTypeTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate_Fields = {
  __typename?: 'eventTypeTranslations_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<EventTypeTranslations_Max_Fields>;
  min?: Maybe<EventTypeTranslations_Min_Fields>;
};


/** aggregate fields of "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "eventTypeTranslations" */
export type EventTypeTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<EventTypeTranslations_Max_Order_By>;
  min?: InputMaybe<EventTypeTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "eventTypeTranslations" */
export type EventTypeTranslations_Arr_Rel_Insert_Input = {
  data: Array<EventTypeTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<EventTypeTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "eventTypeTranslations". All fields are combined with a logical 'AND'. */
export type EventTypeTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<EventTypeTranslations_Bool_Exp>>;
  _not?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<EventTypeTranslations_Bool_Exp>>;
  eventType?: InputMaybe<EventTypes_Bool_Exp>;
  eventTypeCode?: InputMaybe<EventTypes_Enum_Comparison_Exp>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "eventTypeTranslations" */
export enum EventTypeTranslations_Constraint {
  /** unique or primary key constraint on columns "languageCode", "eventTypeCode" */
  EventTypeTranslationsPkey = 'eventTypeTranslations_pkey'
}

/** input type for inserting data into table "eventTypeTranslations" */
export type EventTypeTranslations_Insert_Input = {
  eventType?: InputMaybe<EventTypes_Obj_Rel_Insert_Input>;
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type EventTypeTranslations_Max_Fields = {
  __typename?: 'eventTypeTranslations_max_fields';
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "eventTypeTranslations" */
export type EventTypeTranslations_Max_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type EventTypeTranslations_Min_Fields = {
  __typename?: 'eventTypeTranslations_min_fields';
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "eventTypeTranslations" */
export type EventTypeTranslations_Min_Order_By = {
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "eventTypeTranslations" */
export type EventTypeTranslations_Mutation_Response = {
  __typename?: 'eventTypeTranslations_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<EventTypeTranslations>;
};

/** on_conflict condition type for table "eventTypeTranslations" */
export type EventTypeTranslations_On_Conflict = {
  constraint: EventTypeTranslations_Constraint;
  update_columns?: Array<EventTypeTranslations_Update_Column>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "eventTypeTranslations". */
export type EventTypeTranslations_Order_By = {
  eventType?: InputMaybe<EventTypes_Order_By>;
  eventTypeCode?: InputMaybe<Order_By>;
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: eventTypeTranslations */
export type EventTypeTranslations_Pk_Columns_Input = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};

/** select columns of table "eventTypeTranslations" */
export enum EventTypeTranslations_Select_Column {
  /** column name */
  EventTypeCode = 'eventTypeCode',
  /** column name */
  LanguageCode = 'languageCode',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "eventTypeTranslations" */
export type EventTypeTranslations_Set_Input = {
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "eventTypeTranslations" */
export type EventTypeTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: EventTypeTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type EventTypeTranslations_Stream_Cursor_Value_Input = {
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']>;
};

/** update columns of table "eventTypeTranslations" */
export enum EventTypeTranslations_Update_Column {
  /** column name */
  EventTypeCode = 'eventTypeCode',
  /** column name */
  LanguageCode = 'languageCode',
  /** column name */
  Text = 'text'
}

export type EventTypeTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<EventTypeTranslations_Set_Input>;
  where: EventTypeTranslations_Bool_Exp;
};

/** columns and relationships of "eventTypes" */
export type EventTypes = {
  __typename?: 'eventTypes';
  code: Scalars['String'];
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
};


/** columns and relationships of "eventTypes" */
export type EventTypesEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "eventTypes" */
export type EventTypesGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};

/** aggregated selection of "eventTypes" */
export type EventTypes_Aggregate = {
  __typename?: 'eventTypes_aggregate';
  aggregate?: Maybe<EventTypes_Aggregate_Fields>;
  nodes: Array<EventTypes>;
};

/** aggregate fields of "eventTypes" */
export type EventTypes_Aggregate_Fields = {
  __typename?: 'eventTypes_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<EventTypes_Max_Fields>;
  min?: Maybe<EventTypes_Min_Fields>;
};


/** aggregate fields of "eventTypes" */
export type EventTypes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<EventTypes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "eventTypes". All fields are combined with a logical 'AND'. */
export type EventTypes_Bool_Exp = {
  _and?: InputMaybe<Array<EventTypes_Bool_Exp>>;
  _not?: InputMaybe<EventTypes_Bool_Exp>;
  _or?: InputMaybe<Array<EventTypes_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Bool_Exp>;
  groupEvents?: InputMaybe<GroupEvents_Bool_Exp>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "eventTypes" */
export enum EventTypes_Constraint {
  /** unique or primary key constraint on columns "code" */
  EventTypesPkey = 'eventTypes_pkey'
}

export enum EventTypes_Enum {
  AnalystReports = 'analyst_reports',
  BriefingForCorp = 'briefing_for_corp',
  BriefingForIndividual = 'briefing_for_individual',
  FinancialResultsBriefing = 'financial_results_briefing',
  MediaExposure = 'media_exposure',
  Other = 'other',
  Sns = 'sns',
  Streaming = 'streaming'
}

/** Boolean expression to compare columns of type "eventTypes_enum". All fields are combined with logical 'AND'. */
export type EventTypes_Enum_Comparison_Exp = {
  _eq?: InputMaybe<EventTypes_Enum>;
  _in?: InputMaybe<Array<EventTypes_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _neq?: InputMaybe<EventTypes_Enum>;
  _nin?: InputMaybe<Array<EventTypes_Enum>>;
};

/** input type for inserting data into table "eventTypes" */
export type EventTypes_Insert_Input = {
  code?: InputMaybe<Scalars['String']>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Arr_Rel_Insert_Input>;
  groupEvents?: InputMaybe<GroupEvents_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type EventTypes_Max_Fields = {
  __typename?: 'eventTypes_max_fields';
  code?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type EventTypes_Min_Fields = {
  __typename?: 'eventTypes_min_fields';
  code?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "eventTypes" */
export type EventTypes_Mutation_Response = {
  __typename?: 'eventTypes_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<EventTypes>;
};

/** input type for inserting object relation for remote table "eventTypes" */
export type EventTypes_Obj_Rel_Insert_Input = {
  data: EventTypes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<EventTypes_On_Conflict>;
};

/** on_conflict condition type for table "eventTypes" */
export type EventTypes_On_Conflict = {
  constraint: EventTypes_Constraint;
  update_columns?: Array<EventTypes_Update_Column>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};

/** Ordering options when selecting data from "eventTypes". */
export type EventTypes_Order_By = {
  code?: InputMaybe<Order_By>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Order_By>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Order_By>;
};

/** primary key columns input for table: eventTypes */
export type EventTypes_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "eventTypes" */
export enum EventTypes_Select_Column {
  /** column name */
  Code = 'code'
}

/** input type for updating data in table "eventTypes" */
export type EventTypes_Set_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "eventTypes" */
export type EventTypes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: EventTypes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type EventTypes_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** update columns of table "eventTypes" */
export enum EventTypes_Update_Column {
  /** column name */
  Code = 'code'
}

export type EventTypes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<EventTypes_Set_Input>;
  where: EventTypes_Bool_Exp;
};

/** Boolean expression to compare columns of type "float8". All fields are combined with logical 'AND'. */
export type Float8_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['float8']>;
  _gt?: InputMaybe<Scalars['float8']>;
  _gte?: InputMaybe<Scalars['float8']>;
  _in?: InputMaybe<Array<Scalars['float8']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['float8']>;
  _lte?: InputMaybe<Scalars['float8']>;
  _neq?: InputMaybe<Scalars['float8']>;
  _nin?: InputMaybe<Array<Scalars['float8']>>;
};

/** columns and relationships of "groupContents" */
export type GroupContents = {
  __typename?: 'groupContents';
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  id: Scalars['uuid'];
  memo: Scalars['String'];
};


/** columns and relationships of "groupContents" */
export type GroupContents_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupContents" */
export type GroupContents_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "groupContents" */
export type GroupContents_Aggregate = {
  __typename?: 'groupContents_aggregate';
  aggregate?: Maybe<GroupContents_Aggregate_Fields>;
  nodes: Array<GroupContents>;
};

export type GroupContents_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupContents_Aggregate_Bool_Exp_Count>;
};

export type GroupContents_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupContents_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupContents" */
export type GroupContents_Aggregate_Fields = {
  __typename?: 'groupContents_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupContents_Max_Fields>;
  min?: Maybe<GroupContents_Min_Fields>;
};


/** aggregate fields of "groupContents" */
export type GroupContents_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupContents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupContents" */
export type GroupContents_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupContents_Max_Order_By>;
  min?: InputMaybe<GroupContents_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupContents" */
export type GroupContents_Arr_Rel_Insert_Input = {
  data: Array<GroupContents_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupContents". All fields are combined with a logical 'AND'. */
export type GroupContents_Bool_Exp = {
  _and?: InputMaybe<Array<GroupContents_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupContents_Bool_Exp>;
  _or?: InputMaybe<Array<GroupContents_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memo?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupContents" */
export enum GroupContents_Constraint {
  /** unique or primary key constraint on columns "id" */
  GroupContentsPkey = 'groupContents_pkey'
}

/** input type for inserting data into table "groupContents" */
export type GroupContents_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  memo?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type GroupContents_Max_Fields = {
  __typename?: 'groupContents_max_fields';
  id?: Maybe<Scalars['uuid']>;
  memo?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groupContents" */
export type GroupContents_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupContents_Min_Fields = {
  __typename?: 'groupContents_min_fields';
  id?: Maybe<Scalars['uuid']>;
  memo?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groupContents" */
export type GroupContents_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupContents" */
export type GroupContents_Mutation_Response = {
  __typename?: 'groupContents_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupContents>;
};

/** input type for inserting object relation for remote table "groupContents" */
export type GroupContents_Obj_Rel_Insert_Input = {
  data: GroupContents_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};

/** on_conflict condition type for table "groupContents" */
export type GroupContents_On_Conflict = {
  constraint: GroupContents_Constraint;
  update_columns?: Array<GroupContents_Update_Column>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};

/** Ordering options when selecting data from "groupContents". */
export type GroupContents_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupContents */
export type GroupContents_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "groupContents" */
export enum GroupContents_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Memo = 'memo'
}

/** input type for updating data in table "groupContents" */
export type GroupContents_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  memo?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupContents" */
export type GroupContents_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupContents_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupContents_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  memo?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupContents" */
export enum GroupContents_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Memo = 'memo'
}

export type GroupContents_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupContents_Set_Input>;
  where: GroupContents_Bool_Exp;
};

/** columns and relationships of "groupEvents" */
export type GroupEvents = {
  __typename?: 'groupEvents';
  date: Scalars['date'];
  /** An object relationship */
  eventType?: Maybe<EventTypes>;
  eventTypeCode: EventTypes_Enum;
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid'];
  id: Scalars['uuid'];
  memo: Scalars['String'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String'];
};

/** aggregated selection of "groupEvents" */
export type GroupEvents_Aggregate = {
  __typename?: 'groupEvents_aggregate';
  aggregate?: Maybe<GroupEvents_Aggregate_Fields>;
  nodes: Array<GroupEvents>;
};

export type GroupEvents_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupEvents_Aggregate_Bool_Exp_Count>;
};

export type GroupEvents_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupEvents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupEvents_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupEvents" */
export type GroupEvents_Aggregate_Fields = {
  __typename?: 'groupEvents_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupEvents_Max_Fields>;
  min?: Maybe<GroupEvents_Min_Fields>;
};


/** aggregate fields of "groupEvents" */
export type GroupEvents_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupEvents_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupEvents" */
export type GroupEvents_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupEvents_Max_Order_By>;
  min?: InputMaybe<GroupEvents_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupEvents" */
export type GroupEvents_Arr_Rel_Insert_Input = {
  data: Array<GroupEvents_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupEvents_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupEvents". All fields are combined with a logical 'AND'. */
export type GroupEvents_Bool_Exp = {
  _and?: InputMaybe<Array<GroupEvents_Bool_Exp>>;
  _not?: InputMaybe<GroupEvents_Bool_Exp>;
  _or?: InputMaybe<Array<GroupEvents_Bool_Exp>>;
  date?: InputMaybe<Date_Comparison_Exp>;
  eventType?: InputMaybe<EventTypes_Bool_Exp>;
  eventTypeCode?: InputMaybe<EventTypes_Enum_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memo?: InputMaybe<String_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupEvents" */
export enum GroupEvents_Constraint {
  /** unique or primary key constraint on columns "id" */
  GroupEventsPkey = 'groupEvents_pkey'
}

/** input type for inserting data into table "groupEvents" */
export type GroupEvents_Insert_Input = {
  date?: InputMaybe<Scalars['date']>;
  eventType?: InputMaybe<EventTypes_Obj_Rel_Insert_Input>;
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  memo?: InputMaybe<Scalars['String']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type GroupEvents_Max_Fields = {
  __typename?: 'groupEvents_max_fields';
  date?: Maybe<Scalars['date']>;
  groupId?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  memo?: Maybe<Scalars['String']>;
  stockIssueCode?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groupEvents" */
export type GroupEvents_Max_Order_By = {
  date?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupEvents_Min_Fields = {
  __typename?: 'groupEvents_min_fields';
  date?: Maybe<Scalars['date']>;
  groupId?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  memo?: Maybe<Scalars['String']>;
  stockIssueCode?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groupEvents" */
export type GroupEvents_Min_Order_By = {
  date?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupEvents" */
export type GroupEvents_Mutation_Response = {
  __typename?: 'groupEvents_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupEvents>;
};

/** on_conflict condition type for table "groupEvents" */
export type GroupEvents_On_Conflict = {
  constraint: GroupEvents_Constraint;
  update_columns?: Array<GroupEvents_Update_Column>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};

/** Ordering options when selecting data from "groupEvents". */
export type GroupEvents_Order_By = {
  date?: InputMaybe<Order_By>;
  eventType?: InputMaybe<EventTypes_Order_By>;
  eventTypeCode?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  memo?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupEvents */
export type GroupEvents_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "groupEvents" */
export enum GroupEvents_Select_Column {
  /** column name */
  Date = 'date',
  /** column name */
  EventTypeCode = 'eventTypeCode',
  /** column name */
  GroupId = 'groupId',
  /** column name */
  Id = 'id',
  /** column name */
  Memo = 'memo',
  /** column name */
  StockIssueCode = 'stockIssueCode'
}

/** input type for updating data in table "groupEvents" */
export type GroupEvents_Set_Input = {
  date?: InputMaybe<Scalars['date']>;
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  groupId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  memo?: InputMaybe<Scalars['String']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupEvents" */
export type GroupEvents_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupEvents_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupEvents_Stream_Cursor_Value_Input = {
  date?: InputMaybe<Scalars['date']>;
  eventTypeCode?: InputMaybe<EventTypes_Enum>;
  groupId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  memo?: InputMaybe<Scalars['String']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupEvents" */
export enum GroupEvents_Update_Column {
  /** column name */
  Date = 'date',
  /** column name */
  EventTypeCode = 'eventTypeCode',
  /** column name */
  GroupId = 'groupId',
  /** column name */
  Id = 'id',
  /** column name */
  Memo = 'memo',
  /** column name */
  StockIssueCode = 'stockIssueCode'
}

export type GroupEvents_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupEvents_Set_Input>;
  where: GroupEvents_Bool_Exp;
};

/** columns and relationships of "groupInvitations" */
export type GroupInvitations = {
  __typename?: 'groupInvitations';
  /** An array relationship */
  _memberships: Array<GroupInvitations>;
  /** An aggregate relationship */
  _memberships_aggregate: GroupInvitations_Aggregate;
  email: Scalars['String'];
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid'];
  /** An object relationship */
  membership?: Maybe<Memberships>;
  name: Scalars['String'];
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  user?: Maybe<Users>;
  userId: Scalars['uuid'];
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitations_MembershipsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitations_Memberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitationsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "groupInvitations" */
export type GroupInvitationsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "groupInvitations" */
export type GroupInvitations_Aggregate = {
  __typename?: 'groupInvitations_aggregate';
  aggregate?: Maybe<GroupInvitations_Aggregate_Fields>;
  nodes: Array<GroupInvitations>;
};

export type GroupInvitations_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp_Count>;
};

export type GroupInvitations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupInvitations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupInvitations" */
export type GroupInvitations_Aggregate_Fields = {
  __typename?: 'groupInvitations_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupInvitations_Max_Fields>;
  min?: Maybe<GroupInvitations_Min_Fields>;
};


/** aggregate fields of "groupInvitations" */
export type GroupInvitations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupInvitations" */
export type GroupInvitations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupInvitations_Max_Order_By>;
  min?: InputMaybe<GroupInvitations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupInvitations" */
export type GroupInvitations_Arr_Rel_Insert_Input = {
  data: Array<GroupInvitations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupInvitations". All fields are combined with a logical 'AND'. */
export type GroupInvitations_Bool_Exp = {
  _and?: InputMaybe<Array<GroupInvitations_Bool_Exp>>;
  _memberships?: InputMaybe<GroupInvitations_Bool_Exp>;
  _memberships_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupInvitations_Bool_Exp>;
  _or?: InputMaybe<Array<GroupInvitations_Bool_Exp>>;
  email?: InputMaybe<String_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  membership?: InputMaybe<Memberships_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupInvitations" */
export enum GroupInvitations_Constraint {
  /** unique or primary key constraint on columns "email", "groupId" */
  GroupInvitationsPkey = 'groupInvitations_pkey',
  /** unique or primary key constraint on columns "userId", "groupId" */
  GroupInvitationsUserIdGroupIdUniqueness = 'groupInvitations_userId_groupId_uniqueness'
}

/** input type for inserting data into table "groupInvitations" */
export type GroupInvitations_Insert_Input = {
  _memberships?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  email?: InputMaybe<Scalars['String']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  membership?: InputMaybe<Memberships_Obj_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type GroupInvitations_Max_Fields = {
  __typename?: 'groupInvitations_max_fields';
  email?: Maybe<Scalars['String']>;
  groupId?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "groupInvitations" */
export type GroupInvitations_Max_Order_By = {
  email?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupInvitations_Min_Fields = {
  __typename?: 'groupInvitations_min_fields';
  email?: Maybe<Scalars['String']>;
  groupId?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "groupInvitations" */
export type GroupInvitations_Min_Order_By = {
  email?: InputMaybe<Order_By>;
  groupId?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupInvitations" */
export type GroupInvitations_Mutation_Response = {
  __typename?: 'groupInvitations_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupInvitations>;
};

/** input type for inserting object relation for remote table "groupInvitations" */
export type GroupInvitations_Obj_Rel_Insert_Input = {
  data: GroupInvitations_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};

/** on_conflict condition type for table "groupInvitations" */
export type GroupInvitations_On_Conflict = {
  constraint: GroupInvitations_Constraint;
  update_columns?: Array<GroupInvitations_Update_Column>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};

/** Ordering options when selecting data from "groupInvitations". */
export type GroupInvitations_Order_By = {
  _memberships_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  email?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  membership?: InputMaybe<Memberships_Order_By>;
  name?: InputMaybe<Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  user?: InputMaybe<Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupInvitations */
export type GroupInvitations_Pk_Columns_Input = {
  email: Scalars['String'];
  groupId: Scalars['uuid'];
};

/** select columns of table "groupInvitations" */
export enum GroupInvitations_Select_Column {
  /** column name */
  Email = 'email',
  /** column name */
  GroupId = 'groupId',
  /** column name */
  Name = 'name',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "groupInvitations" */
export type GroupInvitations_Set_Input = {
  email?: InputMaybe<Scalars['String']>;
  groupId?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** Streaming cursor of the table "groupInvitations" */
export type GroupInvitations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupInvitations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupInvitations_Stream_Cursor_Value_Input = {
  email?: InputMaybe<Scalars['String']>;
  groupId?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** update columns of table "groupInvitations" */
export enum GroupInvitations_Update_Column {
  /** column name */
  Email = 'email',
  /** column name */
  GroupId = 'groupId',
  /** column name */
  Name = 'name',
  /** column name */
  UserId = 'userId'
}

export type GroupInvitations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupInvitations_Set_Input>;
  where: GroupInvitations_Bool_Exp;
};

/** columns and relationships of "groupListedStockIssues" */
export type GroupListedStockIssues = {
  __typename?: 'groupListedStockIssues';
  /** An object relationship */
  groupStockIssueList: GroupStockIssueLists;
  groupStockIssueListId: Scalars['uuid'];
  id: Scalars['uuid'];
  /** An object relationship */
  stockIssue: StockIssues;
  stockIssueCode: Scalars['String'];
};

/** aggregated selection of "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate = {
  __typename?: 'groupListedStockIssues_aggregate';
  aggregate?: Maybe<GroupListedStockIssues_Aggregate_Fields>;
  nodes: Array<GroupListedStockIssues>;
};

export type GroupListedStockIssues_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupListedStockIssues_Aggregate_Bool_Exp_Count>;
};

export type GroupListedStockIssues_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate_Fields = {
  __typename?: 'groupListedStockIssues_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupListedStockIssues_Max_Fields>;
  min?: Maybe<GroupListedStockIssues_Min_Fields>;
};


/** aggregate fields of "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupListedStockIssues" */
export type GroupListedStockIssues_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupListedStockIssues_Max_Order_By>;
  min?: InputMaybe<GroupListedStockIssues_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupListedStockIssues" */
export type GroupListedStockIssues_Arr_Rel_Insert_Input = {
  data: Array<GroupListedStockIssues_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupListedStockIssues_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupListedStockIssues". All fields are combined with a logical 'AND'. */
export type GroupListedStockIssues_Bool_Exp = {
  _and?: InputMaybe<Array<GroupListedStockIssues_Bool_Exp>>;
  _not?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  _or?: InputMaybe<Array<GroupListedStockIssues_Bool_Exp>>;
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  groupStockIssueListId?: InputMaybe<Uuid_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupListedStockIssues" */
export enum GroupListedStockIssues_Constraint {
  /** unique or primary key constraint on columns "id" */
  GroupListedStockIssuesPkey = 'groupListedStockIssues_pkey'
}

/** input type for inserting data into table "groupListedStockIssues" */
export type GroupListedStockIssues_Insert_Input = {
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Obj_Rel_Insert_Input>;
  groupStockIssueListId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type GroupListedStockIssues_Max_Fields = {
  __typename?: 'groupListedStockIssues_max_fields';
  groupStockIssueListId?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  stockIssueCode?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groupListedStockIssues" */
export type GroupListedStockIssues_Max_Order_By = {
  groupStockIssueListId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupListedStockIssues_Min_Fields = {
  __typename?: 'groupListedStockIssues_min_fields';
  groupStockIssueListId?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  stockIssueCode?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groupListedStockIssues" */
export type GroupListedStockIssues_Min_Order_By = {
  groupStockIssueListId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupListedStockIssues" */
export type GroupListedStockIssues_Mutation_Response = {
  __typename?: 'groupListedStockIssues_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupListedStockIssues>;
};

/** on_conflict condition type for table "groupListedStockIssues" */
export type GroupListedStockIssues_On_Conflict = {
  constraint: GroupListedStockIssues_Constraint;
  update_columns?: Array<GroupListedStockIssues_Update_Column>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};

/** Ordering options when selecting data from "groupListedStockIssues". */
export type GroupListedStockIssues_Order_By = {
  groupStockIssueList?: InputMaybe<GroupStockIssueLists_Order_By>;
  groupStockIssueListId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupListedStockIssues */
export type GroupListedStockIssues_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "groupListedStockIssues" */
export enum GroupListedStockIssues_Select_Column {
  /** column name */
  GroupStockIssueListId = 'groupStockIssueListId',
  /** column name */
  Id = 'id',
  /** column name */
  StockIssueCode = 'stockIssueCode'
}

/** input type for updating data in table "groupListedStockIssues" */
export type GroupListedStockIssues_Set_Input = {
  groupStockIssueListId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupListedStockIssues" */
export type GroupListedStockIssues_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupListedStockIssues_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupListedStockIssues_Stream_Cursor_Value_Input = {
  groupStockIssueListId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupListedStockIssues" */
export enum GroupListedStockIssues_Update_Column {
  /** column name */
  GroupStockIssueListId = 'groupStockIssueListId',
  /** column name */
  Id = 'id',
  /** column name */
  StockIssueCode = 'stockIssueCode'
}

export type GroupListedStockIssues_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupListedStockIssues_Set_Input>;
  where: GroupListedStockIssues_Bool_Exp;
};

/** columns and relationships of "groupSettlementDates" */
export type GroupSettlementDates = {
  __typename?: 'groupSettlementDates';
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  day: Scalars['bigint'];
  /** An object relationship */
  group?: Maybe<Groups>;
  id: Scalars['uuid'];
  month: Scalars['bigint'];
};


/** columns and relationships of "groupSettlementDates" */
export type GroupSettlementDates_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupSettlementDates" */
export type GroupSettlementDates_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "groupSettlementDates" */
export type GroupSettlementDates_Aggregate = {
  __typename?: 'groupSettlementDates_aggregate';
  aggregate?: Maybe<GroupSettlementDates_Aggregate_Fields>;
  nodes: Array<GroupSettlementDates>;
};

export type GroupSettlementDates_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupSettlementDates_Aggregate_Bool_Exp_Count>;
};

export type GroupSettlementDates_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupSettlementDates" */
export type GroupSettlementDates_Aggregate_Fields = {
  __typename?: 'groupSettlementDates_aggregate_fields';
  avg?: Maybe<GroupSettlementDates_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<GroupSettlementDates_Max_Fields>;
  min?: Maybe<GroupSettlementDates_Min_Fields>;
  stddev?: Maybe<GroupSettlementDates_Stddev_Fields>;
  stddev_pop?: Maybe<GroupSettlementDates_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<GroupSettlementDates_Stddev_Samp_Fields>;
  sum?: Maybe<GroupSettlementDates_Sum_Fields>;
  var_pop?: Maybe<GroupSettlementDates_Var_Pop_Fields>;
  var_samp?: Maybe<GroupSettlementDates_Var_Samp_Fields>;
  variance?: Maybe<GroupSettlementDates_Variance_Fields>;
};


/** aggregate fields of "groupSettlementDates" */
export type GroupSettlementDates_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupSettlementDates" */
export type GroupSettlementDates_Aggregate_Order_By = {
  avg?: InputMaybe<GroupSettlementDates_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupSettlementDates_Max_Order_By>;
  min?: InputMaybe<GroupSettlementDates_Min_Order_By>;
  stddev?: InputMaybe<GroupSettlementDates_Stddev_Order_By>;
  stddev_pop?: InputMaybe<GroupSettlementDates_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<GroupSettlementDates_Stddev_Samp_Order_By>;
  sum?: InputMaybe<GroupSettlementDates_Sum_Order_By>;
  var_pop?: InputMaybe<GroupSettlementDates_Var_Pop_Order_By>;
  var_samp?: InputMaybe<GroupSettlementDates_Var_Samp_Order_By>;
  variance?: InputMaybe<GroupSettlementDates_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "groupSettlementDates" */
export type GroupSettlementDates_Arr_Rel_Insert_Input = {
  data: Array<GroupSettlementDates_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};

/** aggregate avg on columns */
export type GroupSettlementDates_Avg_Fields = {
  __typename?: 'groupSettlementDates_avg_fields';
  day?: Maybe<Scalars['Float']>;
  month?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Avg_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "groupSettlementDates". All fields are combined with a logical 'AND'. */
export type GroupSettlementDates_Bool_Exp = {
  _and?: InputMaybe<Array<GroupSettlementDates_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  _or?: InputMaybe<Array<GroupSettlementDates_Bool_Exp>>;
  day?: InputMaybe<Bigint_Comparison_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  month?: InputMaybe<Bigint_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupSettlementDates" */
export enum GroupSettlementDates_Constraint {
  /** unique or primary key constraint on columns "id" */
  GroupSettlementDatesPkey = 'groupSettlementDates_pkey'
}

/** input type for incrementing numeric columns in table "groupSettlementDates" */
export type GroupSettlementDates_Inc_Input = {
  day?: InputMaybe<Scalars['bigint']>;
  month?: InputMaybe<Scalars['bigint']>;
};

/** input type for inserting data into table "groupSettlementDates" */
export type GroupSettlementDates_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  day?: InputMaybe<Scalars['bigint']>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  month?: InputMaybe<Scalars['bigint']>;
};

/** aggregate max on columns */
export type GroupSettlementDates_Max_Fields = {
  __typename?: 'groupSettlementDates_max_fields';
  day?: Maybe<Scalars['bigint']>;
  id?: Maybe<Scalars['uuid']>;
  month?: Maybe<Scalars['bigint']>;
};

/** order by max() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Max_Order_By = {
  day?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupSettlementDates_Min_Fields = {
  __typename?: 'groupSettlementDates_min_fields';
  day?: Maybe<Scalars['bigint']>;
  id?: Maybe<Scalars['uuid']>;
  month?: Maybe<Scalars['bigint']>;
};

/** order by min() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Min_Order_By = {
  day?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupSettlementDates" */
export type GroupSettlementDates_Mutation_Response = {
  __typename?: 'groupSettlementDates_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupSettlementDates>;
};

/** input type for inserting object relation for remote table "groupSettlementDates" */
export type GroupSettlementDates_Obj_Rel_Insert_Input = {
  data: GroupSettlementDates_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};

/** on_conflict condition type for table "groupSettlementDates" */
export type GroupSettlementDates_On_Conflict = {
  constraint: GroupSettlementDates_Constraint;
  update_columns?: Array<GroupSettlementDates_Update_Column>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};

/** Ordering options when selecting data from "groupSettlementDates". */
export type GroupSettlementDates_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  day?: InputMaybe<Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupSettlementDates */
export type GroupSettlementDates_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "groupSettlementDates" */
export enum GroupSettlementDates_Select_Column {
  /** column name */
  Day = 'day',
  /** column name */
  Id = 'id',
  /** column name */
  Month = 'month'
}

/** input type for updating data in table "groupSettlementDates" */
export type GroupSettlementDates_Set_Input = {
  day?: InputMaybe<Scalars['bigint']>;
  id?: InputMaybe<Scalars['uuid']>;
  month?: InputMaybe<Scalars['bigint']>;
};

/** aggregate stddev on columns */
export type GroupSettlementDates_Stddev_Fields = {
  __typename?: 'groupSettlementDates_stddev_fields';
  day?: Maybe<Scalars['Float']>;
  month?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Stddev_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type GroupSettlementDates_Stddev_Pop_Fields = {
  __typename?: 'groupSettlementDates_stddev_pop_fields';
  day?: Maybe<Scalars['Float']>;
  month?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Stddev_Pop_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type GroupSettlementDates_Stddev_Samp_Fields = {
  __typename?: 'groupSettlementDates_stddev_samp_fields';
  day?: Maybe<Scalars['Float']>;
  month?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Stddev_Samp_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "groupSettlementDates" */
export type GroupSettlementDates_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupSettlementDates_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupSettlementDates_Stream_Cursor_Value_Input = {
  day?: InputMaybe<Scalars['bigint']>;
  id?: InputMaybe<Scalars['uuid']>;
  month?: InputMaybe<Scalars['bigint']>;
};

/** aggregate sum on columns */
export type GroupSettlementDates_Sum_Fields = {
  __typename?: 'groupSettlementDates_sum_fields';
  day?: Maybe<Scalars['bigint']>;
  month?: Maybe<Scalars['bigint']>;
};

/** order by sum() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Sum_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** update columns of table "groupSettlementDates" */
export enum GroupSettlementDates_Update_Column {
  /** column name */
  Day = 'day',
  /** column name */
  Id = 'id',
  /** column name */
  Month = 'month'
}

export type GroupSettlementDates_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<GroupSettlementDates_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupSettlementDates_Set_Input>;
  where: GroupSettlementDates_Bool_Exp;
};

/** aggregate var_pop on columns */
export type GroupSettlementDates_Var_Pop_Fields = {
  __typename?: 'groupSettlementDates_var_pop_fields';
  day?: Maybe<Scalars['Float']>;
  month?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Var_Pop_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type GroupSettlementDates_Var_Samp_Fields = {
  __typename?: 'groupSettlementDates_var_samp_fields';
  day?: Maybe<Scalars['Float']>;
  month?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Var_Samp_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type GroupSettlementDates_Variance_Fields = {
  __typename?: 'groupSettlementDates_variance_fields';
  day?: Maybe<Scalars['Float']>;
  month?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "groupSettlementDates" */
export type GroupSettlementDates_Variance_Order_By = {
  day?: InputMaybe<Order_By>;
  month?: InputMaybe<Order_By>;
};

/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueLists = {
  __typename?: 'groupStockIssueLists';
  /** An object relationship */
  group: Groups;
  groupId: Scalars['uuid'];
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  id: Scalars['uuid'];
  name: Scalars['String'];
};


/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueListsGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


/** columns and relationships of "groupStockIssueLists" */
export type GroupStockIssueListsGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};

/** aggregated selection of "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate = {
  __typename?: 'groupStockIssueLists_aggregate';
  aggregate?: Maybe<GroupStockIssueLists_Aggregate_Fields>;
  nodes: Array<GroupStockIssueLists>;
};

export type GroupStockIssueLists_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupStockIssueLists_Aggregate_Bool_Exp_Count>;
};

export type GroupStockIssueLists_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate_Fields = {
  __typename?: 'groupStockIssueLists_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupStockIssueLists_Max_Fields>;
  min?: Maybe<GroupStockIssueLists_Min_Fields>;
};


/** aggregate fields of "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupStockIssueLists" */
export type GroupStockIssueLists_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupStockIssueLists_Max_Order_By>;
  min?: InputMaybe<GroupStockIssueLists_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupStockIssueLists" */
export type GroupStockIssueLists_Arr_Rel_Insert_Input = {
  data: Array<GroupStockIssueLists_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupStockIssueLists". All fields are combined with a logical 'AND'. */
export type GroupStockIssueLists_Bool_Exp = {
  _and?: InputMaybe<Array<GroupStockIssueLists_Bool_Exp>>;
  _not?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  _or?: InputMaybe<Array<GroupStockIssueLists_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupStockIssueLists" */
export enum GroupStockIssueLists_Constraint {
  /** unique or primary key constraint on columns "id" */
  GroupStockIssueListsPkey = 'groupStockIssueLists_pkey'
}

/** input type for inserting data into table "groupStockIssueLists" */
export type GroupStockIssueLists_Insert_Input = {
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type GroupStockIssueLists_Max_Fields = {
  __typename?: 'groupStockIssueLists_max_fields';
  groupId?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groupStockIssueLists" */
export type GroupStockIssueLists_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupStockIssueLists_Min_Fields = {
  __typename?: 'groupStockIssueLists_min_fields';
  groupId?: Maybe<Scalars['uuid']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groupStockIssueLists" */
export type GroupStockIssueLists_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupStockIssueLists" */
export type GroupStockIssueLists_Mutation_Response = {
  __typename?: 'groupStockIssueLists_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupStockIssueLists>;
};

/** input type for inserting object relation for remote table "groupStockIssueLists" */
export type GroupStockIssueLists_Obj_Rel_Insert_Input = {
  data: GroupStockIssueLists_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};

/** on_conflict condition type for table "groupStockIssueLists" */
export type GroupStockIssueLists_On_Conflict = {
  constraint: GroupStockIssueLists_Constraint;
  update_columns?: Array<GroupStockIssueLists_Update_Column>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};

/** Ordering options when selecting data from "groupStockIssueLists". */
export type GroupStockIssueLists_Order_By = {
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupStockIssueLists */
export type GroupStockIssueLists_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "groupStockIssueLists" */
export enum GroupStockIssueLists_Select_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "groupStockIssueLists" */
export type GroupStockIssueLists_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupStockIssueLists" */
export type GroupStockIssueLists_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupStockIssueLists_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupStockIssueLists_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupStockIssueLists" */
export enum GroupStockIssueLists_Update_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

export type GroupStockIssueLists_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupStockIssueLists_Set_Input>;
  where: GroupStockIssueLists_Bool_Exp;
};

/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues = {
  __typename?: 'groupStockIssues';
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid'];
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String'];
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssues_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssuesGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


/** columns and relationships of "groupStockIssues" */
export type GroupStockIssuesGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};

/** aggregated selection of "groupStockIssues" */
export type GroupStockIssues_Aggregate = {
  __typename?: 'groupStockIssues_aggregate';
  aggregate?: Maybe<GroupStockIssues_Aggregate_Fields>;
  nodes: Array<GroupStockIssues>;
};

export type GroupStockIssues_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupStockIssues_Aggregate_Bool_Exp_Count>;
};

export type GroupStockIssues_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupStockIssues_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupStockIssues" */
export type GroupStockIssues_Aggregate_Fields = {
  __typename?: 'groupStockIssues_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupStockIssues_Max_Fields>;
  min?: Maybe<GroupStockIssues_Min_Fields>;
};


/** aggregate fields of "groupStockIssues" */
export type GroupStockIssues_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupStockIssues" */
export type GroupStockIssues_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupStockIssues_Max_Order_By>;
  min?: InputMaybe<GroupStockIssues_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupStockIssues" */
export type GroupStockIssues_Arr_Rel_Insert_Input = {
  data: Array<GroupStockIssues_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupStockIssues". All fields are combined with a logical 'AND'. */
export type GroupStockIssues_Bool_Exp = {
  _and?: InputMaybe<Array<GroupStockIssues_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupStockIssues_Bool_Exp>;
  _or?: InputMaybe<Array<GroupStockIssues_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Bool_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupStockIssues" */
export enum GroupStockIssues_Constraint {
  /** unique or primary key constraint on columns "groupId" */
  GroupStockIssuesPkey = 'groupStockIssues_pkey'
}

/** input type for inserting data into table "groupStockIssues" */
export type GroupStockIssues_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Arr_Rel_Insert_Input>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type GroupStockIssues_Max_Fields = {
  __typename?: 'groupStockIssues_max_fields';
  groupId?: Maybe<Scalars['uuid']>;
  stockIssueCode?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groupStockIssues" */
export type GroupStockIssues_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupStockIssues_Min_Fields = {
  __typename?: 'groupStockIssues_min_fields';
  groupId?: Maybe<Scalars['uuid']>;
  stockIssueCode?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groupStockIssues" */
export type GroupStockIssues_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupStockIssues" */
export type GroupStockIssues_Mutation_Response = {
  __typename?: 'groupStockIssues_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupStockIssues>;
};

/** input type for inserting object relation for remote table "groupStockIssues" */
export type GroupStockIssues_Obj_Rel_Insert_Input = {
  data: GroupStockIssues_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};

/** on_conflict condition type for table "groupStockIssues" */
export type GroupStockIssues_On_Conflict = {
  constraint: GroupStockIssues_Constraint;
  update_columns?: Array<GroupStockIssues_Update_Column>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};

/** Ordering options when selecting data from "groupStockIssues". */
export type GroupStockIssues_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupStockIssues */
export type GroupStockIssues_Pk_Columns_Input = {
  groupId: Scalars['uuid'];
};

/** select columns of table "groupStockIssues" */
export enum GroupStockIssues_Select_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  StockIssueCode = 'stockIssueCode'
}

/** input type for updating data in table "groupStockIssues" */
export type GroupStockIssues_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupStockIssues" */
export type GroupStockIssues_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupStockIssues_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupStockIssues_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupStockIssues" */
export enum GroupStockIssues_Update_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  StockIssueCode = 'stockIssueCode'
}

export type GroupStockIssues_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupStockIssues_Set_Input>;
  where: GroupStockIssues_Bool_Exp;
};

/** columns and relationships of "groupTypeAssignments" */
export type GroupTypeAssignments = {
  __typename?: 'groupTypeAssignments';
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid'];
  /** An object relationship */
  groupType?: Maybe<GroupTypes>;
  groupTypeCode: Scalars['String'];
};


/** columns and relationships of "groupTypeAssignments" */
export type GroupTypeAssignments_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "groupTypeAssignments" */
export type GroupTypeAssignments_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate = {
  __typename?: 'groupTypeAssignments_aggregate';
  aggregate?: Maybe<GroupTypeAssignments_Aggregate_Fields>;
  nodes: Array<GroupTypeAssignments>;
};

export type GroupTypeAssignments_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupTypeAssignments_Aggregate_Bool_Exp_Count>;
};

export type GroupTypeAssignments_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate_Fields = {
  __typename?: 'groupTypeAssignments_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupTypeAssignments_Max_Fields>;
  min?: Maybe<GroupTypeAssignments_Min_Fields>;
};


/** aggregate fields of "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupTypeAssignments" */
export type GroupTypeAssignments_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupTypeAssignments_Max_Order_By>;
  min?: InputMaybe<GroupTypeAssignments_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupTypeAssignments" */
export type GroupTypeAssignments_Arr_Rel_Insert_Input = {
  data: Array<GroupTypeAssignments_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupTypeAssignments". All fields are combined with a logical 'AND'. */
export type GroupTypeAssignments_Bool_Exp = {
  _and?: InputMaybe<Array<GroupTypeAssignments_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  _or?: InputMaybe<Array<GroupTypeAssignments_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupType?: InputMaybe<GroupTypes_Bool_Exp>;
  groupTypeCode?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupTypeAssignments" */
export enum GroupTypeAssignments_Constraint {
  /** unique or primary key constraint on columns "groupId" */
  GroupTypeAssignmentsPkey = 'groupTypeAssignments_pkey'
}

/** input type for inserting data into table "groupTypeAssignments" */
export type GroupTypeAssignments_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  groupType?: InputMaybe<GroupTypes_Obj_Rel_Insert_Input>;
  groupTypeCode?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type GroupTypeAssignments_Max_Fields = {
  __typename?: 'groupTypeAssignments_max_fields';
  groupId?: Maybe<Scalars['uuid']>;
  groupTypeCode?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groupTypeAssignments" */
export type GroupTypeAssignments_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupTypeAssignments_Min_Fields = {
  __typename?: 'groupTypeAssignments_min_fields';
  groupId?: Maybe<Scalars['uuid']>;
  groupTypeCode?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groupTypeAssignments" */
export type GroupTypeAssignments_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupTypeAssignments" */
export type GroupTypeAssignments_Mutation_Response = {
  __typename?: 'groupTypeAssignments_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupTypeAssignments>;
};

/** input type for inserting object relation for remote table "groupTypeAssignments" */
export type GroupTypeAssignments_Obj_Rel_Insert_Input = {
  data: GroupTypeAssignments_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};

/** on_conflict condition type for table "groupTypeAssignments" */
export type GroupTypeAssignments_On_Conflict = {
  constraint: GroupTypeAssignments_Constraint;
  update_columns?: Array<GroupTypeAssignments_Update_Column>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};

/** Ordering options when selecting data from "groupTypeAssignments". */
export type GroupTypeAssignments_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupType?: InputMaybe<GroupTypes_Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupTypeAssignments */
export type GroupTypeAssignments_Pk_Columns_Input = {
  groupId: Scalars['uuid'];
};

/** select columns of table "groupTypeAssignments" */
export enum GroupTypeAssignments_Select_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  GroupTypeCode = 'groupTypeCode'
}

/** input type for updating data in table "groupTypeAssignments" */
export type GroupTypeAssignments_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  groupTypeCode?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupTypeAssignments" */
export type GroupTypeAssignments_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupTypeAssignments_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupTypeAssignments_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  groupTypeCode?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupTypeAssignments" */
export enum GroupTypeAssignments_Update_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  GroupTypeCode = 'groupTypeCode'
}

export type GroupTypeAssignments_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupTypeAssignments_Set_Input>;
  where: GroupTypeAssignments_Bool_Exp;
};

/** columns and relationships of "groupTypeTranslations" */
export type GroupTypeTranslations = {
  __typename?: 'groupTypeTranslations';
  /** An object relationship */
  groupType?: Maybe<GroupTypes>;
  groupTypeCode: Scalars['String'];
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  text: Scalars['String'];
};

/** aggregated selection of "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate = {
  __typename?: 'groupTypeTranslations_aggregate';
  aggregate?: Maybe<GroupTypeTranslations_Aggregate_Fields>;
  nodes: Array<GroupTypeTranslations>;
};

export type GroupTypeTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<GroupTypeTranslations_Aggregate_Bool_Exp_Count>;
};

export type GroupTypeTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate_Fields = {
  __typename?: 'groupTypeTranslations_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupTypeTranslations_Max_Fields>;
  min?: Maybe<GroupTypeTranslations_Min_Fields>;
};


/** aggregate fields of "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groupTypeTranslations" */
export type GroupTypeTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<GroupTypeTranslations_Max_Order_By>;
  min?: InputMaybe<GroupTypeTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groupTypeTranslations" */
export type GroupTypeTranslations_Arr_Rel_Insert_Input = {
  data: Array<GroupTypeTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypeTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groupTypeTranslations". All fields are combined with a logical 'AND'. */
export type GroupTypeTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<GroupTypeTranslations_Bool_Exp>>;
  _not?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<GroupTypeTranslations_Bool_Exp>>;
  groupType?: InputMaybe<GroupTypes_Bool_Exp>;
  groupTypeCode?: InputMaybe<String_Comparison_Exp>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "groupTypeTranslations" */
export enum GroupTypeTranslations_Constraint {
  /** unique or primary key constraint on columns "groupTypeCode", "languageCode" */
  GroupTypeTranslationsPkey = 'groupTypeTranslations_pkey'
}

/** input type for inserting data into table "groupTypeTranslations" */
export type GroupTypeTranslations_Insert_Input = {
  groupType?: InputMaybe<GroupTypes_Obj_Rel_Insert_Input>;
  groupTypeCode?: InputMaybe<Scalars['String']>;
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type GroupTypeTranslations_Max_Fields = {
  __typename?: 'groupTypeTranslations_max_fields';
  groupTypeCode?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groupTypeTranslations" */
export type GroupTypeTranslations_Max_Order_By = {
  groupTypeCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type GroupTypeTranslations_Min_Fields = {
  __typename?: 'groupTypeTranslations_min_fields';
  groupTypeCode?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groupTypeTranslations" */
export type GroupTypeTranslations_Min_Order_By = {
  groupTypeCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groupTypeTranslations" */
export type GroupTypeTranslations_Mutation_Response = {
  __typename?: 'groupTypeTranslations_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupTypeTranslations>;
};

/** on_conflict condition type for table "groupTypeTranslations" */
export type GroupTypeTranslations_On_Conflict = {
  constraint: GroupTypeTranslations_Constraint;
  update_columns?: Array<GroupTypeTranslations_Update_Column>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "groupTypeTranslations". */
export type GroupTypeTranslations_Order_By = {
  groupType?: InputMaybe<GroupTypes_Order_By>;
  groupTypeCode?: InputMaybe<Order_By>;
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: groupTypeTranslations */
export type GroupTypeTranslations_Pk_Columns_Input = {
  groupTypeCode: Scalars['String'];
  languageCode: Languages_Enum;
};

/** select columns of table "groupTypeTranslations" */
export enum GroupTypeTranslations_Select_Column {
  /** column name */
  GroupTypeCode = 'groupTypeCode',
  /** column name */
  LanguageCode = 'languageCode',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "groupTypeTranslations" */
export type GroupTypeTranslations_Set_Input = {
  groupTypeCode?: InputMaybe<Scalars['String']>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupTypeTranslations" */
export type GroupTypeTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupTypeTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupTypeTranslations_Stream_Cursor_Value_Input = {
  groupTypeCode?: InputMaybe<Scalars['String']>;
  languageCode?: InputMaybe<Languages_Enum>;
  text?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupTypeTranslations" */
export enum GroupTypeTranslations_Update_Column {
  /** column name */
  GroupTypeCode = 'groupTypeCode',
  /** column name */
  LanguageCode = 'languageCode',
  /** column name */
  Text = 'text'
}

export type GroupTypeTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupTypeTranslations_Set_Input>;
  where: GroupTypeTranslations_Bool_Exp;
};

/** columns and relationships of "groupTypes" */
export type GroupTypes = {
  __typename?: 'groupTypes';
  code: Scalars['String'];
  /** An array relationship */
  groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "groupTypes" */
export type GroupTypesGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};

/** aggregated selection of "groupTypes" */
export type GroupTypes_Aggregate = {
  __typename?: 'groupTypes_aggregate';
  aggregate?: Maybe<GroupTypes_Aggregate_Fields>;
  nodes: Array<GroupTypes>;
};

/** aggregate fields of "groupTypes" */
export type GroupTypes_Aggregate_Fields = {
  __typename?: 'groupTypes_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<GroupTypes_Max_Fields>;
  min?: Maybe<GroupTypes_Min_Fields>;
};


/** aggregate fields of "groupTypes" */
export type GroupTypes_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<GroupTypes_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "groupTypes". All fields are combined with a logical 'AND'. */
export type GroupTypes_Bool_Exp = {
  _and?: InputMaybe<Array<GroupTypes_Bool_Exp>>;
  _not?: InputMaybe<GroupTypes_Bool_Exp>;
  _or?: InputMaybe<Array<GroupTypes_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Bool_Exp>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "groupTypes" */
export enum GroupTypes_Constraint {
  /** unique or primary key constraint on columns "code" */
  GroupTypesPkey = 'groupTypes_pkey'
}

/** input type for inserting data into table "groupTypes" */
export type GroupTypes_Insert_Input = {
  code?: InputMaybe<Scalars['String']>;
  groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Arr_Rel_Insert_Input>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type GroupTypes_Max_Fields = {
  __typename?: 'groupTypes_max_fields';
  code?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type GroupTypes_Min_Fields = {
  __typename?: 'groupTypes_min_fields';
  code?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "groupTypes" */
export type GroupTypes_Mutation_Response = {
  __typename?: 'groupTypes_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<GroupTypes>;
};

/** input type for inserting object relation for remote table "groupTypes" */
export type GroupTypes_Obj_Rel_Insert_Input = {
  data: GroupTypes_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<GroupTypes_On_Conflict>;
};

/** on_conflict condition type for table "groupTypes" */
export type GroupTypes_On_Conflict = {
  constraint: GroupTypes_Constraint;
  update_columns?: Array<GroupTypes_Update_Column>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};

/** Ordering options when selecting data from "groupTypes". */
export type GroupTypes_Order_By = {
  code?: InputMaybe<Order_By>;
  groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Order_By>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Order_By>;
};

/** primary key columns input for table: groupTypes */
export type GroupTypes_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "groupTypes" */
export enum GroupTypes_Select_Column {
  /** column name */
  Code = 'code'
}

/** input type for updating data in table "groupTypes" */
export type GroupTypes_Set_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groupTypes" */
export type GroupTypes_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: GroupTypes_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type GroupTypes_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groupTypes" */
export enum GroupTypes_Update_Column {
  /** column name */
  Code = 'code'
}

export type GroupTypes_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<GroupTypes_Set_Input>;
  where: GroupTypes_Bool_Exp;
};

/** columns and relationships of "groups" */
export type Groups = {
  __typename?: 'groups';
  /** An array relationship */
  _contracts: Array<Contracts>;
  /** An aggregate relationship */
  _contracts_aggregate: Contracts_Aggregate;
  /** An array relationship */
  _groupContents: Array<GroupContents>;
  /** An aggregate relationship */
  _groupContents_aggregate: GroupContents_Aggregate;
  /** An array relationship */
  _groupSettlementDates: Array<GroupSettlementDates>;
  /** An aggregate relationship */
  _groupSettlementDates_aggregate: GroupSettlementDates_Aggregate;
  /** An array relationship */
  _groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  _groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  /** An array relationship */
  _groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  _groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** An array relationship */
  _inactiveGroups: Array<InactiveGroups>;
  /** An aggregate relationship */
  _inactiveGroups_aggregate: InactiveGroups_Aggregate;
  /** An object relationship */
  contract?: Maybe<Contracts>;
  /** An object relationship */
  groupContent?: Maybe<GroupContents>;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** An object relationship */
  groupSettlementDate?: Maybe<GroupSettlementDates>;
  /** An object relationship */
  groupStockIssue?: Maybe<GroupStockIssues>;
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** An object relationship */
  groupTypeAssignment?: Maybe<GroupTypeAssignments>;
  id: Scalars['uuid'];
  /** An object relationship */
  inactiveGroup?: Maybe<InactiveGroups>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  name: Scalars['String'];
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
};


/** columns and relationships of "groups" */
export type Groups_ContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_Contracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupContentsArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupSettlementDatesArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupSettlementDates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_GroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_InactiveGroupsArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type Groups_InactiveGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "groups" */
export type GroupsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "groups" */
export type Groups_Aggregate = {
  __typename?: 'groups_aggregate';
  aggregate?: Maybe<Groups_Aggregate_Fields>;
  nodes: Array<Groups>;
};

export type Groups_Aggregate_Bool_Exp = {
  count?: InputMaybe<Groups_Aggregate_Bool_Exp_Count>;
};

export type Groups_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Groups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Groups_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "groups" */
export type Groups_Aggregate_Fields = {
  __typename?: 'groups_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Groups_Max_Fields>;
  min?: Maybe<Groups_Min_Fields>;
};


/** aggregate fields of "groups" */
export type Groups_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Groups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "groups" */
export type Groups_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Groups_Max_Order_By>;
  min?: InputMaybe<Groups_Min_Order_By>;
};

/** input type for inserting array relation for remote table "groups" */
export type Groups_Arr_Rel_Insert_Input = {
  data: Array<Groups_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};

/** Boolean expression to filter rows from the table "groups". All fields are combined with a logical 'AND'. */
export type Groups_Bool_Exp = {
  _and?: InputMaybe<Array<Groups_Bool_Exp>>;
  _contracts?: InputMaybe<Contracts_Bool_Exp>;
  _contracts_aggregate?: InputMaybe<Contracts_Aggregate_Bool_Exp>;
  _groupContents?: InputMaybe<GroupContents_Bool_Exp>;
  _groupContents_aggregate?: InputMaybe<GroupContents_Aggregate_Bool_Exp>;
  _groupSettlementDates?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  _groupSettlementDates_aggregate?: InputMaybe<GroupSettlementDates_Aggregate_Bool_Exp>;
  _groupStockIssues?: InputMaybe<GroupStockIssues_Bool_Exp>;
  _groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Bool_Exp>;
  _groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  _groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Bool_Exp>;
  _inactiveGroups?: InputMaybe<InactiveGroups_Bool_Exp>;
  _inactiveGroups_aggregate?: InputMaybe<InactiveGroups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Groups_Bool_Exp>;
  _or?: InputMaybe<Array<Groups_Bool_Exp>>;
  contract?: InputMaybe<Contracts_Bool_Exp>;
  groupContent?: InputMaybe<GroupContents_Bool_Exp>;
  groupEvents?: InputMaybe<GroupEvents_Bool_Exp>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Bool_Exp>;
  groupInvitations?: InputMaybe<GroupInvitations_Bool_Exp>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  groupSettlementDate?: InputMaybe<GroupSettlementDates_Bool_Exp>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Bool_Exp>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Bool_Exp>;
  groupTypeAssignment?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  inactiveGroup?: InputMaybe<InactiveGroups_Bool_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "groups" */
export enum Groups_Constraint {
  /** unique or primary key constraint on columns "id" */
  GroupsPkey = 'groups_pkey'
}

/** input type for inserting data into table "groups" */
export type Groups_Insert_Input = {
  _contracts?: InputMaybe<Contracts_Arr_Rel_Insert_Input>;
  _groupContents?: InputMaybe<GroupContents_Arr_Rel_Insert_Input>;
  _groupSettlementDates?: InputMaybe<GroupSettlementDates_Arr_Rel_Insert_Input>;
  _groupStockIssues?: InputMaybe<GroupStockIssues_Arr_Rel_Insert_Input>;
  _groupTypeAssignments?: InputMaybe<GroupTypeAssignments_Arr_Rel_Insert_Input>;
  _inactiveGroups?: InputMaybe<InactiveGroups_Arr_Rel_Insert_Input>;
  contract?: InputMaybe<Contracts_Obj_Rel_Insert_Input>;
  groupContent?: InputMaybe<GroupContents_Obj_Rel_Insert_Input>;
  groupEvents?: InputMaybe<GroupEvents_Arr_Rel_Insert_Input>;
  groupInvitations?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  groupSettlementDate?: InputMaybe<GroupSettlementDates_Obj_Rel_Insert_Input>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Obj_Rel_Insert_Input>;
  groupStockIssueLists?: InputMaybe<GroupStockIssueLists_Arr_Rel_Insert_Input>;
  groupTypeAssignment?: InputMaybe<GroupTypeAssignments_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  inactiveGroup?: InputMaybe<InactiveGroups_Obj_Rel_Insert_Input>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Groups_Max_Fields = {
  __typename?: 'groups_max_fields';
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "groups" */
export type Groups_Max_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Groups_Min_Fields = {
  __typename?: 'groups_min_fields';
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "groups" */
export type Groups_Min_Order_By = {
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "groups" */
export type Groups_Mutation_Response = {
  __typename?: 'groups_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Groups>;
};

/** input type for inserting object relation for remote table "groups" */
export type Groups_Obj_Rel_Insert_Input = {
  data: Groups_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};

/** on_conflict condition type for table "groups" */
export type Groups_On_Conflict = {
  constraint: Groups_Constraint;
  update_columns?: Array<Groups_Update_Column>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** Ordering options when selecting data from "groups". */
export type Groups_Order_By = {
  _contracts_aggregate?: InputMaybe<Contracts_Aggregate_Order_By>;
  _groupContents_aggregate?: InputMaybe<GroupContents_Aggregate_Order_By>;
  _groupSettlementDates_aggregate?: InputMaybe<GroupSettlementDates_Aggregate_Order_By>;
  _groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Order_By>;
  _groupTypeAssignments_aggregate?: InputMaybe<GroupTypeAssignments_Aggregate_Order_By>;
  _inactiveGroups_aggregate?: InputMaybe<InactiveGroups_Aggregate_Order_By>;
  contract?: InputMaybe<Contracts_Order_By>;
  groupContent?: InputMaybe<GroupContents_Order_By>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Order_By>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  groupSettlementDate?: InputMaybe<GroupSettlementDates_Order_By>;
  groupStockIssue?: InputMaybe<GroupStockIssues_Order_By>;
  groupStockIssueLists_aggregate?: InputMaybe<GroupStockIssueLists_Aggregate_Order_By>;
  groupTypeAssignment?: InputMaybe<GroupTypeAssignments_Order_By>;
  id?: InputMaybe<Order_By>;
  inactiveGroup?: InputMaybe<InactiveGroups_Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
};

/** primary key columns input for table: groups */
export type Groups_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "groups" */
export enum Groups_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "groups" */
export type Groups_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "groups" */
export type Groups_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Groups_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Groups_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "groups" */
export enum Groups_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

export type Groups_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Groups_Set_Input>;
  where: Groups_Bool_Exp;
};

/** columns and relationships of "inactiveGroups" */
export type InactiveGroups = {
  __typename?: 'inactiveGroups';
  /** An array relationship */
  _groups: Array<Groups>;
  /** An aggregate relationship */
  _groups_aggregate: Groups_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  id: Scalars['uuid'];
};


/** columns and relationships of "inactiveGroups" */
export type InactiveGroups_GroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


/** columns and relationships of "inactiveGroups" */
export type InactiveGroups_Groups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};

/** aggregated selection of "inactiveGroups" */
export type InactiveGroups_Aggregate = {
  __typename?: 'inactiveGroups_aggregate';
  aggregate?: Maybe<InactiveGroups_Aggregate_Fields>;
  nodes: Array<InactiveGroups>;
};

export type InactiveGroups_Aggregate_Bool_Exp = {
  count?: InputMaybe<InactiveGroups_Aggregate_Bool_Exp_Count>;
};

export type InactiveGroups_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<InactiveGroups_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "inactiveGroups" */
export type InactiveGroups_Aggregate_Fields = {
  __typename?: 'inactiveGroups_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<InactiveGroups_Max_Fields>;
  min?: Maybe<InactiveGroups_Min_Fields>;
};


/** aggregate fields of "inactiveGroups" */
export type InactiveGroups_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "inactiveGroups" */
export type InactiveGroups_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<InactiveGroups_Max_Order_By>;
  min?: InputMaybe<InactiveGroups_Min_Order_By>;
};

/** input type for inserting array relation for remote table "inactiveGroups" */
export type InactiveGroups_Arr_Rel_Insert_Input = {
  data: Array<InactiveGroups_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};

/** Boolean expression to filter rows from the table "inactiveGroups". All fields are combined with a logical 'AND'. */
export type InactiveGroups_Bool_Exp = {
  _and?: InputMaybe<Array<InactiveGroups_Bool_Exp>>;
  _groups?: InputMaybe<Groups_Bool_Exp>;
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Bool_Exp>;
  _not?: InputMaybe<InactiveGroups_Bool_Exp>;
  _or?: InputMaybe<Array<InactiveGroups_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "inactiveGroups" */
export enum InactiveGroups_Constraint {
  /** unique or primary key constraint on columns "id" */
  InactiveGroupsPkey = 'inactiveGroups_pkey'
}

/** input type for inserting data into table "inactiveGroups" */
export type InactiveGroups_Insert_Input = {
  _groups?: InputMaybe<Groups_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type InactiveGroups_Max_Fields = {
  __typename?: 'inactiveGroups_max_fields';
  id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "inactiveGroups" */
export type InactiveGroups_Max_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type InactiveGroups_Min_Fields = {
  __typename?: 'inactiveGroups_min_fields';
  id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "inactiveGroups" */
export type InactiveGroups_Min_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "inactiveGroups" */
export type InactiveGroups_Mutation_Response = {
  __typename?: 'inactiveGroups_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<InactiveGroups>;
};

/** input type for inserting object relation for remote table "inactiveGroups" */
export type InactiveGroups_Obj_Rel_Insert_Input = {
  data: InactiveGroups_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};

/** on_conflict condition type for table "inactiveGroups" */
export type InactiveGroups_On_Conflict = {
  constraint: InactiveGroups_Constraint;
  update_columns?: Array<InactiveGroups_Update_Column>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};

/** Ordering options when selecting data from "inactiveGroups". */
export type InactiveGroups_Order_By = {
  _groups_aggregate?: InputMaybe<Groups_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  id?: InputMaybe<Order_By>;
};

/** primary key columns input for table: inactiveGroups */
export type InactiveGroups_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "inactiveGroups" */
export enum InactiveGroups_Select_Column {
  /** column name */
  Id = 'id'
}

/** input type for updating data in table "inactiveGroups" */
export type InactiveGroups_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
};

/** Streaming cursor of the table "inactiveGroups" */
export type InactiveGroups_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: InactiveGroups_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type InactiveGroups_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
};

/** update columns of table "inactiveGroups" */
export enum InactiveGroups_Update_Column {
  /** column name */
  Id = 'id'
}

export type InactiveGroups_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<InactiveGroups_Set_Input>;
  where: InactiveGroups_Bool_Exp;
};

/** columns and relationships of "languages" */
export type Languages = {
  __typename?: 'languages';
  code: Scalars['String'];
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
};


/** columns and relationships of "languages" */
export type LanguagesEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


/** columns and relationships of "languages" */
export type LanguagesPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};

/** aggregated selection of "languages" */
export type Languages_Aggregate = {
  __typename?: 'languages_aggregate';
  aggregate?: Maybe<Languages_Aggregate_Fields>;
  nodes: Array<Languages>;
};

/** aggregate fields of "languages" */
export type Languages_Aggregate_Fields = {
  __typename?: 'languages_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Languages_Max_Fields>;
  min?: Maybe<Languages_Min_Fields>;
};


/** aggregate fields of "languages" */
export type Languages_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Languages_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "languages". All fields are combined with a logical 'AND'. */
export type Languages_Bool_Exp = {
  _and?: InputMaybe<Array<Languages_Bool_Exp>>;
  _not?: InputMaybe<Languages_Bool_Exp>;
  _or?: InputMaybe<Array<Languages_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Bool_Exp>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Bool_Exp>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Bool_Exp>;
  planTranslations?: InputMaybe<PlanTranslations_Bool_Exp>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "languages" */
export enum Languages_Constraint {
  /** unique or primary key constraint on columns "code" */
  LanguagesCode = 'languages_code'
}

export enum Languages_Enum {
  Ja = 'ja'
}

/** Boolean expression to compare columns of type "languages_enum". All fields are combined with logical 'AND'. */
export type Languages_Enum_Comparison_Exp = {
  _eq?: InputMaybe<Languages_Enum>;
  _in?: InputMaybe<Array<Languages_Enum>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _neq?: InputMaybe<Languages_Enum>;
  _nin?: InputMaybe<Array<Languages_Enum>>;
};

/** input type for inserting data into table "languages" */
export type Languages_Insert_Input = {
  code?: InputMaybe<Scalars['String']>;
  eventTypeTranslations?: InputMaybe<EventTypeTranslations_Arr_Rel_Insert_Input>;
  groupTypeTranslations?: InputMaybe<GroupTypeTranslations_Arr_Rel_Insert_Input>;
  planTranslations?: InputMaybe<PlanTranslations_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Languages_Max_Fields = {
  __typename?: 'languages_max_fields';
  code?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Languages_Min_Fields = {
  __typename?: 'languages_min_fields';
  code?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "languages" */
export type Languages_Mutation_Response = {
  __typename?: 'languages_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Languages>;
};

/** input type for inserting object relation for remote table "languages" */
export type Languages_Obj_Rel_Insert_Input = {
  data: Languages_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Languages_On_Conflict>;
};

/** on_conflict condition type for table "languages" */
export type Languages_On_Conflict = {
  constraint: Languages_Constraint;
  update_columns?: Array<Languages_Update_Column>;
  where?: InputMaybe<Languages_Bool_Exp>;
};

/** Ordering options when selecting data from "languages". */
export type Languages_Order_By = {
  code?: InputMaybe<Order_By>;
  eventTypeTranslations_aggregate?: InputMaybe<EventTypeTranslations_Aggregate_Order_By>;
  groupTypeTranslations_aggregate?: InputMaybe<GroupTypeTranslations_Aggregate_Order_By>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Order_By>;
};

/** primary key columns input for table: languages */
export type Languages_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "languages" */
export enum Languages_Select_Column {
  /** column name */
  Code = 'code'
}

/** input type for updating data in table "languages" */
export type Languages_Set_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "languages" */
export type Languages_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Languages_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Languages_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** update columns of table "languages" */
export enum Languages_Update_Column {
  /** column name */
  Code = 'code'
}

export type Languages_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Languages_Set_Input>;
  where: Languages_Bool_Exp;
};

/** columns and relationships of "memberships" */
export type Memberships = {
  __typename?: 'memberships';
  /** An array relationship */
  _groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  _groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** An array relationship */
  _ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  _ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid'];
  /** An object relationship */
  groupInvitation?: Maybe<GroupInvitations>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** An object relationship */
  ownership?: Maybe<Ownerships>;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  user?: Maybe<Users>;
  userId: Scalars['uuid'];
};


/** columns and relationships of "memberships" */
export type Memberships_GroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type Memberships_GroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type Memberships_OwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type Memberships_Ownerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "memberships" */
export type MembershipsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "memberships" */
export type Memberships_Aggregate = {
  __typename?: 'memberships_aggregate';
  aggregate?: Maybe<Memberships_Aggregate_Fields>;
  nodes: Array<Memberships>;
};

export type Memberships_Aggregate_Bool_Exp = {
  count?: InputMaybe<Memberships_Aggregate_Bool_Exp_Count>;
};

export type Memberships_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Memberships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Memberships_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "memberships" */
export type Memberships_Aggregate_Fields = {
  __typename?: 'memberships_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Memberships_Max_Fields>;
  min?: Maybe<Memberships_Min_Fields>;
};


/** aggregate fields of "memberships" */
export type Memberships_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Memberships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "memberships" */
export type Memberships_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Memberships_Max_Order_By>;
  min?: InputMaybe<Memberships_Min_Order_By>;
};

/** input type for inserting array relation for remote table "memberships" */
export type Memberships_Arr_Rel_Insert_Input = {
  data: Array<Memberships_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};

/** Boolean expression to filter rows from the table "memberships". All fields are combined with a logical 'AND'. */
export type Memberships_Bool_Exp = {
  _and?: InputMaybe<Array<Memberships_Bool_Exp>>;
  _groupInvitations?: InputMaybe<GroupInvitations_Bool_Exp>;
  _groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Memberships_Bool_Exp>;
  _or?: InputMaybe<Array<Memberships_Bool_Exp>>;
  _ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  _ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  groupInvitation?: InputMaybe<GroupInvitations_Bool_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  ownership?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "memberships" */
export enum Memberships_Constraint {
  /** unique or primary key constraint on columns "userId", "groupId" */
  MembershipsPkey = 'memberships_pkey'
}

/** input type for inserting data into table "memberships" */
export type Memberships_Insert_Input = {
  _groupInvitations?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  _ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  groupInvitation?: InputMaybe<GroupInvitations_Obj_Rel_Insert_Input>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  ownership?: InputMaybe<Ownerships_Obj_Rel_Insert_Input>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Memberships_Max_Fields = {
  __typename?: 'memberships_max_fields';
  groupId?: Maybe<Scalars['uuid']>;
  userId?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "memberships" */
export type Memberships_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Memberships_Min_Fields = {
  __typename?: 'memberships_min_fields';
  groupId?: Maybe<Scalars['uuid']>;
  userId?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "memberships" */
export type Memberships_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "memberships" */
export type Memberships_Mutation_Response = {
  __typename?: 'memberships_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Memberships>;
};

/** input type for inserting object relation for remote table "memberships" */
export type Memberships_Obj_Rel_Insert_Input = {
  data: Memberships_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};

/** on_conflict condition type for table "memberships" */
export type Memberships_On_Conflict = {
  constraint: Memberships_Constraint;
  update_columns?: Array<Memberships_Update_Column>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};

/** Ordering options when selecting data from "memberships". */
export type Memberships_Order_By = {
  _groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  _ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  groupInvitation?: InputMaybe<GroupInvitations_Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  ownership?: InputMaybe<Ownerships_Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  user?: InputMaybe<Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: memberships */
export type Memberships_Pk_Columns_Input = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};

/** select columns of table "memberships" */
export enum Memberships_Select_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "memberships" */
export type Memberships_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** Streaming cursor of the table "memberships" */
export type Memberships_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Memberships_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Memberships_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** update columns of table "memberships" */
export enum Memberships_Update_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  UserId = 'userId'
}

export type Memberships_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Memberships_Set_Input>;
  where: Memberships_Bool_Exp;
};

/** columns and relationships of "mlModels" */
export type MlModels = {
  __typename?: 'mlModels';
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  id: Scalars['uuid'];
  path: Scalars['String'];
};


/** columns and relationships of "mlModels" */
export type MlModelsDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


/** columns and relationships of "mlModels" */
export type MlModelsDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};

/** aggregated selection of "mlModels" */
export type MlModels_Aggregate = {
  __typename?: 'mlModels_aggregate';
  aggregate?: Maybe<MlModels_Aggregate_Fields>;
  nodes: Array<MlModels>;
};

/** aggregate fields of "mlModels" */
export type MlModels_Aggregate_Fields = {
  __typename?: 'mlModels_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<MlModels_Max_Fields>;
  min?: Maybe<MlModels_Min_Fields>;
};


/** aggregate fields of "mlModels" */
export type MlModels_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<MlModels_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "mlModels". All fields are combined with a logical 'AND'. */
export type MlModels_Bool_Exp = {
  _and?: InputMaybe<Array<MlModels_Bool_Exp>>;
  _not?: InputMaybe<MlModels_Bool_Exp>;
  _or?: InputMaybe<Array<MlModels_Bool_Exp>>;
  dailyImpacts?: InputMaybe<DailyImpacts_Bool_Exp>;
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  path?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "mlModels" */
export enum MlModels_Constraint {
  /** unique or primary key constraint on columns "id" */
  MlModelsPkey = 'mlModels_pkey'
}

/** input type for inserting data into table "mlModels" */
export type MlModels_Insert_Input = {
  dailyImpacts?: InputMaybe<DailyImpacts_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  path?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type MlModels_Max_Fields = {
  __typename?: 'mlModels_max_fields';
  id?: Maybe<Scalars['uuid']>;
  path?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type MlModels_Min_Fields = {
  __typename?: 'mlModels_min_fields';
  id?: Maybe<Scalars['uuid']>;
  path?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "mlModels" */
export type MlModels_Mutation_Response = {
  __typename?: 'mlModels_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<MlModels>;
};

/** input type for inserting object relation for remote table "mlModels" */
export type MlModels_Obj_Rel_Insert_Input = {
  data: MlModels_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<MlModels_On_Conflict>;
};

/** on_conflict condition type for table "mlModels" */
export type MlModels_On_Conflict = {
  constraint: MlModels_Constraint;
  update_columns?: Array<MlModels_Update_Column>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};

/** Ordering options when selecting data from "mlModels". */
export type MlModels_Order_By = {
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  path?: InputMaybe<Order_By>;
};

/** primary key columns input for table: mlModels */
export type MlModels_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "mlModels" */
export enum MlModels_Select_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Path = 'path'
}

/** input type for updating data in table "mlModels" */
export type MlModels_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  path?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "mlModels" */
export type MlModels_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: MlModels_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type MlModels_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
  path?: InputMaybe<Scalars['String']>;
};

/** update columns of table "mlModels" */
export enum MlModels_Update_Column {
  /** column name */
  Id = 'id',
  /** column name */
  Path = 'path'
}

export type MlModels_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<MlModels_Set_Input>;
  where: MlModels_Bool_Exp;
};

/** mutation root */
export type Mutation_Root = {
  __typename?: 'mutation_root';
  /** delete data from the table: "articleContentDecreaseKeywords" */
  delete_articleContentDecreaseKeywords?: Maybe<ArticleContentDecreaseKeywords_Mutation_Response>;
  /** delete single row from the table: "articleContentDecreaseKeywords" */
  delete_articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** delete data from the table: "articleContentIncreaseKeywords" */
  delete_articleContentIncreaseKeywords?: Maybe<ArticleContentIncreaseKeywords_Mutation_Response>;
  /** delete single row from the table: "articleContentIncreaseKeywords" */
  delete_articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** delete data from the table: "articleContentKeywords" */
  delete_articleContentKeywords?: Maybe<ArticleContentKeywords_Mutation_Response>;
  /** delete single row from the table: "articleContentKeywords" */
  delete_articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** delete data from the table: "articleContents" */
  delete_articleContents?: Maybe<ArticleContents_Mutation_Response>;
  /** delete single row from the table: "articleContents" */
  delete_articleContents_by_pk?: Maybe<ArticleContents>;
  /** delete data from the table: "articleSources" */
  delete_articleSources?: Maybe<ArticleSources_Mutation_Response>;
  /** delete single row from the table: "articleSources" */
  delete_articleSources_by_pk?: Maybe<ArticleSources>;
  /** delete data from the table: "articles" */
  delete_articles?: Maybe<Articles_Mutation_Response>;
  /** delete single row from the table: "articles" */
  delete_articles_by_pk?: Maybe<Articles>;
  /** delete data from the table: "contracts" */
  delete_contracts?: Maybe<Contracts_Mutation_Response>;
  /** delete single row from the table: "contracts" */
  delete_contracts_by_pk?: Maybe<Contracts>;
  /** delete data from the table: "dailyImpacts" */
  delete_dailyImpacts?: Maybe<DailyImpacts_Mutation_Response>;
  /** delete single row from the table: "dailyImpacts" */
  delete_dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** delete data from the table: "eventTypeTranslations" */
  delete_eventTypeTranslations?: Maybe<EventTypeTranslations_Mutation_Response>;
  /** delete single row from the table: "eventTypeTranslations" */
  delete_eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** delete data from the table: "eventTypes" */
  delete_eventTypes?: Maybe<EventTypes_Mutation_Response>;
  /** delete single row from the table: "eventTypes" */
  delete_eventTypes_by_pk?: Maybe<EventTypes>;
  /** delete data from the table: "groupContents" */
  delete_groupContents?: Maybe<GroupContents_Mutation_Response>;
  /** delete single row from the table: "groupContents" */
  delete_groupContents_by_pk?: Maybe<GroupContents>;
  /** delete data from the table: "groupEvents" */
  delete_groupEvents?: Maybe<GroupEvents_Mutation_Response>;
  /** delete single row from the table: "groupEvents" */
  delete_groupEvents_by_pk?: Maybe<GroupEvents>;
  /** delete data from the table: "groupInvitations" */
  delete_groupInvitations?: Maybe<GroupInvitations_Mutation_Response>;
  /** delete single row from the table: "groupInvitations" */
  delete_groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** delete data from the table: "groupListedStockIssues" */
  delete_groupListedStockIssues?: Maybe<GroupListedStockIssues_Mutation_Response>;
  /** delete single row from the table: "groupListedStockIssues" */
  delete_groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** delete data from the table: "groupSettlementDates" */
  delete_groupSettlementDates?: Maybe<GroupSettlementDates_Mutation_Response>;
  /** delete single row from the table: "groupSettlementDates" */
  delete_groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** delete data from the table: "groupStockIssueLists" */
  delete_groupStockIssueLists?: Maybe<GroupStockIssueLists_Mutation_Response>;
  /** delete single row from the table: "groupStockIssueLists" */
  delete_groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** delete data from the table: "groupStockIssues" */
  delete_groupStockIssues?: Maybe<GroupStockIssues_Mutation_Response>;
  /** delete single row from the table: "groupStockIssues" */
  delete_groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** delete data from the table: "groupTypeAssignments" */
  delete_groupTypeAssignments?: Maybe<GroupTypeAssignments_Mutation_Response>;
  /** delete single row from the table: "groupTypeAssignments" */
  delete_groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** delete data from the table: "groupTypeTranslations" */
  delete_groupTypeTranslations?: Maybe<GroupTypeTranslations_Mutation_Response>;
  /** delete single row from the table: "groupTypeTranslations" */
  delete_groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** delete data from the table: "groupTypes" */
  delete_groupTypes?: Maybe<GroupTypes_Mutation_Response>;
  /** delete single row from the table: "groupTypes" */
  delete_groupTypes_by_pk?: Maybe<GroupTypes>;
  /** delete data from the table: "groups" */
  delete_groups?: Maybe<Groups_Mutation_Response>;
  /** delete single row from the table: "groups" */
  delete_groups_by_pk?: Maybe<Groups>;
  /** delete data from the table: "inactiveGroups" */
  delete_inactiveGroups?: Maybe<InactiveGroups_Mutation_Response>;
  /** delete single row from the table: "inactiveGroups" */
  delete_inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** delete data from the table: "languages" */
  delete_languages?: Maybe<Languages_Mutation_Response>;
  /** delete single row from the table: "languages" */
  delete_languages_by_pk?: Maybe<Languages>;
  /** delete data from the table: "memberships" */
  delete_memberships?: Maybe<Memberships_Mutation_Response>;
  /** delete single row from the table: "memberships" */
  delete_memberships_by_pk?: Maybe<Memberships>;
  /** delete data from the table: "mlModels" */
  delete_mlModels?: Maybe<MlModels_Mutation_Response>;
  /** delete single row from the table: "mlModels" */
  delete_mlModels_by_pk?: Maybe<MlModels>;
  /** delete data from the table: "ownerships" */
  delete_ownerships?: Maybe<Ownerships_Mutation_Response>;
  /** delete single row from the table: "ownerships" */
  delete_ownerships_by_pk?: Maybe<Ownerships>;
  /** delete data from the table: "planTranslations" */
  delete_planTranslations?: Maybe<PlanTranslations_Mutation_Response>;
  /** delete single row from the table: "planTranslations" */
  delete_planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** delete data from the table: "plans" */
  delete_plans?: Maybe<Plans_Mutation_Response>;
  /** delete single row from the table: "plans" */
  delete_plans_by_pk?: Maybe<Plans>;
  /** delete data from the table: "staffInvitations" */
  delete_staffInvitations?: Maybe<StaffInvitations_Mutation_Response>;
  /** delete single row from the table: "staffInvitations" */
  delete_staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** delete data from the table: "staffs" */
  delete_staffs?: Maybe<Staffs_Mutation_Response>;
  /** delete single row from the table: "staffs" */
  delete_staffs_by_pk?: Maybe<Staffs>;
  /** delete data from the table: "stockIssues" */
  delete_stockIssues?: Maybe<StockIssues_Mutation_Response>;
  /** delete single row from the table: "stockIssues" */
  delete_stockIssues_by_pk?: Maybe<StockIssues>;
  /** delete data from the table: "stockPrices" */
  delete_stockPrices?: Maybe<StockPrices_Mutation_Response>;
  /** delete single row from the table: "stockPrices" */
  delete_stockPrices_by_pk?: Maybe<StockPrices>;
  /** delete data from the table: "users" */
  delete_users?: Maybe<Users_Mutation_Response>;
  /** delete single row from the table: "users" */
  delete_users_by_pk?: Maybe<Users>;
  /** insert data into the table: "articleContentDecreaseKeywords" */
  insert_articleContentDecreaseKeywords?: Maybe<ArticleContentDecreaseKeywords_Mutation_Response>;
  /** insert a single row into the table: "articleContentDecreaseKeywords" */
  insert_articleContentDecreaseKeywords_one?: Maybe<ArticleContentDecreaseKeywords>;
  /** insert data into the table: "articleContentIncreaseKeywords" */
  insert_articleContentIncreaseKeywords?: Maybe<ArticleContentIncreaseKeywords_Mutation_Response>;
  /** insert a single row into the table: "articleContentIncreaseKeywords" */
  insert_articleContentIncreaseKeywords_one?: Maybe<ArticleContentIncreaseKeywords>;
  /** insert data into the table: "articleContentKeywords" */
  insert_articleContentKeywords?: Maybe<ArticleContentKeywords_Mutation_Response>;
  /** insert a single row into the table: "articleContentKeywords" */
  insert_articleContentKeywords_one?: Maybe<ArticleContentKeywords>;
  /** insert data into the table: "articleContents" */
  insert_articleContents?: Maybe<ArticleContents_Mutation_Response>;
  /** insert a single row into the table: "articleContents" */
  insert_articleContents_one?: Maybe<ArticleContents>;
  /** insert data into the table: "articleSources" */
  insert_articleSources?: Maybe<ArticleSources_Mutation_Response>;
  /** insert a single row into the table: "articleSources" */
  insert_articleSources_one?: Maybe<ArticleSources>;
  /** insert data into the table: "articles" */
  insert_articles?: Maybe<Articles_Mutation_Response>;
  /** insert a single row into the table: "articles" */
  insert_articles_one?: Maybe<Articles>;
  /** insert data into the table: "contracts" */
  insert_contracts?: Maybe<Contracts_Mutation_Response>;
  /** insert a single row into the table: "contracts" */
  insert_contracts_one?: Maybe<Contracts>;
  /** insert data into the table: "dailyImpacts" */
  insert_dailyImpacts?: Maybe<DailyImpacts_Mutation_Response>;
  /** insert a single row into the table: "dailyImpacts" */
  insert_dailyImpacts_one?: Maybe<DailyImpacts>;
  /** insert data into the table: "eventTypeTranslations" */
  insert_eventTypeTranslations?: Maybe<EventTypeTranslations_Mutation_Response>;
  /** insert a single row into the table: "eventTypeTranslations" */
  insert_eventTypeTranslations_one?: Maybe<EventTypeTranslations>;
  /** insert data into the table: "eventTypes" */
  insert_eventTypes?: Maybe<EventTypes_Mutation_Response>;
  /** insert a single row into the table: "eventTypes" */
  insert_eventTypes_one?: Maybe<EventTypes>;
  /** insert data into the table: "groupContents" */
  insert_groupContents?: Maybe<GroupContents_Mutation_Response>;
  /** insert a single row into the table: "groupContents" */
  insert_groupContents_one?: Maybe<GroupContents>;
  /** insert data into the table: "groupEvents" */
  insert_groupEvents?: Maybe<GroupEvents_Mutation_Response>;
  /** insert a single row into the table: "groupEvents" */
  insert_groupEvents_one?: Maybe<GroupEvents>;
  /** insert data into the table: "groupInvitations" */
  insert_groupInvitations?: Maybe<GroupInvitations_Mutation_Response>;
  /** insert a single row into the table: "groupInvitations" */
  insert_groupInvitations_one?: Maybe<GroupInvitations>;
  /** insert data into the table: "groupListedStockIssues" */
  insert_groupListedStockIssues?: Maybe<GroupListedStockIssues_Mutation_Response>;
  /** insert a single row into the table: "groupListedStockIssues" */
  insert_groupListedStockIssues_one?: Maybe<GroupListedStockIssues>;
  /** insert data into the table: "groupSettlementDates" */
  insert_groupSettlementDates?: Maybe<GroupSettlementDates_Mutation_Response>;
  /** insert a single row into the table: "groupSettlementDates" */
  insert_groupSettlementDates_one?: Maybe<GroupSettlementDates>;
  /** insert data into the table: "groupStockIssueLists" */
  insert_groupStockIssueLists?: Maybe<GroupStockIssueLists_Mutation_Response>;
  /** insert a single row into the table: "groupStockIssueLists" */
  insert_groupStockIssueLists_one?: Maybe<GroupStockIssueLists>;
  /** insert data into the table: "groupStockIssues" */
  insert_groupStockIssues?: Maybe<GroupStockIssues_Mutation_Response>;
  /** insert a single row into the table: "groupStockIssues" */
  insert_groupStockIssues_one?: Maybe<GroupStockIssues>;
  /** insert data into the table: "groupTypeAssignments" */
  insert_groupTypeAssignments?: Maybe<GroupTypeAssignments_Mutation_Response>;
  /** insert a single row into the table: "groupTypeAssignments" */
  insert_groupTypeAssignments_one?: Maybe<GroupTypeAssignments>;
  /** insert data into the table: "groupTypeTranslations" */
  insert_groupTypeTranslations?: Maybe<GroupTypeTranslations_Mutation_Response>;
  /** insert a single row into the table: "groupTypeTranslations" */
  insert_groupTypeTranslations_one?: Maybe<GroupTypeTranslations>;
  /** insert data into the table: "groupTypes" */
  insert_groupTypes?: Maybe<GroupTypes_Mutation_Response>;
  /** insert a single row into the table: "groupTypes" */
  insert_groupTypes_one?: Maybe<GroupTypes>;
  /** insert data into the table: "groups" */
  insert_groups?: Maybe<Groups_Mutation_Response>;
  /** insert a single row into the table: "groups" */
  insert_groups_one?: Maybe<Groups>;
  /** insert data into the table: "inactiveGroups" */
  insert_inactiveGroups?: Maybe<InactiveGroups_Mutation_Response>;
  /** insert a single row into the table: "inactiveGroups" */
  insert_inactiveGroups_one?: Maybe<InactiveGroups>;
  /** insert data into the table: "languages" */
  insert_languages?: Maybe<Languages_Mutation_Response>;
  /** insert a single row into the table: "languages" */
  insert_languages_one?: Maybe<Languages>;
  /** insert data into the table: "memberships" */
  insert_memberships?: Maybe<Memberships_Mutation_Response>;
  /** insert a single row into the table: "memberships" */
  insert_memberships_one?: Maybe<Memberships>;
  /** insert data into the table: "mlModels" */
  insert_mlModels?: Maybe<MlModels_Mutation_Response>;
  /** insert a single row into the table: "mlModels" */
  insert_mlModels_one?: Maybe<MlModels>;
  /** insert data into the table: "ownerships" */
  insert_ownerships?: Maybe<Ownerships_Mutation_Response>;
  /** insert a single row into the table: "ownerships" */
  insert_ownerships_one?: Maybe<Ownerships>;
  /** insert data into the table: "planTranslations" */
  insert_planTranslations?: Maybe<PlanTranslations_Mutation_Response>;
  /** insert a single row into the table: "planTranslations" */
  insert_planTranslations_one?: Maybe<PlanTranslations>;
  /** insert data into the table: "plans" */
  insert_plans?: Maybe<Plans_Mutation_Response>;
  /** insert a single row into the table: "plans" */
  insert_plans_one?: Maybe<Plans>;
  /** insert data into the table: "staffInvitations" */
  insert_staffInvitations?: Maybe<StaffInvitations_Mutation_Response>;
  /** insert a single row into the table: "staffInvitations" */
  insert_staffInvitations_one?: Maybe<StaffInvitations>;
  /** insert data into the table: "staffs" */
  insert_staffs?: Maybe<Staffs_Mutation_Response>;
  /** insert a single row into the table: "staffs" */
  insert_staffs_one?: Maybe<Staffs>;
  /** insert data into the table: "stockIssues" */
  insert_stockIssues?: Maybe<StockIssues_Mutation_Response>;
  /** insert a single row into the table: "stockIssues" */
  insert_stockIssues_one?: Maybe<StockIssues>;
  /** insert data into the table: "stockPrices" */
  insert_stockPrices?: Maybe<StockPrices_Mutation_Response>;
  /** insert a single row into the table: "stockPrices" */
  insert_stockPrices_one?: Maybe<StockPrices>;
  /** insert data into the table: "users" */
  insert_users?: Maybe<Users_Mutation_Response>;
  /** insert a single row into the table: "users" */
  insert_users_one?: Maybe<Users>;
  /** update data of the table: "articleContentDecreaseKeywords" */
  update_articleContentDecreaseKeywords?: Maybe<ArticleContentDecreaseKeywords_Mutation_Response>;
  /** update single row of the table: "articleContentDecreaseKeywords" */
  update_articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** update multiples rows of table: "articleContentDecreaseKeywords" */
  update_articleContentDecreaseKeywords_many?: Maybe<Array<Maybe<ArticleContentDecreaseKeywords_Mutation_Response>>>;
  /** update data of the table: "articleContentIncreaseKeywords" */
  update_articleContentIncreaseKeywords?: Maybe<ArticleContentIncreaseKeywords_Mutation_Response>;
  /** update single row of the table: "articleContentIncreaseKeywords" */
  update_articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** update multiples rows of table: "articleContentIncreaseKeywords" */
  update_articleContentIncreaseKeywords_many?: Maybe<Array<Maybe<ArticleContentIncreaseKeywords_Mutation_Response>>>;
  /** update data of the table: "articleContentKeywords" */
  update_articleContentKeywords?: Maybe<ArticleContentKeywords_Mutation_Response>;
  /** update single row of the table: "articleContentKeywords" */
  update_articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** update multiples rows of table: "articleContentKeywords" */
  update_articleContentKeywords_many?: Maybe<Array<Maybe<ArticleContentKeywords_Mutation_Response>>>;
  /** update data of the table: "articleContents" */
  update_articleContents?: Maybe<ArticleContents_Mutation_Response>;
  /** update single row of the table: "articleContents" */
  update_articleContents_by_pk?: Maybe<ArticleContents>;
  /** update multiples rows of table: "articleContents" */
  update_articleContents_many?: Maybe<Array<Maybe<ArticleContents_Mutation_Response>>>;
  /** update data of the table: "articleSources" */
  update_articleSources?: Maybe<ArticleSources_Mutation_Response>;
  /** update single row of the table: "articleSources" */
  update_articleSources_by_pk?: Maybe<ArticleSources>;
  /** update multiples rows of table: "articleSources" */
  update_articleSources_many?: Maybe<Array<Maybe<ArticleSources_Mutation_Response>>>;
  /** update data of the table: "articles" */
  update_articles?: Maybe<Articles_Mutation_Response>;
  /** update single row of the table: "articles" */
  update_articles_by_pk?: Maybe<Articles>;
  /** update multiples rows of table: "articles" */
  update_articles_many?: Maybe<Array<Maybe<Articles_Mutation_Response>>>;
  /** update data of the table: "contracts" */
  update_contracts?: Maybe<Contracts_Mutation_Response>;
  /** update single row of the table: "contracts" */
  update_contracts_by_pk?: Maybe<Contracts>;
  /** update multiples rows of table: "contracts" */
  update_contracts_many?: Maybe<Array<Maybe<Contracts_Mutation_Response>>>;
  /** update data of the table: "dailyImpacts" */
  update_dailyImpacts?: Maybe<DailyImpacts_Mutation_Response>;
  /** update single row of the table: "dailyImpacts" */
  update_dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** update multiples rows of table: "dailyImpacts" */
  update_dailyImpacts_many?: Maybe<Array<Maybe<DailyImpacts_Mutation_Response>>>;
  /** update data of the table: "eventTypeTranslations" */
  update_eventTypeTranslations?: Maybe<EventTypeTranslations_Mutation_Response>;
  /** update single row of the table: "eventTypeTranslations" */
  update_eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** update multiples rows of table: "eventTypeTranslations" */
  update_eventTypeTranslations_many?: Maybe<Array<Maybe<EventTypeTranslations_Mutation_Response>>>;
  /** update data of the table: "eventTypes" */
  update_eventTypes?: Maybe<EventTypes_Mutation_Response>;
  /** update single row of the table: "eventTypes" */
  update_eventTypes_by_pk?: Maybe<EventTypes>;
  /** update multiples rows of table: "eventTypes" */
  update_eventTypes_many?: Maybe<Array<Maybe<EventTypes_Mutation_Response>>>;
  /** update data of the table: "groupContents" */
  update_groupContents?: Maybe<GroupContents_Mutation_Response>;
  /** update single row of the table: "groupContents" */
  update_groupContents_by_pk?: Maybe<GroupContents>;
  /** update multiples rows of table: "groupContents" */
  update_groupContents_many?: Maybe<Array<Maybe<GroupContents_Mutation_Response>>>;
  /** update data of the table: "groupEvents" */
  update_groupEvents?: Maybe<GroupEvents_Mutation_Response>;
  /** update single row of the table: "groupEvents" */
  update_groupEvents_by_pk?: Maybe<GroupEvents>;
  /** update multiples rows of table: "groupEvents" */
  update_groupEvents_many?: Maybe<Array<Maybe<GroupEvents_Mutation_Response>>>;
  /** update data of the table: "groupInvitations" */
  update_groupInvitations?: Maybe<GroupInvitations_Mutation_Response>;
  /** update single row of the table: "groupInvitations" */
  update_groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** update multiples rows of table: "groupInvitations" */
  update_groupInvitations_many?: Maybe<Array<Maybe<GroupInvitations_Mutation_Response>>>;
  /** update data of the table: "groupListedStockIssues" */
  update_groupListedStockIssues?: Maybe<GroupListedStockIssues_Mutation_Response>;
  /** update single row of the table: "groupListedStockIssues" */
  update_groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** update multiples rows of table: "groupListedStockIssues" */
  update_groupListedStockIssues_many?: Maybe<Array<Maybe<GroupListedStockIssues_Mutation_Response>>>;
  /** update data of the table: "groupSettlementDates" */
  update_groupSettlementDates?: Maybe<GroupSettlementDates_Mutation_Response>;
  /** update single row of the table: "groupSettlementDates" */
  update_groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** update multiples rows of table: "groupSettlementDates" */
  update_groupSettlementDates_many?: Maybe<Array<Maybe<GroupSettlementDates_Mutation_Response>>>;
  /** update data of the table: "groupStockIssueLists" */
  update_groupStockIssueLists?: Maybe<GroupStockIssueLists_Mutation_Response>;
  /** update single row of the table: "groupStockIssueLists" */
  update_groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** update multiples rows of table: "groupStockIssueLists" */
  update_groupStockIssueLists_many?: Maybe<Array<Maybe<GroupStockIssueLists_Mutation_Response>>>;
  /** update data of the table: "groupStockIssues" */
  update_groupStockIssues?: Maybe<GroupStockIssues_Mutation_Response>;
  /** update single row of the table: "groupStockIssues" */
  update_groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** update multiples rows of table: "groupStockIssues" */
  update_groupStockIssues_many?: Maybe<Array<Maybe<GroupStockIssues_Mutation_Response>>>;
  /** update data of the table: "groupTypeAssignments" */
  update_groupTypeAssignments?: Maybe<GroupTypeAssignments_Mutation_Response>;
  /** update single row of the table: "groupTypeAssignments" */
  update_groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** update multiples rows of table: "groupTypeAssignments" */
  update_groupTypeAssignments_many?: Maybe<Array<Maybe<GroupTypeAssignments_Mutation_Response>>>;
  /** update data of the table: "groupTypeTranslations" */
  update_groupTypeTranslations?: Maybe<GroupTypeTranslations_Mutation_Response>;
  /** update single row of the table: "groupTypeTranslations" */
  update_groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** update multiples rows of table: "groupTypeTranslations" */
  update_groupTypeTranslations_many?: Maybe<Array<Maybe<GroupTypeTranslations_Mutation_Response>>>;
  /** update data of the table: "groupTypes" */
  update_groupTypes?: Maybe<GroupTypes_Mutation_Response>;
  /** update single row of the table: "groupTypes" */
  update_groupTypes_by_pk?: Maybe<GroupTypes>;
  /** update multiples rows of table: "groupTypes" */
  update_groupTypes_many?: Maybe<Array<Maybe<GroupTypes_Mutation_Response>>>;
  /** update data of the table: "groups" */
  update_groups?: Maybe<Groups_Mutation_Response>;
  /** update single row of the table: "groups" */
  update_groups_by_pk?: Maybe<Groups>;
  /** update multiples rows of table: "groups" */
  update_groups_many?: Maybe<Array<Maybe<Groups_Mutation_Response>>>;
  /** update data of the table: "inactiveGroups" */
  update_inactiveGroups?: Maybe<InactiveGroups_Mutation_Response>;
  /** update single row of the table: "inactiveGroups" */
  update_inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** update multiples rows of table: "inactiveGroups" */
  update_inactiveGroups_many?: Maybe<Array<Maybe<InactiveGroups_Mutation_Response>>>;
  /** update data of the table: "languages" */
  update_languages?: Maybe<Languages_Mutation_Response>;
  /** update single row of the table: "languages" */
  update_languages_by_pk?: Maybe<Languages>;
  /** update multiples rows of table: "languages" */
  update_languages_many?: Maybe<Array<Maybe<Languages_Mutation_Response>>>;
  /** update data of the table: "memberships" */
  update_memberships?: Maybe<Memberships_Mutation_Response>;
  /** update single row of the table: "memberships" */
  update_memberships_by_pk?: Maybe<Memberships>;
  /** update multiples rows of table: "memberships" */
  update_memberships_many?: Maybe<Array<Maybe<Memberships_Mutation_Response>>>;
  /** update data of the table: "mlModels" */
  update_mlModels?: Maybe<MlModels_Mutation_Response>;
  /** update single row of the table: "mlModels" */
  update_mlModels_by_pk?: Maybe<MlModels>;
  /** update multiples rows of table: "mlModels" */
  update_mlModels_many?: Maybe<Array<Maybe<MlModels_Mutation_Response>>>;
  /** update data of the table: "ownerships" */
  update_ownerships?: Maybe<Ownerships_Mutation_Response>;
  /** update single row of the table: "ownerships" */
  update_ownerships_by_pk?: Maybe<Ownerships>;
  /** update multiples rows of table: "ownerships" */
  update_ownerships_many?: Maybe<Array<Maybe<Ownerships_Mutation_Response>>>;
  /** update data of the table: "planTranslations" */
  update_planTranslations?: Maybe<PlanTranslations_Mutation_Response>;
  /** update single row of the table: "planTranslations" */
  update_planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** update multiples rows of table: "planTranslations" */
  update_planTranslations_many?: Maybe<Array<Maybe<PlanTranslations_Mutation_Response>>>;
  /** update data of the table: "plans" */
  update_plans?: Maybe<Plans_Mutation_Response>;
  /** update single row of the table: "plans" */
  update_plans_by_pk?: Maybe<Plans>;
  /** update multiples rows of table: "plans" */
  update_plans_many?: Maybe<Array<Maybe<Plans_Mutation_Response>>>;
  /** update data of the table: "staffInvitations" */
  update_staffInvitations?: Maybe<StaffInvitations_Mutation_Response>;
  /** update single row of the table: "staffInvitations" */
  update_staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** update multiples rows of table: "staffInvitations" */
  update_staffInvitations_many?: Maybe<Array<Maybe<StaffInvitations_Mutation_Response>>>;
  /** update data of the table: "staffs" */
  update_staffs?: Maybe<Staffs_Mutation_Response>;
  /** update single row of the table: "staffs" */
  update_staffs_by_pk?: Maybe<Staffs>;
  /** update multiples rows of table: "staffs" */
  update_staffs_many?: Maybe<Array<Maybe<Staffs_Mutation_Response>>>;
  /** update data of the table: "stockIssues" */
  update_stockIssues?: Maybe<StockIssues_Mutation_Response>;
  /** update single row of the table: "stockIssues" */
  update_stockIssues_by_pk?: Maybe<StockIssues>;
  /** update multiples rows of table: "stockIssues" */
  update_stockIssues_many?: Maybe<Array<Maybe<StockIssues_Mutation_Response>>>;
  /** update data of the table: "stockPrices" */
  update_stockPrices?: Maybe<StockPrices_Mutation_Response>;
  /** update single row of the table: "stockPrices" */
  update_stockPrices_by_pk?: Maybe<StockPrices>;
  /** update multiples rows of table: "stockPrices" */
  update_stockPrices_many?: Maybe<Array<Maybe<StockPrices_Mutation_Response>>>;
  /** update data of the table: "users" */
  update_users?: Maybe<Users_Mutation_Response>;
  /** update single row of the table: "users" */
  update_users_by_pk?: Maybe<Users>;
  /** update multiples rows of table: "users" */
  update_users_many?: Maybe<Array<Maybe<Users_Mutation_Response>>>;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentDecreaseKeywordsArgs = {
  where: ArticleContentDecreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentDecreaseKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentIncreaseKeywordsArgs = {
  where: ArticleContentIncreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentIncreaseKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentKeywordsArgs = {
  where: ArticleContentKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleContentsArgs = {
  where: ArticleContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleContents_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_ArticleSourcesArgs = {
  where: ArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_ArticleSources_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_ArticlesArgs = {
  where: Articles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Articles_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_ContractsArgs = {
  where: Contracts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Contracts_By_PkArgs = {
  groupId: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_DailyImpactsArgs = {
  where: DailyImpacts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_DailyImpacts_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_EventTypeTranslationsArgs = {
  where: EventTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_EventTypeTranslations_By_PkArgs = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};


/** mutation root */
export type Mutation_RootDelete_EventTypesArgs = {
  where: EventTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_EventTypes_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_GroupContentsArgs = {
  where: GroupContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupContents_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupEventsArgs = {
  where: GroupEvents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupEvents_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupInvitationsArgs = {
  where: GroupInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupInvitations_By_PkArgs = {
  email: Scalars['String'];
  groupId: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupListedStockIssuesArgs = {
  where: GroupListedStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupListedStockIssues_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupSettlementDatesArgs = {
  where: GroupSettlementDates_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupSettlementDates_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssueListsArgs = {
  where: GroupStockIssueLists_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssueLists_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssuesArgs = {
  where: GroupStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupStockIssues_By_PkArgs = {
  groupId: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeAssignmentsArgs = {
  where: GroupTypeAssignments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeAssignments_By_PkArgs = {
  groupId: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeTranslationsArgs = {
  where: GroupTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypeTranslations_By_PkArgs = {
  groupTypeCode: Scalars['String'];
  languageCode: Languages_Enum;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypesArgs = {
  where: GroupTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_GroupTypes_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_GroupsArgs = {
  where: Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Groups_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_InactiveGroupsArgs = {
  where: InactiveGroups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_InactiveGroups_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_LanguagesArgs = {
  where: Languages_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Languages_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_MembershipsArgs = {
  where: Memberships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Memberships_By_PkArgs = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_MlModelsArgs = {
  where: MlModels_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_MlModels_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_OwnershipsArgs = {
  where: Ownerships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Ownerships_By_PkArgs = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_PlanTranslationsArgs = {
  where: PlanTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_PlanTranslations_By_PkArgs = {
  languageCode: Languages_Enum;
  planCode: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_PlansArgs = {
  where: Plans_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Plans_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_StaffInvitationsArgs = {
  where: StaffInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StaffInvitations_By_PkArgs = {
  email: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_StaffsArgs = {
  where: Staffs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Staffs_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootDelete_StockIssuesArgs = {
  where: StockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StockIssues_By_PkArgs = {
  code: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_StockPricesArgs = {
  where: StockPrices_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_StockPrices_By_PkArgs = {
  date: Scalars['date'];
  stockIssueCode: Scalars['String'];
};


/** mutation root */
export type Mutation_RootDelete_UsersArgs = {
  where: Users_Bool_Exp;
};


/** mutation root */
export type Mutation_RootDelete_Users_By_PkArgs = {
  id: Scalars['uuid'];
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentDecreaseKeywordsArgs = {
  objects: Array<ArticleContentDecreaseKeywords_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContentDecreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentDecreaseKeywords_OneArgs = {
  object: ArticleContentDecreaseKeywords_Insert_Input;
  on_conflict?: InputMaybe<ArticleContentDecreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentIncreaseKeywordsArgs = {
  objects: Array<ArticleContentIncreaseKeywords_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContentIncreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentIncreaseKeywords_OneArgs = {
  object: ArticleContentIncreaseKeywords_Insert_Input;
  on_conflict?: InputMaybe<ArticleContentIncreaseKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentKeywordsArgs = {
  objects: Array<ArticleContentKeywords_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContentKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentKeywords_OneArgs = {
  object: ArticleContentKeywords_Insert_Input;
  on_conflict?: InputMaybe<ArticleContentKeywords_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContentsArgs = {
  objects: Array<ArticleContents_Insert_Input>;
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleContents_OneArgs = {
  object: ArticleContents_Insert_Input;
  on_conflict?: InputMaybe<ArticleContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSourcesArgs = {
  objects: Array<ArticleSources_Insert_Input>;
  on_conflict?: InputMaybe<ArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticleSources_OneArgs = {
  object: ArticleSources_Insert_Input;
  on_conflict?: InputMaybe<ArticleSources_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ArticlesArgs = {
  objects: Array<Articles_Insert_Input>;
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Articles_OneArgs = {
  object: Articles_Insert_Input;
  on_conflict?: InputMaybe<Articles_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_ContractsArgs = {
  objects: Array<Contracts_Insert_Input>;
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Contracts_OneArgs = {
  object: Contracts_Insert_Input;
  on_conflict?: InputMaybe<Contracts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailyImpactsArgs = {
  objects: Array<DailyImpacts_Insert_Input>;
  on_conflict?: InputMaybe<DailyImpacts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_DailyImpacts_OneArgs = {
  object: DailyImpacts_Insert_Input;
  on_conflict?: InputMaybe<DailyImpacts_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypeTranslationsArgs = {
  objects: Array<EventTypeTranslations_Insert_Input>;
  on_conflict?: InputMaybe<EventTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypeTranslations_OneArgs = {
  object: EventTypeTranslations_Insert_Input;
  on_conflict?: InputMaybe<EventTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypesArgs = {
  objects: Array<EventTypes_Insert_Input>;
  on_conflict?: InputMaybe<EventTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_EventTypes_OneArgs = {
  object: EventTypes_Insert_Input;
  on_conflict?: InputMaybe<EventTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupContentsArgs = {
  objects: Array<GroupContents_Insert_Input>;
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupContents_OneArgs = {
  object: GroupContents_Insert_Input;
  on_conflict?: InputMaybe<GroupContents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupEventsArgs = {
  objects: Array<GroupEvents_Insert_Input>;
  on_conflict?: InputMaybe<GroupEvents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupEvents_OneArgs = {
  object: GroupEvents_Insert_Input;
  on_conflict?: InputMaybe<GroupEvents_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupInvitationsArgs = {
  objects: Array<GroupInvitations_Insert_Input>;
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupInvitations_OneArgs = {
  object: GroupInvitations_Insert_Input;
  on_conflict?: InputMaybe<GroupInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupListedStockIssuesArgs = {
  objects: Array<GroupListedStockIssues_Insert_Input>;
  on_conflict?: InputMaybe<GroupListedStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupListedStockIssues_OneArgs = {
  object: GroupListedStockIssues_Insert_Input;
  on_conflict?: InputMaybe<GroupListedStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupSettlementDatesArgs = {
  objects: Array<GroupSettlementDates_Insert_Input>;
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupSettlementDates_OneArgs = {
  object: GroupSettlementDates_Insert_Input;
  on_conflict?: InputMaybe<GroupSettlementDates_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssueListsArgs = {
  objects: Array<GroupStockIssueLists_Insert_Input>;
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssueLists_OneArgs = {
  object: GroupStockIssueLists_Insert_Input;
  on_conflict?: InputMaybe<GroupStockIssueLists_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssuesArgs = {
  objects: Array<GroupStockIssues_Insert_Input>;
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupStockIssues_OneArgs = {
  object: GroupStockIssues_Insert_Input;
  on_conflict?: InputMaybe<GroupStockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeAssignmentsArgs = {
  objects: Array<GroupTypeAssignments_Insert_Input>;
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeAssignments_OneArgs = {
  object: GroupTypeAssignments_Insert_Input;
  on_conflict?: InputMaybe<GroupTypeAssignments_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeTranslationsArgs = {
  objects: Array<GroupTypeTranslations_Insert_Input>;
  on_conflict?: InputMaybe<GroupTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypeTranslations_OneArgs = {
  object: GroupTypeTranslations_Insert_Input;
  on_conflict?: InputMaybe<GroupTypeTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypesArgs = {
  objects: Array<GroupTypes_Insert_Input>;
  on_conflict?: InputMaybe<GroupTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupTypes_OneArgs = {
  object: GroupTypes_Insert_Input;
  on_conflict?: InputMaybe<GroupTypes_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_GroupsArgs = {
  objects: Array<Groups_Insert_Input>;
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Groups_OneArgs = {
  object: Groups_Insert_Input;
  on_conflict?: InputMaybe<Groups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InactiveGroupsArgs = {
  objects: Array<InactiveGroups_Insert_Input>;
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_InactiveGroups_OneArgs = {
  object: InactiveGroups_Insert_Input;
  on_conflict?: InputMaybe<InactiveGroups_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_LanguagesArgs = {
  objects: Array<Languages_Insert_Input>;
  on_conflict?: InputMaybe<Languages_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Languages_OneArgs = {
  object: Languages_Insert_Input;
  on_conflict?: InputMaybe<Languages_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MembershipsArgs = {
  objects: Array<Memberships_Insert_Input>;
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Memberships_OneArgs = {
  object: Memberships_Insert_Input;
  on_conflict?: InputMaybe<Memberships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MlModelsArgs = {
  objects: Array<MlModels_Insert_Input>;
  on_conflict?: InputMaybe<MlModels_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_MlModels_OneArgs = {
  object: MlModels_Insert_Input;
  on_conflict?: InputMaybe<MlModels_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_OwnershipsArgs = {
  objects: Array<Ownerships_Insert_Input>;
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Ownerships_OneArgs = {
  object: Ownerships_Insert_Input;
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PlanTranslationsArgs = {
  objects: Array<PlanTranslations_Insert_Input>;
  on_conflict?: InputMaybe<PlanTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PlanTranslations_OneArgs = {
  object: PlanTranslations_Insert_Input;
  on_conflict?: InputMaybe<PlanTranslations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_PlansArgs = {
  objects: Array<Plans_Insert_Input>;
  on_conflict?: InputMaybe<Plans_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Plans_OneArgs = {
  object: Plans_Insert_Input;
  on_conflict?: InputMaybe<Plans_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StaffInvitationsArgs = {
  objects: Array<StaffInvitations_Insert_Input>;
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StaffInvitations_OneArgs = {
  object: StaffInvitations_Insert_Input;
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StaffsArgs = {
  objects: Array<Staffs_Insert_Input>;
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Staffs_OneArgs = {
  object: Staffs_Insert_Input;
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockIssuesArgs = {
  objects: Array<StockIssues_Insert_Input>;
  on_conflict?: InputMaybe<StockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockIssues_OneArgs = {
  object: StockIssues_Insert_Input;
  on_conflict?: InputMaybe<StockIssues_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockPricesArgs = {
  objects: Array<StockPrices_Insert_Input>;
  on_conflict?: InputMaybe<StockPrices_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_StockPrices_OneArgs = {
  object: StockPrices_Insert_Input;
  on_conflict?: InputMaybe<StockPrices_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_UsersArgs = {
  objects: Array<Users_Insert_Input>;
  on_conflict?: InputMaybe<Users_On_Conflict>;
};


/** mutation root */
export type Mutation_RootInsert_Users_OneArgs = {
  object: Users_Insert_Input;
  on_conflict?: InputMaybe<Users_On_Conflict>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentDecreaseKeywordsArgs = {
  _set?: InputMaybe<ArticleContentDecreaseKeywords_Set_Input>;
  where: ArticleContentDecreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentDecreaseKeywords_By_PkArgs = {
  _set?: InputMaybe<ArticleContentDecreaseKeywords_Set_Input>;
  pk_columns: ArticleContentDecreaseKeywords_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentDecreaseKeywords_ManyArgs = {
  updates: Array<ArticleContentDecreaseKeywords_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentIncreaseKeywordsArgs = {
  _set?: InputMaybe<ArticleContentIncreaseKeywords_Set_Input>;
  where: ArticleContentIncreaseKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentIncreaseKeywords_By_PkArgs = {
  _set?: InputMaybe<ArticleContentIncreaseKeywords_Set_Input>;
  pk_columns: ArticleContentIncreaseKeywords_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentIncreaseKeywords_ManyArgs = {
  updates: Array<ArticleContentIncreaseKeywords_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentKeywordsArgs = {
  _set?: InputMaybe<ArticleContentKeywords_Set_Input>;
  where: ArticleContentKeywords_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentKeywords_By_PkArgs = {
  _set?: InputMaybe<ArticleContentKeywords_Set_Input>;
  pk_columns: ArticleContentKeywords_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentKeywords_ManyArgs = {
  updates: Array<ArticleContentKeywords_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContentsArgs = {
  _set?: InputMaybe<ArticleContents_Set_Input>;
  where: ArticleContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContents_By_PkArgs = {
  _set?: InputMaybe<ArticleContents_Set_Input>;
  pk_columns: ArticleContents_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleContents_ManyArgs = {
  updates: Array<ArticleContents_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSourcesArgs = {
  _set?: InputMaybe<ArticleSources_Set_Input>;
  where: ArticleSources_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSources_By_PkArgs = {
  _set?: InputMaybe<ArticleSources_Set_Input>;
  pk_columns: ArticleSources_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_ArticleSources_ManyArgs = {
  updates: Array<ArticleSources_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ArticlesArgs = {
  _set?: InputMaybe<Articles_Set_Input>;
  where: Articles_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Articles_By_PkArgs = {
  _set?: InputMaybe<Articles_Set_Input>;
  pk_columns: Articles_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Articles_ManyArgs = {
  updates: Array<Articles_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_ContractsArgs = {
  _inc?: InputMaybe<Contracts_Inc_Input>;
  _set?: InputMaybe<Contracts_Set_Input>;
  where: Contracts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Contracts_By_PkArgs = {
  _inc?: InputMaybe<Contracts_Inc_Input>;
  _set?: InputMaybe<Contracts_Set_Input>;
  pk_columns: Contracts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Contracts_ManyArgs = {
  updates: Array<Contracts_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_DailyImpactsArgs = {
  _inc?: InputMaybe<DailyImpacts_Inc_Input>;
  _set?: InputMaybe<DailyImpacts_Set_Input>;
  where: DailyImpacts_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_DailyImpacts_By_PkArgs = {
  _inc?: InputMaybe<DailyImpacts_Inc_Input>;
  _set?: InputMaybe<DailyImpacts_Set_Input>;
  pk_columns: DailyImpacts_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_DailyImpacts_ManyArgs = {
  updates: Array<DailyImpacts_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypeTranslationsArgs = {
  _set?: InputMaybe<EventTypeTranslations_Set_Input>;
  where: EventTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypeTranslations_By_PkArgs = {
  _set?: InputMaybe<EventTypeTranslations_Set_Input>;
  pk_columns: EventTypeTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypeTranslations_ManyArgs = {
  updates: Array<EventTypeTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypesArgs = {
  _set?: InputMaybe<EventTypes_Set_Input>;
  where: EventTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypes_By_PkArgs = {
  _set?: InputMaybe<EventTypes_Set_Input>;
  pk_columns: EventTypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_EventTypes_ManyArgs = {
  updates: Array<EventTypes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupContentsArgs = {
  _set?: InputMaybe<GroupContents_Set_Input>;
  where: GroupContents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupContents_By_PkArgs = {
  _set?: InputMaybe<GroupContents_Set_Input>;
  pk_columns: GroupContents_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupContents_ManyArgs = {
  updates: Array<GroupContents_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEventsArgs = {
  _set?: InputMaybe<GroupEvents_Set_Input>;
  where: GroupEvents_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEvents_By_PkArgs = {
  _set?: InputMaybe<GroupEvents_Set_Input>;
  pk_columns: GroupEvents_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupEvents_ManyArgs = {
  updates: Array<GroupEvents_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupInvitationsArgs = {
  _set?: InputMaybe<GroupInvitations_Set_Input>;
  where: GroupInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupInvitations_By_PkArgs = {
  _set?: InputMaybe<GroupInvitations_Set_Input>;
  pk_columns: GroupInvitations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupInvitations_ManyArgs = {
  updates: Array<GroupInvitations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupListedStockIssuesArgs = {
  _set?: InputMaybe<GroupListedStockIssues_Set_Input>;
  where: GroupListedStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupListedStockIssues_By_PkArgs = {
  _set?: InputMaybe<GroupListedStockIssues_Set_Input>;
  pk_columns: GroupListedStockIssues_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupListedStockIssues_ManyArgs = {
  updates: Array<GroupListedStockIssues_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupSettlementDatesArgs = {
  _inc?: InputMaybe<GroupSettlementDates_Inc_Input>;
  _set?: InputMaybe<GroupSettlementDates_Set_Input>;
  where: GroupSettlementDates_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupSettlementDates_By_PkArgs = {
  _inc?: InputMaybe<GroupSettlementDates_Inc_Input>;
  _set?: InputMaybe<GroupSettlementDates_Set_Input>;
  pk_columns: GroupSettlementDates_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupSettlementDates_ManyArgs = {
  updates: Array<GroupSettlementDates_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueListsArgs = {
  _set?: InputMaybe<GroupStockIssueLists_Set_Input>;
  where: GroupStockIssueLists_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueLists_By_PkArgs = {
  _set?: InputMaybe<GroupStockIssueLists_Set_Input>;
  pk_columns: GroupStockIssueLists_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssueLists_ManyArgs = {
  updates: Array<GroupStockIssueLists_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssuesArgs = {
  _set?: InputMaybe<GroupStockIssues_Set_Input>;
  where: GroupStockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssues_By_PkArgs = {
  _set?: InputMaybe<GroupStockIssues_Set_Input>;
  pk_columns: GroupStockIssues_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupStockIssues_ManyArgs = {
  updates: Array<GroupStockIssues_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeAssignmentsArgs = {
  _set?: InputMaybe<GroupTypeAssignments_Set_Input>;
  where: GroupTypeAssignments_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeAssignments_By_PkArgs = {
  _set?: InputMaybe<GroupTypeAssignments_Set_Input>;
  pk_columns: GroupTypeAssignments_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeAssignments_ManyArgs = {
  updates: Array<GroupTypeAssignments_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeTranslationsArgs = {
  _set?: InputMaybe<GroupTypeTranslations_Set_Input>;
  where: GroupTypeTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeTranslations_By_PkArgs = {
  _set?: InputMaybe<GroupTypeTranslations_Set_Input>;
  pk_columns: GroupTypeTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypeTranslations_ManyArgs = {
  updates: Array<GroupTypeTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypesArgs = {
  _set?: InputMaybe<GroupTypes_Set_Input>;
  where: GroupTypes_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypes_By_PkArgs = {
  _set?: InputMaybe<GroupTypes_Set_Input>;
  pk_columns: GroupTypes_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_GroupTypes_ManyArgs = {
  updates: Array<GroupTypes_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_GroupsArgs = {
  _set?: InputMaybe<Groups_Set_Input>;
  where: Groups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Groups_By_PkArgs = {
  _set?: InputMaybe<Groups_Set_Input>;
  pk_columns: Groups_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Groups_ManyArgs = {
  updates: Array<Groups_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_InactiveGroupsArgs = {
  _set?: InputMaybe<InactiveGroups_Set_Input>;
  where: InactiveGroups_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_InactiveGroups_By_PkArgs = {
  _set?: InputMaybe<InactiveGroups_Set_Input>;
  pk_columns: InactiveGroups_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_InactiveGroups_ManyArgs = {
  updates: Array<InactiveGroups_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_LanguagesArgs = {
  _set?: InputMaybe<Languages_Set_Input>;
  where: Languages_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Languages_By_PkArgs = {
  _set?: InputMaybe<Languages_Set_Input>;
  pk_columns: Languages_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Languages_ManyArgs = {
  updates: Array<Languages_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MembershipsArgs = {
  _set?: InputMaybe<Memberships_Set_Input>;
  where: Memberships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Memberships_By_PkArgs = {
  _set?: InputMaybe<Memberships_Set_Input>;
  pk_columns: Memberships_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Memberships_ManyArgs = {
  updates: Array<Memberships_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_MlModelsArgs = {
  _set?: InputMaybe<MlModels_Set_Input>;
  where: MlModels_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_MlModels_By_PkArgs = {
  _set?: InputMaybe<MlModels_Set_Input>;
  pk_columns: MlModels_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_MlModels_ManyArgs = {
  updates: Array<MlModels_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_OwnershipsArgs = {
  _set?: InputMaybe<Ownerships_Set_Input>;
  where: Ownerships_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Ownerships_By_PkArgs = {
  _set?: InputMaybe<Ownerships_Set_Input>;
  pk_columns: Ownerships_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Ownerships_ManyArgs = {
  updates: Array<Ownerships_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_PlanTranslationsArgs = {
  _set?: InputMaybe<PlanTranslations_Set_Input>;
  where: PlanTranslations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_PlanTranslations_By_PkArgs = {
  _set?: InputMaybe<PlanTranslations_Set_Input>;
  pk_columns: PlanTranslations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_PlanTranslations_ManyArgs = {
  updates: Array<PlanTranslations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_PlansArgs = {
  _set?: InputMaybe<Plans_Set_Input>;
  where: Plans_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Plans_By_PkArgs = {
  _set?: InputMaybe<Plans_Set_Input>;
  pk_columns: Plans_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Plans_ManyArgs = {
  updates: Array<Plans_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StaffInvitationsArgs = {
  _set?: InputMaybe<StaffInvitations_Set_Input>;
  where: StaffInvitations_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StaffInvitations_By_PkArgs = {
  _set?: InputMaybe<StaffInvitations_Set_Input>;
  pk_columns: StaffInvitations_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StaffInvitations_ManyArgs = {
  updates: Array<StaffInvitations_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StaffsArgs = {
  _set?: InputMaybe<Staffs_Set_Input>;
  where: Staffs_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Staffs_By_PkArgs = {
  _set?: InputMaybe<Staffs_Set_Input>;
  pk_columns: Staffs_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Staffs_ManyArgs = {
  updates: Array<Staffs_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssuesArgs = {
  _set?: InputMaybe<StockIssues_Set_Input>;
  where: StockIssues_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssues_By_PkArgs = {
  _set?: InputMaybe<StockIssues_Set_Input>;
  pk_columns: StockIssues_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StockIssues_ManyArgs = {
  updates: Array<StockIssues_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_StockPricesArgs = {
  _inc?: InputMaybe<StockPrices_Inc_Input>;
  _set?: InputMaybe<StockPrices_Set_Input>;
  where: StockPrices_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_StockPrices_By_PkArgs = {
  _inc?: InputMaybe<StockPrices_Inc_Input>;
  _set?: InputMaybe<StockPrices_Set_Input>;
  pk_columns: StockPrices_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_StockPrices_ManyArgs = {
  updates: Array<StockPrices_Updates>;
};


/** mutation root */
export type Mutation_RootUpdate_UsersArgs = {
  _set?: InputMaybe<Users_Set_Input>;
  where: Users_Bool_Exp;
};


/** mutation root */
export type Mutation_RootUpdate_Users_By_PkArgs = {
  _set?: InputMaybe<Users_Set_Input>;
  pk_columns: Users_Pk_Columns_Input;
};


/** mutation root */
export type Mutation_RootUpdate_Users_ManyArgs = {
  updates: Array<Users_Updates>;
};

/** column ordering options */
export enum Order_By {
  /** in ascending order, nulls last */
  Asc = 'asc',
  /** in ascending order, nulls first */
  AscNullsFirst = 'asc_nulls_first',
  /** in ascending order, nulls last */
  AscNullsLast = 'asc_nulls_last',
  /** in descending order, nulls first */
  Desc = 'desc',
  /** in descending order, nulls first */
  DescNullsFirst = 'desc_nulls_first',
  /** in descending order, nulls last */
  DescNullsLast = 'desc_nulls_last'
}

/** columns and relationships of "ownerships" */
export type Ownerships = {
  __typename?: 'ownerships';
  /** An array relationship */
  _memberships: Array<Memberships>;
  /** An aggregate relationship */
  _memberships_aggregate: Memberships_Aggregate;
  /** An object relationship */
  group?: Maybe<Groups>;
  groupId: Scalars['uuid'];
  /** An object relationship */
  membership?: Maybe<Memberships>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  user?: Maybe<Users>;
  userId: Scalars['uuid'];
};


/** columns and relationships of "ownerships" */
export type Ownerships_MembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type Ownerships_Memberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "ownerships" */
export type OwnershipsOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "ownerships" */
export type Ownerships_Aggregate = {
  __typename?: 'ownerships_aggregate';
  aggregate?: Maybe<Ownerships_Aggregate_Fields>;
  nodes: Array<Ownerships>;
};

export type Ownerships_Aggregate_Bool_Exp = {
  count?: InputMaybe<Ownerships_Aggregate_Bool_Exp_Count>;
};

export type Ownerships_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Ownerships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Ownerships_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "ownerships" */
export type Ownerships_Aggregate_Fields = {
  __typename?: 'ownerships_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Ownerships_Max_Fields>;
  min?: Maybe<Ownerships_Min_Fields>;
};


/** aggregate fields of "ownerships" */
export type Ownerships_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Ownerships_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "ownerships" */
export type Ownerships_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Ownerships_Max_Order_By>;
  min?: InputMaybe<Ownerships_Min_Order_By>;
};

/** input type for inserting array relation for remote table "ownerships" */
export type Ownerships_Arr_Rel_Insert_Input = {
  data: Array<Ownerships_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};

/** Boolean expression to filter rows from the table "ownerships". All fields are combined with a logical 'AND'. */
export type Ownerships_Bool_Exp = {
  _and?: InputMaybe<Array<Ownerships_Bool_Exp>>;
  _memberships?: InputMaybe<Memberships_Bool_Exp>;
  _memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  _not?: InputMaybe<Ownerships_Bool_Exp>;
  _or?: InputMaybe<Array<Ownerships_Bool_Exp>>;
  group?: InputMaybe<Groups_Bool_Exp>;
  groupId?: InputMaybe<Uuid_Comparison_Exp>;
  membership?: InputMaybe<Memberships_Bool_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
  userId?: InputMaybe<Uuid_Comparison_Exp>;
};

/** unique or primary key constraints on table "ownerships" */
export enum Ownerships_Constraint {
  /** unique or primary key constraint on columns "userId", "groupId" */
  OwnershipsPkey = 'ownerships_pkey'
}

/** input type for inserting data into table "ownerships" */
export type Ownerships_Insert_Input = {
  _memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  group?: InputMaybe<Groups_Obj_Rel_Insert_Input>;
  groupId?: InputMaybe<Scalars['uuid']>;
  membership?: InputMaybe<Memberships_Obj_Rel_Insert_Input>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** aggregate max on columns */
export type Ownerships_Max_Fields = {
  __typename?: 'ownerships_max_fields';
  groupId?: Maybe<Scalars['uuid']>;
  userId?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "ownerships" */
export type Ownerships_Max_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Ownerships_Min_Fields = {
  __typename?: 'ownerships_min_fields';
  groupId?: Maybe<Scalars['uuid']>;
  userId?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "ownerships" */
export type Ownerships_Min_Order_By = {
  groupId?: InputMaybe<Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "ownerships" */
export type Ownerships_Mutation_Response = {
  __typename?: 'ownerships_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Ownerships>;
};

/** input type for inserting object relation for remote table "ownerships" */
export type Ownerships_Obj_Rel_Insert_Input = {
  data: Ownerships_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Ownerships_On_Conflict>;
};

/** on_conflict condition type for table "ownerships" */
export type Ownerships_On_Conflict = {
  constraint: Ownerships_Constraint;
  update_columns?: Array<Ownerships_Update_Column>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** Ordering options when selecting data from "ownerships". */
export type Ownerships_Order_By = {
  _memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  group?: InputMaybe<Groups_Order_By>;
  groupId?: InputMaybe<Order_By>;
  membership?: InputMaybe<Memberships_Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  user?: InputMaybe<Users_Order_By>;
  userId?: InputMaybe<Order_By>;
};

/** primary key columns input for table: ownerships */
export type Ownerships_Pk_Columns_Input = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};

/** select columns of table "ownerships" */
export enum Ownerships_Select_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  UserId = 'userId'
}

/** input type for updating data in table "ownerships" */
export type Ownerships_Set_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** Streaming cursor of the table "ownerships" */
export type Ownerships_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Ownerships_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Ownerships_Stream_Cursor_Value_Input = {
  groupId?: InputMaybe<Scalars['uuid']>;
  userId?: InputMaybe<Scalars['uuid']>;
};

/** update columns of table "ownerships" */
export enum Ownerships_Update_Column {
  /** column name */
  GroupId = 'groupId',
  /** column name */
  UserId = 'userId'
}

export type Ownerships_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Ownerships_Set_Input>;
  where: Ownerships_Bool_Exp;
};

/** columns and relationships of "planTranslations" */
export type PlanTranslations = {
  __typename?: 'planTranslations';
  /** An object relationship */
  language?: Maybe<Languages>;
  languageCode: Languages_Enum;
  /** An object relationship */
  plan?: Maybe<Plans>;
  planCode: Scalars['String'];
  /** An object relationship */
  planTranslations?: Maybe<Languages>;
  text: Scalars['String'];
};

/** aggregated selection of "planTranslations" */
export type PlanTranslations_Aggregate = {
  __typename?: 'planTranslations_aggregate';
  aggregate?: Maybe<PlanTranslations_Aggregate_Fields>;
  nodes: Array<PlanTranslations>;
};

export type PlanTranslations_Aggregate_Bool_Exp = {
  count?: InputMaybe<PlanTranslations_Aggregate_Bool_Exp_Count>;
};

export type PlanTranslations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<PlanTranslations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "planTranslations" */
export type PlanTranslations_Aggregate_Fields = {
  __typename?: 'planTranslations_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<PlanTranslations_Max_Fields>;
  min?: Maybe<PlanTranslations_Min_Fields>;
};


/** aggregate fields of "planTranslations" */
export type PlanTranslations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "planTranslations" */
export type PlanTranslations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<PlanTranslations_Max_Order_By>;
  min?: InputMaybe<PlanTranslations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "planTranslations" */
export type PlanTranslations_Arr_Rel_Insert_Input = {
  data: Array<PlanTranslations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<PlanTranslations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "planTranslations". All fields are combined with a logical 'AND'. */
export type PlanTranslations_Bool_Exp = {
  _and?: InputMaybe<Array<PlanTranslations_Bool_Exp>>;
  _not?: InputMaybe<PlanTranslations_Bool_Exp>;
  _or?: InputMaybe<Array<PlanTranslations_Bool_Exp>>;
  language?: InputMaybe<Languages_Bool_Exp>;
  languageCode?: InputMaybe<Languages_Enum_Comparison_Exp>;
  plan?: InputMaybe<Plans_Bool_Exp>;
  planCode?: InputMaybe<String_Comparison_Exp>;
  planTranslations?: InputMaybe<Languages_Bool_Exp>;
  text?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "planTranslations" */
export enum PlanTranslations_Constraint {
  /** unique or primary key constraint on columns "planCode", "languageCode" */
  PlanTranslationsPkey = 'planTranslations_pkey'
}

/** input type for inserting data into table "planTranslations" */
export type PlanTranslations_Insert_Input = {
  language?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  languageCode?: InputMaybe<Languages_Enum>;
  plan?: InputMaybe<Plans_Obj_Rel_Insert_Input>;
  planCode?: InputMaybe<Scalars['String']>;
  planTranslations?: InputMaybe<Languages_Obj_Rel_Insert_Input>;
  text?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type PlanTranslations_Max_Fields = {
  __typename?: 'planTranslations_max_fields';
  planCode?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "planTranslations" */
export type PlanTranslations_Max_Order_By = {
  planCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type PlanTranslations_Min_Fields = {
  __typename?: 'planTranslations_min_fields';
  planCode?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "planTranslations" */
export type PlanTranslations_Min_Order_By = {
  planCode?: InputMaybe<Order_By>;
  text?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "planTranslations" */
export type PlanTranslations_Mutation_Response = {
  __typename?: 'planTranslations_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<PlanTranslations>;
};

/** on_conflict condition type for table "planTranslations" */
export type PlanTranslations_On_Conflict = {
  constraint: PlanTranslations_Constraint;
  update_columns?: Array<PlanTranslations_Update_Column>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};

/** Ordering options when selecting data from "planTranslations". */
export type PlanTranslations_Order_By = {
  language?: InputMaybe<Languages_Order_By>;
  languageCode?: InputMaybe<Order_By>;
  plan?: InputMaybe<Plans_Order_By>;
  planCode?: InputMaybe<Order_By>;
  planTranslations?: InputMaybe<Languages_Order_By>;
  text?: InputMaybe<Order_By>;
};

/** primary key columns input for table: planTranslations */
export type PlanTranslations_Pk_Columns_Input = {
  languageCode: Languages_Enum;
  planCode: Scalars['String'];
};

/** select columns of table "planTranslations" */
export enum PlanTranslations_Select_Column {
  /** column name */
  LanguageCode = 'languageCode',
  /** column name */
  PlanCode = 'planCode',
  /** column name */
  Text = 'text'
}

/** input type for updating data in table "planTranslations" */
export type PlanTranslations_Set_Input = {
  languageCode?: InputMaybe<Languages_Enum>;
  planCode?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "planTranslations" */
export type PlanTranslations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: PlanTranslations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type PlanTranslations_Stream_Cursor_Value_Input = {
  languageCode?: InputMaybe<Languages_Enum>;
  planCode?: InputMaybe<Scalars['String']>;
  text?: InputMaybe<Scalars['String']>;
};

/** update columns of table "planTranslations" */
export enum PlanTranslations_Update_Column {
  /** column name */
  LanguageCode = 'languageCode',
  /** column name */
  PlanCode = 'planCode',
  /** column name */
  Text = 'text'
}

export type PlanTranslations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<PlanTranslations_Set_Input>;
  where: PlanTranslations_Bool_Exp;
};

/** columns and relationships of "plans" */
export type Plans = {
  __typename?: 'plans';
  code: Scalars['String'];
  /** An array relationship */
  contracts: Array<Contracts>;
  /** An aggregate relationship */
  contracts_aggregate: Contracts_Aggregate;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
};


/** columns and relationships of "plans" */
export type PlansContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "plans" */
export type PlansContracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


/** columns and relationships of "plans" */
export type PlansPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


/** columns and relationships of "plans" */
export type PlansPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};

/** aggregated selection of "plans" */
export type Plans_Aggregate = {
  __typename?: 'plans_aggregate';
  aggregate?: Maybe<Plans_Aggregate_Fields>;
  nodes: Array<Plans>;
};

/** aggregate fields of "plans" */
export type Plans_Aggregate_Fields = {
  __typename?: 'plans_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Plans_Max_Fields>;
  min?: Maybe<Plans_Min_Fields>;
};


/** aggregate fields of "plans" */
export type Plans_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Plans_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "plans". All fields are combined with a logical 'AND'. */
export type Plans_Bool_Exp = {
  _and?: InputMaybe<Array<Plans_Bool_Exp>>;
  _not?: InputMaybe<Plans_Bool_Exp>;
  _or?: InputMaybe<Array<Plans_Bool_Exp>>;
  code?: InputMaybe<String_Comparison_Exp>;
  contracts?: InputMaybe<Contracts_Bool_Exp>;
  contracts_aggregate?: InputMaybe<Contracts_Aggregate_Bool_Exp>;
  planTranslations?: InputMaybe<PlanTranslations_Bool_Exp>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Bool_Exp>;
};

/** unique or primary key constraints on table "plans" */
export enum Plans_Constraint {
  /** unique or primary key constraint on columns "code" */
  PlansPkey = 'plans_pkey'
}

/** input type for inserting data into table "plans" */
export type Plans_Insert_Input = {
  code?: InputMaybe<Scalars['String']>;
  contracts?: InputMaybe<Contracts_Arr_Rel_Insert_Input>;
  planTranslations?: InputMaybe<PlanTranslations_Arr_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Plans_Max_Fields = {
  __typename?: 'plans_max_fields';
  code?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type Plans_Min_Fields = {
  __typename?: 'plans_min_fields';
  code?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "plans" */
export type Plans_Mutation_Response = {
  __typename?: 'plans_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Plans>;
};

/** input type for inserting object relation for remote table "plans" */
export type Plans_Obj_Rel_Insert_Input = {
  data: Plans_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Plans_On_Conflict>;
};

/** on_conflict condition type for table "plans" */
export type Plans_On_Conflict = {
  constraint: Plans_Constraint;
  update_columns?: Array<Plans_Update_Column>;
  where?: InputMaybe<Plans_Bool_Exp>;
};

/** Ordering options when selecting data from "plans". */
export type Plans_Order_By = {
  code?: InputMaybe<Order_By>;
  contracts_aggregate?: InputMaybe<Contracts_Aggregate_Order_By>;
  planTranslations_aggregate?: InputMaybe<PlanTranslations_Aggregate_Order_By>;
};

/** primary key columns input for table: plans */
export type Plans_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "plans" */
export enum Plans_Select_Column {
  /** column name */
  Code = 'code'
}

/** input type for updating data in table "plans" */
export type Plans_Set_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "plans" */
export type Plans_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Plans_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Plans_Stream_Cursor_Value_Input = {
  code?: InputMaybe<Scalars['String']>;
};

/** update columns of table "plans" */
export enum Plans_Update_Column {
  /** column name */
  Code = 'code'
}

export type Plans_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Plans_Set_Input>;
  where: Plans_Bool_Exp;
};

export type Query_Root = {
  __typename?: 'query_root';
  /** An array relationship */
  articleContentDecreaseKeywords: Array<ArticleContentDecreaseKeywords>;
  /** An aggregate relationship */
  articleContentDecreaseKeywords_aggregate: ArticleContentDecreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentDecreaseKeywords" using primary key columns */
  articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** An array relationship */
  articleContentIncreaseKeywords: Array<ArticleContentIncreaseKeywords>;
  /** An aggregate relationship */
  articleContentIncreaseKeywords_aggregate: ArticleContentIncreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentIncreaseKeywords" using primary key columns */
  articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** An array relationship */
  articleContentKeywords: Array<ArticleContentKeywords>;
  /** An aggregate relationship */
  articleContentKeywords_aggregate: ArticleContentKeywords_Aggregate;
  /** fetch data from the table: "articleContentKeywords" using primary key columns */
  articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** fetch data from the table: "articleContents" */
  articleContents: Array<ArticleContents>;
  /** fetch aggregated fields from the table: "articleContents" */
  articleContents_aggregate: ArticleContents_Aggregate;
  /** fetch data from the table: "articleContents" using primary key columns */
  articleContents_by_pk?: Maybe<ArticleContents>;
  /** fetch data from the table: "articleSources" */
  articleSources: Array<ArticleSources>;
  /** fetch aggregated fields from the table: "articleSources" */
  articleSources_aggregate: ArticleSources_Aggregate;
  /** fetch data from the table: "articleSources" using primary key columns */
  articleSources_by_pk?: Maybe<ArticleSources>;
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  /** fetch data from the table: "articles" using primary key columns */
  articles_by_pk?: Maybe<Articles>;
  /** An array relationship */
  contracts: Array<Contracts>;
  /** An aggregate relationship */
  contracts_aggregate: Contracts_Aggregate;
  /** fetch data from the table: "contracts" using primary key columns */
  contracts_by_pk?: Maybe<Contracts>;
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  /** fetch data from the table: "dailyImpacts" using primary key columns */
  dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** fetch data from the table: "eventTypeTranslations" using primary key columns */
  eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** fetch data from the table: "eventTypes" */
  eventTypes: Array<EventTypes>;
  /** fetch aggregated fields from the table: "eventTypes" */
  eventTypes_aggregate: EventTypes_Aggregate;
  /** fetch data from the table: "eventTypes" using primary key columns */
  eventTypes_by_pk?: Maybe<EventTypes>;
  /** fetch data from the table: "groupContents" */
  groupContents: Array<GroupContents>;
  /** fetch aggregated fields from the table: "groupContents" */
  groupContents_aggregate: GroupContents_Aggregate;
  /** fetch data from the table: "groupContents" using primary key columns */
  groupContents_by_pk?: Maybe<GroupContents>;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** fetch data from the table: "groupEvents" using primary key columns */
  groupEvents_by_pk?: Maybe<GroupEvents>;
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** fetch data from the table: "groupInvitations" using primary key columns */
  groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  /** fetch data from the table: "groupListedStockIssues" using primary key columns */
  groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** fetch data from the table: "groupSettlementDates" */
  groupSettlementDates: Array<GroupSettlementDates>;
  /** fetch aggregated fields from the table: "groupSettlementDates" */
  groupSettlementDates_aggregate: GroupSettlementDates_Aggregate;
  /** fetch data from the table: "groupSettlementDates" using primary key columns */
  groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** fetch data from the table: "groupStockIssueLists" using primary key columns */
  groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** An array relationship */
  groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  /** fetch data from the table: "groupStockIssues" using primary key columns */
  groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** An array relationship */
  groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** fetch data from the table: "groupTypeAssignments" using primary key columns */
  groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
  /** fetch data from the table: "groupTypeTranslations" using primary key columns */
  groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** fetch data from the table: "groupTypes" */
  groupTypes: Array<GroupTypes>;
  /** fetch aggregated fields from the table: "groupTypes" */
  groupTypes_aggregate: GroupTypes_Aggregate;
  /** fetch data from the table: "groupTypes" using primary key columns */
  groupTypes_by_pk?: Maybe<GroupTypes>;
  /** fetch data from the table: "groups" */
  groups: Array<Groups>;
  /** fetch aggregated fields from the table: "groups" */
  groups_aggregate: Groups_Aggregate;
  /** fetch data from the table: "groups" using primary key columns */
  groups_by_pk?: Maybe<Groups>;
  /** fetch data from the table: "inactiveGroups" */
  inactiveGroups: Array<InactiveGroups>;
  /** fetch aggregated fields from the table: "inactiveGroups" */
  inactiveGroups_aggregate: InactiveGroups_Aggregate;
  /** fetch data from the table: "inactiveGroups" using primary key columns */
  inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** fetch data from the table: "languages" */
  languages: Array<Languages>;
  /** fetch aggregated fields from the table: "languages" */
  languages_aggregate: Languages_Aggregate;
  /** fetch data from the table: "languages" using primary key columns */
  languages_by_pk?: Maybe<Languages>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** fetch data from the table: "memberships" using primary key columns */
  memberships_by_pk?: Maybe<Memberships>;
  /** fetch data from the table: "mlModels" */
  mlModels: Array<MlModels>;
  /** fetch aggregated fields from the table: "mlModels" */
  mlModels_aggregate: MlModels_Aggregate;
  /** fetch data from the table: "mlModels" using primary key columns */
  mlModels_by_pk?: Maybe<MlModels>;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** fetch data from the table: "ownerships" using primary key columns */
  ownerships_by_pk?: Maybe<Ownerships>;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
  /** fetch data from the table: "planTranslations" using primary key columns */
  planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** fetch data from the table: "plans" */
  plans: Array<Plans>;
  /** fetch aggregated fields from the table: "plans" */
  plans_aggregate: Plans_Aggregate;
  /** fetch data from the table: "plans" using primary key columns */
  plans_by_pk?: Maybe<Plans>;
  /** fetch data from the table: "staffInvitations" */
  staffInvitations: Array<StaffInvitations>;
  /** fetch aggregated fields from the table: "staffInvitations" */
  staffInvitations_aggregate: StaffInvitations_Aggregate;
  /** fetch data from the table: "staffInvitations" using primary key columns */
  staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** fetch data from the table: "staffs" */
  staffs: Array<Staffs>;
  /** fetch aggregated fields from the table: "staffs" */
  staffs_aggregate: Staffs_Aggregate;
  /** fetch data from the table: "staffs" using primary key columns */
  staffs_by_pk?: Maybe<Staffs>;
  /** fetch data from the table: "stockIssues" */
  stockIssues: Array<StockIssues>;
  /** fetch aggregated fields from the table: "stockIssues" */
  stockIssues_aggregate: StockIssues_Aggregate;
  /** fetch data from the table: "stockIssues" using primary key columns */
  stockIssues_by_pk?: Maybe<StockIssues>;
  /** An array relationship */
  stockPrices: Array<StockPrices>;
  /** An aggregate relationship */
  stockPrices_aggregate: StockPrices_Aggregate;
  /** fetch data from the table: "stockPrices" using primary key columns */
  stockPrices_by_pk?: Maybe<StockPrices>;
  /** fetch data from the table: "users" */
  users: Array<Users>;
  /** fetch aggregated fields from the table: "users" */
  users_aggregate: Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  users_by_pk?: Maybe<Users>;
};


export type Query_RootArticleContentDecreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentDecreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentDecreaseKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


export type Query_RootArticleContentIncreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentIncreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Query_RootArticleContentIncreaseKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


export type Query_RootArticleContentKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Query_RootArticleContentKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Query_RootArticleContentKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


export type Query_RootArticleContentsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Query_RootArticleContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Query_RootArticleContents_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Query_RootArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Query_RootArticleSources_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Query_RootArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Query_RootArticles_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Query_RootContracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Query_RootContracts_By_PkArgs = {
  groupId: Scalars['uuid'];
};


export type Query_RootDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Query_RootDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Query_RootDailyImpacts_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Query_RootEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Query_RootEventTypeTranslations_By_PkArgs = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};


export type Query_RootEventTypesArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Query_RootEventTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Query_RootEventTypes_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootGroupContentsArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Query_RootGroupContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Query_RootGroupContents_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Query_RootGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Query_RootGroupEvents_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Query_RootGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Query_RootGroupInvitations_By_PkArgs = {
  email: Scalars['String'];
  groupId: Scalars['uuid'];
};


export type Query_RootGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Query_RootGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Query_RootGroupListedStockIssues_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootGroupSettlementDatesArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Query_RootGroupSettlementDates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Query_RootGroupSettlementDates_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Query_RootGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Query_RootGroupStockIssueLists_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootGroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Query_RootGroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Query_RootGroupStockIssues_By_PkArgs = {
  groupId: Scalars['uuid'];
};


export type Query_RootGroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Query_RootGroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Query_RootGroupTypeAssignments_By_PkArgs = {
  groupId: Scalars['uuid'];
};


export type Query_RootGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Query_RootGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Query_RootGroupTypeTranslations_By_PkArgs = {
  groupTypeCode: Scalars['String'];
  languageCode: Languages_Enum;
};


export type Query_RootGroupTypesArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Query_RootGroupTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Query_RootGroupTypes_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootGroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Query_RootGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Query_RootGroups_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootInactiveGroupsArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Query_RootInactiveGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Query_RootInactiveGroups_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootLanguagesArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Query_RootLanguages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Query_RootLanguages_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Query_RootMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Query_RootMemberships_By_PkArgs = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};


export type Query_RootMlModelsArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Query_RootMlModels_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Query_RootMlModels_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Query_RootOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Query_RootOwnerships_By_PkArgs = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};


export type Query_RootPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Query_RootPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Query_RootPlanTranslations_By_PkArgs = {
  languageCode: Languages_Enum;
  planCode: Scalars['String'];
};


export type Query_RootPlansArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Query_RootPlans_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Query_RootPlans_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootStaffInvitationsArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Query_RootStaffInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Query_RootStaffInvitations_By_PkArgs = {
  email: Scalars['String'];
};


export type Query_RootStaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Query_RootStaffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Query_RootStaffs_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Query_RootStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Query_RootStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Query_RootStockIssues_By_PkArgs = {
  code: Scalars['String'];
};


export type Query_RootStockPricesArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Query_RootStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Query_RootStockPrices_By_PkArgs = {
  date: Scalars['date'];
  stockIssueCode: Scalars['String'];
};


export type Query_RootUsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Query_RootUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Query_RootUsers_By_PkArgs = {
  id: Scalars['uuid'];
};

/** columns and relationships of "staffInvitations" */
export type StaffInvitations = {
  __typename?: 'staffInvitations';
  /** An array relationship */
  _staffs: Array<Staffs>;
  /** An aggregate relationship */
  _staffs_aggregate: Staffs_Aggregate;
  email: Scalars['String'];
  id: Scalars['uuid'];
  name: Scalars['String'];
  /** An object relationship */
  staff?: Maybe<Staffs>;
};


/** columns and relationships of "staffInvitations" */
export type StaffInvitations_StaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


/** columns and relationships of "staffInvitations" */
export type StaffInvitations_Staffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};

/** aggregated selection of "staffInvitations" */
export type StaffInvitations_Aggregate = {
  __typename?: 'staffInvitations_aggregate';
  aggregate?: Maybe<StaffInvitations_Aggregate_Fields>;
  nodes: Array<StaffInvitations>;
};

export type StaffInvitations_Aggregate_Bool_Exp = {
  count?: InputMaybe<StaffInvitations_Aggregate_Bool_Exp_Count>;
};

export type StaffInvitations_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StaffInvitations_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "staffInvitations" */
export type StaffInvitations_Aggregate_Fields = {
  __typename?: 'staffInvitations_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<StaffInvitations_Max_Fields>;
  min?: Maybe<StaffInvitations_Min_Fields>;
};


/** aggregate fields of "staffInvitations" */
export type StaffInvitations_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "staffInvitations" */
export type StaffInvitations_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<StaffInvitations_Max_Order_By>;
  min?: InputMaybe<StaffInvitations_Min_Order_By>;
};

/** input type for inserting array relation for remote table "staffInvitations" */
export type StaffInvitations_Arr_Rel_Insert_Input = {
  data: Array<StaffInvitations_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};

/** Boolean expression to filter rows from the table "staffInvitations". All fields are combined with a logical 'AND'. */
export type StaffInvitations_Bool_Exp = {
  _and?: InputMaybe<Array<StaffInvitations_Bool_Exp>>;
  _not?: InputMaybe<StaffInvitations_Bool_Exp>;
  _or?: InputMaybe<Array<StaffInvitations_Bool_Exp>>;
  _staffs?: InputMaybe<Staffs_Bool_Exp>;
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Bool_Exp>;
  email?: InputMaybe<String_Comparison_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  staff?: InputMaybe<Staffs_Bool_Exp>;
};

/** unique or primary key constraints on table "staffInvitations" */
export enum StaffInvitations_Constraint {
  /** unique or primary key constraint on columns "id" */
  StaffInvitationsIdUniqueness = 'staffInvitations_id_uniqueness',
  /** unique or primary key constraint on columns "email" */
  StaffInvitationsPkey = 'staffInvitations_pkey'
}

/** input type for inserting data into table "staffInvitations" */
export type StaffInvitations_Insert_Input = {
  _staffs?: InputMaybe<Staffs_Arr_Rel_Insert_Input>;
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  staff?: InputMaybe<Staffs_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type StaffInvitations_Max_Fields = {
  __typename?: 'staffInvitations_max_fields';
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "staffInvitations" */
export type StaffInvitations_Max_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type StaffInvitations_Min_Fields = {
  __typename?: 'staffInvitations_min_fields';
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "staffInvitations" */
export type StaffInvitations_Min_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "staffInvitations" */
export type StaffInvitations_Mutation_Response = {
  __typename?: 'staffInvitations_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<StaffInvitations>;
};

/** input type for inserting object relation for remote table "staffInvitations" */
export type StaffInvitations_Obj_Rel_Insert_Input = {
  data: StaffInvitations_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<StaffInvitations_On_Conflict>;
};

/** on_conflict condition type for table "staffInvitations" */
export type StaffInvitations_On_Conflict = {
  constraint: StaffInvitations_Constraint;
  update_columns?: Array<StaffInvitations_Update_Column>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};

/** Ordering options when selecting data from "staffInvitations". */
export type StaffInvitations_Order_By = {
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Order_By>;
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  staff?: InputMaybe<Staffs_Order_By>;
};

/** primary key columns input for table: staffInvitations */
export type StaffInvitations_Pk_Columns_Input = {
  email: Scalars['String'];
};

/** select columns of table "staffInvitations" */
export enum StaffInvitations_Select_Column {
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

/** input type for updating data in table "staffInvitations" */
export type StaffInvitations_Set_Input = {
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "staffInvitations" */
export type StaffInvitations_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StaffInvitations_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StaffInvitations_Stream_Cursor_Value_Input = {
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
};

/** update columns of table "staffInvitations" */
export enum StaffInvitations_Update_Column {
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name'
}

export type StaffInvitations_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StaffInvitations_Set_Input>;
  where: StaffInvitations_Bool_Exp;
};

/** columns and relationships of "staffs" */
export type Staffs = {
  __typename?: 'staffs';
  /** An array relationship */
  _staffInvitations: Array<StaffInvitations>;
  /** An aggregate relationship */
  _staffInvitations_aggregate: StaffInvitations_Aggregate;
  /** An array relationship */
  _users: Array<Users>;
  /** An aggregate relationship */
  _users_aggregate: Users_Aggregate;
  id: Scalars['uuid'];
  /** An object relationship */
  staffInvitation?: Maybe<StaffInvitations>;
  /** An object relationship */
  user?: Maybe<Users>;
};


/** columns and relationships of "staffs" */
export type Staffs_StaffInvitationsArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


/** columns and relationships of "staffs" */
export type Staffs_StaffInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


/** columns and relationships of "staffs" */
export type Staffs_UsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


/** columns and relationships of "staffs" */
export type Staffs_Users_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};

/** aggregated selection of "staffs" */
export type Staffs_Aggregate = {
  __typename?: 'staffs_aggregate';
  aggregate?: Maybe<Staffs_Aggregate_Fields>;
  nodes: Array<Staffs>;
};

export type Staffs_Aggregate_Bool_Exp = {
  count?: InputMaybe<Staffs_Aggregate_Bool_Exp_Count>;
};

export type Staffs_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Staffs_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Staffs_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "staffs" */
export type Staffs_Aggregate_Fields = {
  __typename?: 'staffs_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Staffs_Max_Fields>;
  min?: Maybe<Staffs_Min_Fields>;
};


/** aggregate fields of "staffs" */
export type Staffs_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Staffs_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "staffs" */
export type Staffs_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Staffs_Max_Order_By>;
  min?: InputMaybe<Staffs_Min_Order_By>;
};

/** input type for inserting array relation for remote table "staffs" */
export type Staffs_Arr_Rel_Insert_Input = {
  data: Array<Staffs_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};

/** Boolean expression to filter rows from the table "staffs". All fields are combined with a logical 'AND'. */
export type Staffs_Bool_Exp = {
  _and?: InputMaybe<Array<Staffs_Bool_Exp>>;
  _not?: InputMaybe<Staffs_Bool_Exp>;
  _or?: InputMaybe<Array<Staffs_Bool_Exp>>;
  _staffInvitations?: InputMaybe<StaffInvitations_Bool_Exp>;
  _staffInvitations_aggregate?: InputMaybe<StaffInvitations_Aggregate_Bool_Exp>;
  _users?: InputMaybe<Users_Bool_Exp>;
  _users_aggregate?: InputMaybe<Users_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  staffInvitation?: InputMaybe<StaffInvitations_Bool_Exp>;
  user?: InputMaybe<Users_Bool_Exp>;
};

/** unique or primary key constraints on table "staffs" */
export enum Staffs_Constraint {
  /** unique or primary key constraint on columns "id" */
  StaffsPkey = 'staffs_pkey'
}

/** input type for inserting data into table "staffs" */
export type Staffs_Insert_Input = {
  _staffInvitations?: InputMaybe<StaffInvitations_Arr_Rel_Insert_Input>;
  _users?: InputMaybe<Users_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  staffInvitation?: InputMaybe<StaffInvitations_Obj_Rel_Insert_Input>;
  user?: InputMaybe<Users_Obj_Rel_Insert_Input>;
};

/** aggregate max on columns */
export type Staffs_Max_Fields = {
  __typename?: 'staffs_max_fields';
  id?: Maybe<Scalars['uuid']>;
};

/** order by max() on columns of table "staffs" */
export type Staffs_Max_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Staffs_Min_Fields = {
  __typename?: 'staffs_min_fields';
  id?: Maybe<Scalars['uuid']>;
};

/** order by min() on columns of table "staffs" */
export type Staffs_Min_Order_By = {
  id?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "staffs" */
export type Staffs_Mutation_Response = {
  __typename?: 'staffs_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Staffs>;
};

/** input type for inserting object relation for remote table "staffs" */
export type Staffs_Obj_Rel_Insert_Input = {
  data: Staffs_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Staffs_On_Conflict>;
};

/** on_conflict condition type for table "staffs" */
export type Staffs_On_Conflict = {
  constraint: Staffs_Constraint;
  update_columns?: Array<Staffs_Update_Column>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};

/** Ordering options when selecting data from "staffs". */
export type Staffs_Order_By = {
  _staffInvitations_aggregate?: InputMaybe<StaffInvitations_Aggregate_Order_By>;
  _users_aggregate?: InputMaybe<Users_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  staffInvitation?: InputMaybe<StaffInvitations_Order_By>;
  user?: InputMaybe<Users_Order_By>;
};

/** primary key columns input for table: staffs */
export type Staffs_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "staffs" */
export enum Staffs_Select_Column {
  /** column name */
  Id = 'id'
}

/** input type for updating data in table "staffs" */
export type Staffs_Set_Input = {
  id?: InputMaybe<Scalars['uuid']>;
};

/** Streaming cursor of the table "staffs" */
export type Staffs_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Staffs_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Staffs_Stream_Cursor_Value_Input = {
  id?: InputMaybe<Scalars['uuid']>;
};

/** update columns of table "staffs" */
export enum Staffs_Update_Column {
  /** column name */
  Id = 'id'
}

export type Staffs_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Staffs_Set_Input>;
  where: Staffs_Bool_Exp;
};

/** columns and relationships of "stockIssues" */
export type StockIssues = {
  __typename?: 'stockIssues';
  accountClosingMonth: Scalars['String'];
  address: Scalars['String'];
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  averageAge: Scalars['String'];
  averageSalary: Scalars['String'];
  capital: Scalars['String'];
  code: Scalars['String'];
  commonShares: Scalars['String'];
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  employees: Scalars['String'];
  enName: Scalars['String'];
  establishedDate: Scalars['String'];
  excludingTreasurySharesCommonShares: Scalars['String'];
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  /** An array relationship */
  groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  indicatorNames: Scalars['String'];
  marketName: Scalars['String'];
  name: Scalars['String'];
  nikkeiIndustryName: Scalars['String'];
  outstandingShares: Scalars['String'];
  representative: Scalars['String'];
  shareholdersMeetingDate: Scalars['String'];
  shortName: Scalars['String'];
  startingSalary: Scalars['String'];
  /** An array relationship */
  stockPrices: Array<StockPrices>;
  /** An aggregate relationship */
  stockPrices_aggregate: StockPrices_Aggregate;
  telephone: Scalars['String'];
  toshoIndustryName: Scalars['String'];
  tradingUnit: Scalars['String'];
  url: Scalars['String'];
};


/** columns and relationships of "stockIssues" */
export type StockIssuesArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesGroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesStockPricesArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


/** columns and relationships of "stockIssues" */
export type StockIssuesStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};

/** aggregated selection of "stockIssues" */
export type StockIssues_Aggregate = {
  __typename?: 'stockIssues_aggregate';
  aggregate?: Maybe<StockIssues_Aggregate_Fields>;
  nodes: Array<StockIssues>;
};

/** aggregate fields of "stockIssues" */
export type StockIssues_Aggregate_Fields = {
  __typename?: 'stockIssues_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<StockIssues_Max_Fields>;
  min?: Maybe<StockIssues_Min_Fields>;
};


/** aggregate fields of "stockIssues" */
export type StockIssues_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StockIssues_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** Boolean expression to filter rows from the table "stockIssues". All fields are combined with a logical 'AND'. */
export type StockIssues_Bool_Exp = {
  _and?: InputMaybe<Array<StockIssues_Bool_Exp>>;
  _not?: InputMaybe<StockIssues_Bool_Exp>;
  _or?: InputMaybe<Array<StockIssues_Bool_Exp>>;
  accountClosingMonth?: InputMaybe<String_Comparison_Exp>;
  address?: InputMaybe<String_Comparison_Exp>;
  articles?: InputMaybe<Articles_Bool_Exp>;
  articles_aggregate?: InputMaybe<Articles_Aggregate_Bool_Exp>;
  averageAge?: InputMaybe<String_Comparison_Exp>;
  averageSalary?: InputMaybe<String_Comparison_Exp>;
  capital?: InputMaybe<String_Comparison_Exp>;
  code?: InputMaybe<String_Comparison_Exp>;
  commonShares?: InputMaybe<String_Comparison_Exp>;
  dailyImpacts?: InputMaybe<DailyImpacts_Bool_Exp>;
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Bool_Exp>;
  employees?: InputMaybe<String_Comparison_Exp>;
  enName?: InputMaybe<String_Comparison_Exp>;
  establishedDate?: InputMaybe<String_Comparison_Exp>;
  excludingTreasurySharesCommonShares?: InputMaybe<String_Comparison_Exp>;
  groupEvents?: InputMaybe<GroupEvents_Bool_Exp>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Bool_Exp>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Bool_Exp>;
  groupStockIssues?: InputMaybe<GroupStockIssues_Bool_Exp>;
  groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Bool_Exp>;
  indicatorNames?: InputMaybe<String_Comparison_Exp>;
  marketName?: InputMaybe<String_Comparison_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  nikkeiIndustryName?: InputMaybe<String_Comparison_Exp>;
  outstandingShares?: InputMaybe<String_Comparison_Exp>;
  representative?: InputMaybe<String_Comparison_Exp>;
  shareholdersMeetingDate?: InputMaybe<String_Comparison_Exp>;
  shortName?: InputMaybe<String_Comparison_Exp>;
  startingSalary?: InputMaybe<String_Comparison_Exp>;
  stockPrices?: InputMaybe<StockPrices_Bool_Exp>;
  stockPrices_aggregate?: InputMaybe<StockPrices_Aggregate_Bool_Exp>;
  telephone?: InputMaybe<String_Comparison_Exp>;
  toshoIndustryName?: InputMaybe<String_Comparison_Exp>;
  tradingUnit?: InputMaybe<String_Comparison_Exp>;
  url?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "stockIssues" */
export enum StockIssues_Constraint {
  /** unique or primary key constraint on columns "code" */
  StockIssuesPkey = 'stockIssues_pkey'
}

/** input type for inserting data into table "stockIssues" */
export type StockIssues_Insert_Input = {
  accountClosingMonth?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  articles?: InputMaybe<Articles_Arr_Rel_Insert_Input>;
  averageAge?: InputMaybe<Scalars['String']>;
  averageSalary?: InputMaybe<Scalars['String']>;
  capital?: InputMaybe<Scalars['String']>;
  code?: InputMaybe<Scalars['String']>;
  commonShares?: InputMaybe<Scalars['String']>;
  dailyImpacts?: InputMaybe<DailyImpacts_Arr_Rel_Insert_Input>;
  employees?: InputMaybe<Scalars['String']>;
  enName?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['String']>;
  excludingTreasurySharesCommonShares?: InputMaybe<Scalars['String']>;
  groupEvents?: InputMaybe<GroupEvents_Arr_Rel_Insert_Input>;
  groupListedStockIssues?: InputMaybe<GroupListedStockIssues_Arr_Rel_Insert_Input>;
  groupStockIssues?: InputMaybe<GroupStockIssues_Arr_Rel_Insert_Input>;
  indicatorNames?: InputMaybe<Scalars['String']>;
  marketName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  nikkeiIndustryName?: InputMaybe<Scalars['String']>;
  outstandingShares?: InputMaybe<Scalars['String']>;
  representative?: InputMaybe<Scalars['String']>;
  shareholdersMeetingDate?: InputMaybe<Scalars['String']>;
  shortName?: InputMaybe<Scalars['String']>;
  startingSalary?: InputMaybe<Scalars['String']>;
  stockPrices?: InputMaybe<StockPrices_Arr_Rel_Insert_Input>;
  telephone?: InputMaybe<Scalars['String']>;
  toshoIndustryName?: InputMaybe<Scalars['String']>;
  tradingUnit?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type StockIssues_Max_Fields = {
  __typename?: 'stockIssues_max_fields';
  accountClosingMonth?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  averageAge?: Maybe<Scalars['String']>;
  averageSalary?: Maybe<Scalars['String']>;
  capital?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  commonShares?: Maybe<Scalars['String']>;
  employees?: Maybe<Scalars['String']>;
  enName?: Maybe<Scalars['String']>;
  establishedDate?: Maybe<Scalars['String']>;
  excludingTreasurySharesCommonShares?: Maybe<Scalars['String']>;
  indicatorNames?: Maybe<Scalars['String']>;
  marketName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nikkeiIndustryName?: Maybe<Scalars['String']>;
  outstandingShares?: Maybe<Scalars['String']>;
  representative?: Maybe<Scalars['String']>;
  shareholdersMeetingDate?: Maybe<Scalars['String']>;
  shortName?: Maybe<Scalars['String']>;
  startingSalary?: Maybe<Scalars['String']>;
  telephone?: Maybe<Scalars['String']>;
  toshoIndustryName?: Maybe<Scalars['String']>;
  tradingUnit?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** aggregate min on columns */
export type StockIssues_Min_Fields = {
  __typename?: 'stockIssues_min_fields';
  accountClosingMonth?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  averageAge?: Maybe<Scalars['String']>;
  averageSalary?: Maybe<Scalars['String']>;
  capital?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['String']>;
  commonShares?: Maybe<Scalars['String']>;
  employees?: Maybe<Scalars['String']>;
  enName?: Maybe<Scalars['String']>;
  establishedDate?: Maybe<Scalars['String']>;
  excludingTreasurySharesCommonShares?: Maybe<Scalars['String']>;
  indicatorNames?: Maybe<Scalars['String']>;
  marketName?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  nikkeiIndustryName?: Maybe<Scalars['String']>;
  outstandingShares?: Maybe<Scalars['String']>;
  representative?: Maybe<Scalars['String']>;
  shareholdersMeetingDate?: Maybe<Scalars['String']>;
  shortName?: Maybe<Scalars['String']>;
  startingSalary?: Maybe<Scalars['String']>;
  telephone?: Maybe<Scalars['String']>;
  toshoIndustryName?: Maybe<Scalars['String']>;
  tradingUnit?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
};

/** response of any mutation on the table "stockIssues" */
export type StockIssues_Mutation_Response = {
  __typename?: 'stockIssues_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<StockIssues>;
};

/** input type for inserting object relation for remote table "stockIssues" */
export type StockIssues_Obj_Rel_Insert_Input = {
  data: StockIssues_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<StockIssues_On_Conflict>;
};

/** on_conflict condition type for table "stockIssues" */
export type StockIssues_On_Conflict = {
  constraint: StockIssues_Constraint;
  update_columns?: Array<StockIssues_Update_Column>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};

/** Ordering options when selecting data from "stockIssues". */
export type StockIssues_Order_By = {
  accountClosingMonth?: InputMaybe<Order_By>;
  address?: InputMaybe<Order_By>;
  articles_aggregate?: InputMaybe<Articles_Aggregate_Order_By>;
  averageAge?: InputMaybe<Order_By>;
  averageSalary?: InputMaybe<Order_By>;
  capital?: InputMaybe<Order_By>;
  code?: InputMaybe<Order_By>;
  commonShares?: InputMaybe<Order_By>;
  dailyImpacts_aggregate?: InputMaybe<DailyImpacts_Aggregate_Order_By>;
  employees?: InputMaybe<Order_By>;
  enName?: InputMaybe<Order_By>;
  establishedDate?: InputMaybe<Order_By>;
  excludingTreasurySharesCommonShares?: InputMaybe<Order_By>;
  groupEvents_aggregate?: InputMaybe<GroupEvents_Aggregate_Order_By>;
  groupListedStockIssues_aggregate?: InputMaybe<GroupListedStockIssues_Aggregate_Order_By>;
  groupStockIssues_aggregate?: InputMaybe<GroupStockIssues_Aggregate_Order_By>;
  indicatorNames?: InputMaybe<Order_By>;
  marketName?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  nikkeiIndustryName?: InputMaybe<Order_By>;
  outstandingShares?: InputMaybe<Order_By>;
  representative?: InputMaybe<Order_By>;
  shareholdersMeetingDate?: InputMaybe<Order_By>;
  shortName?: InputMaybe<Order_By>;
  startingSalary?: InputMaybe<Order_By>;
  stockPrices_aggregate?: InputMaybe<StockPrices_Aggregate_Order_By>;
  telephone?: InputMaybe<Order_By>;
  toshoIndustryName?: InputMaybe<Order_By>;
  tradingUnit?: InputMaybe<Order_By>;
  url?: InputMaybe<Order_By>;
};

/** primary key columns input for table: stockIssues */
export type StockIssues_Pk_Columns_Input = {
  code: Scalars['String'];
};

/** select columns of table "stockIssues" */
export enum StockIssues_Select_Column {
  /** column name */
  AccountClosingMonth = 'accountClosingMonth',
  /** column name */
  Address = 'address',
  /** column name */
  AverageAge = 'averageAge',
  /** column name */
  AverageSalary = 'averageSalary',
  /** column name */
  Capital = 'capital',
  /** column name */
  Code = 'code',
  /** column name */
  CommonShares = 'commonShares',
  /** column name */
  Employees = 'employees',
  /** column name */
  EnName = 'enName',
  /** column name */
  EstablishedDate = 'establishedDate',
  /** column name */
  ExcludingTreasurySharesCommonShares = 'excludingTreasurySharesCommonShares',
  /** column name */
  IndicatorNames = 'indicatorNames',
  /** column name */
  MarketName = 'marketName',
  /** column name */
  Name = 'name',
  /** column name */
  NikkeiIndustryName = 'nikkeiIndustryName',
  /** column name */
  OutstandingShares = 'outstandingShares',
  /** column name */
  Representative = 'representative',
  /** column name */
  ShareholdersMeetingDate = 'shareholdersMeetingDate',
  /** column name */
  ShortName = 'shortName',
  /** column name */
  StartingSalary = 'startingSalary',
  /** column name */
  Telephone = 'telephone',
  /** column name */
  ToshoIndustryName = 'toshoIndustryName',
  /** column name */
  TradingUnit = 'tradingUnit',
  /** column name */
  Url = 'url'
}

/** input type for updating data in table "stockIssues" */
export type StockIssues_Set_Input = {
  accountClosingMonth?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  averageAge?: InputMaybe<Scalars['String']>;
  averageSalary?: InputMaybe<Scalars['String']>;
  capital?: InputMaybe<Scalars['String']>;
  code?: InputMaybe<Scalars['String']>;
  commonShares?: InputMaybe<Scalars['String']>;
  employees?: InputMaybe<Scalars['String']>;
  enName?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['String']>;
  excludingTreasurySharesCommonShares?: InputMaybe<Scalars['String']>;
  indicatorNames?: InputMaybe<Scalars['String']>;
  marketName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  nikkeiIndustryName?: InputMaybe<Scalars['String']>;
  outstandingShares?: InputMaybe<Scalars['String']>;
  representative?: InputMaybe<Scalars['String']>;
  shareholdersMeetingDate?: InputMaybe<Scalars['String']>;
  shortName?: InputMaybe<Scalars['String']>;
  startingSalary?: InputMaybe<Scalars['String']>;
  telephone?: InputMaybe<Scalars['String']>;
  toshoIndustryName?: InputMaybe<Scalars['String']>;
  tradingUnit?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "stockIssues" */
export type StockIssues_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StockIssues_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StockIssues_Stream_Cursor_Value_Input = {
  accountClosingMonth?: InputMaybe<Scalars['String']>;
  address?: InputMaybe<Scalars['String']>;
  averageAge?: InputMaybe<Scalars['String']>;
  averageSalary?: InputMaybe<Scalars['String']>;
  capital?: InputMaybe<Scalars['String']>;
  code?: InputMaybe<Scalars['String']>;
  commonShares?: InputMaybe<Scalars['String']>;
  employees?: InputMaybe<Scalars['String']>;
  enName?: InputMaybe<Scalars['String']>;
  establishedDate?: InputMaybe<Scalars['String']>;
  excludingTreasurySharesCommonShares?: InputMaybe<Scalars['String']>;
  indicatorNames?: InputMaybe<Scalars['String']>;
  marketName?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  nikkeiIndustryName?: InputMaybe<Scalars['String']>;
  outstandingShares?: InputMaybe<Scalars['String']>;
  representative?: InputMaybe<Scalars['String']>;
  shareholdersMeetingDate?: InputMaybe<Scalars['String']>;
  shortName?: InputMaybe<Scalars['String']>;
  startingSalary?: InputMaybe<Scalars['String']>;
  telephone?: InputMaybe<Scalars['String']>;
  toshoIndustryName?: InputMaybe<Scalars['String']>;
  tradingUnit?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
};

/** update columns of table "stockIssues" */
export enum StockIssues_Update_Column {
  /** column name */
  AccountClosingMonth = 'accountClosingMonth',
  /** column name */
  Address = 'address',
  /** column name */
  AverageAge = 'averageAge',
  /** column name */
  AverageSalary = 'averageSalary',
  /** column name */
  Capital = 'capital',
  /** column name */
  Code = 'code',
  /** column name */
  CommonShares = 'commonShares',
  /** column name */
  Employees = 'employees',
  /** column name */
  EnName = 'enName',
  /** column name */
  EstablishedDate = 'establishedDate',
  /** column name */
  ExcludingTreasurySharesCommonShares = 'excludingTreasurySharesCommonShares',
  /** column name */
  IndicatorNames = 'indicatorNames',
  /** column name */
  MarketName = 'marketName',
  /** column name */
  Name = 'name',
  /** column name */
  NikkeiIndustryName = 'nikkeiIndustryName',
  /** column name */
  OutstandingShares = 'outstandingShares',
  /** column name */
  Representative = 'representative',
  /** column name */
  ShareholdersMeetingDate = 'shareholdersMeetingDate',
  /** column name */
  ShortName = 'shortName',
  /** column name */
  StartingSalary = 'startingSalary',
  /** column name */
  Telephone = 'telephone',
  /** column name */
  ToshoIndustryName = 'toshoIndustryName',
  /** column name */
  TradingUnit = 'tradingUnit',
  /** column name */
  Url = 'url'
}

export type StockIssues_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StockIssues_Set_Input>;
  where: StockIssues_Bool_Exp;
};

/** columns and relationships of "stockPrices" */
export type StockPrices = {
  __typename?: 'stockPrices';
  close?: Maybe<Scalars['float8']>;
  date: Scalars['date'];
  high?: Maybe<Scalars['float8']>;
  low?: Maybe<Scalars['float8']>;
  open?: Maybe<Scalars['float8']>;
  /** An object relationship */
  stockIssue?: Maybe<StockIssues>;
  stockIssueCode: Scalars['String'];
  value: Scalars['float8'];
  volume: Scalars['float8'];
};

/** aggregated selection of "stockPrices" */
export type StockPrices_Aggregate = {
  __typename?: 'stockPrices_aggregate';
  aggregate?: Maybe<StockPrices_Aggregate_Fields>;
  nodes: Array<StockPrices>;
};

export type StockPrices_Aggregate_Bool_Exp = {
  avg?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Avg>;
  corr?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Corr>;
  count?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Count>;
  covar_samp?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Covar_Samp>;
  max?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Max>;
  min?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Min>;
  stddev_samp?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Stddev_Samp>;
  sum?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Sum>;
  var_samp?: InputMaybe<StockPrices_Aggregate_Bool_Exp_Var_Samp>;
};

export type StockPrices_Aggregate_Bool_Exp_Avg = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Corr = {
  arguments: StockPrices_Aggregate_Bool_Exp_Corr_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Corr_Arguments = {
  X: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
  Y: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns;
};

export type StockPrices_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<StockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Covar_Samp = {
  arguments: StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments = {
  X: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
  Y: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns;
};

export type StockPrices_Aggregate_Bool_Exp_Max = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Min = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Stddev_Samp = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Sum = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

export type StockPrices_Aggregate_Bool_Exp_Var_Samp = {
  arguments: StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<StockPrices_Bool_Exp>;
  predicate: Float8_Comparison_Exp;
};

/** aggregate fields of "stockPrices" */
export type StockPrices_Aggregate_Fields = {
  __typename?: 'stockPrices_aggregate_fields';
  avg?: Maybe<StockPrices_Avg_Fields>;
  count: Scalars['Int'];
  max?: Maybe<StockPrices_Max_Fields>;
  min?: Maybe<StockPrices_Min_Fields>;
  stddev?: Maybe<StockPrices_Stddev_Fields>;
  stddev_pop?: Maybe<StockPrices_Stddev_Pop_Fields>;
  stddev_samp?: Maybe<StockPrices_Stddev_Samp_Fields>;
  sum?: Maybe<StockPrices_Sum_Fields>;
  var_pop?: Maybe<StockPrices_Var_Pop_Fields>;
  var_samp?: Maybe<StockPrices_Var_Samp_Fields>;
  variance?: Maybe<StockPrices_Variance_Fields>;
};


/** aggregate fields of "stockPrices" */
export type StockPrices_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<StockPrices_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "stockPrices" */
export type StockPrices_Aggregate_Order_By = {
  avg?: InputMaybe<StockPrices_Avg_Order_By>;
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<StockPrices_Max_Order_By>;
  min?: InputMaybe<StockPrices_Min_Order_By>;
  stddev?: InputMaybe<StockPrices_Stddev_Order_By>;
  stddev_pop?: InputMaybe<StockPrices_Stddev_Pop_Order_By>;
  stddev_samp?: InputMaybe<StockPrices_Stddev_Samp_Order_By>;
  sum?: InputMaybe<StockPrices_Sum_Order_By>;
  var_pop?: InputMaybe<StockPrices_Var_Pop_Order_By>;
  var_samp?: InputMaybe<StockPrices_Var_Samp_Order_By>;
  variance?: InputMaybe<StockPrices_Variance_Order_By>;
};

/** input type for inserting array relation for remote table "stockPrices" */
export type StockPrices_Arr_Rel_Insert_Input = {
  data: Array<StockPrices_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<StockPrices_On_Conflict>;
};

/** aggregate avg on columns */
export type StockPrices_Avg_Fields = {
  __typename?: 'stockPrices_avg_fields';
  close?: Maybe<Scalars['Float']>;
  high?: Maybe<Scalars['Float']>;
  low?: Maybe<Scalars['Float']>;
  open?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
  volume?: Maybe<Scalars['Float']>;
};

/** order by avg() on columns of table "stockPrices" */
export type StockPrices_Avg_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** Boolean expression to filter rows from the table "stockPrices". All fields are combined with a logical 'AND'. */
export type StockPrices_Bool_Exp = {
  _and?: InputMaybe<Array<StockPrices_Bool_Exp>>;
  _not?: InputMaybe<StockPrices_Bool_Exp>;
  _or?: InputMaybe<Array<StockPrices_Bool_Exp>>;
  close?: InputMaybe<Float8_Comparison_Exp>;
  date?: InputMaybe<Date_Comparison_Exp>;
  high?: InputMaybe<Float8_Comparison_Exp>;
  low?: InputMaybe<Float8_Comparison_Exp>;
  open?: InputMaybe<Float8_Comparison_Exp>;
  stockIssue?: InputMaybe<StockIssues_Bool_Exp>;
  stockIssueCode?: InputMaybe<String_Comparison_Exp>;
  value?: InputMaybe<Float8_Comparison_Exp>;
  volume?: InputMaybe<Float8_Comparison_Exp>;
};

/** unique or primary key constraints on table "stockPrices" */
export enum StockPrices_Constraint {
  /** unique or primary key constraint on columns "date", "stockIssueCode" */
  StockPricesPkey = 'stockPrices_pkey'
}

/** input type for incrementing numeric columns in table "stockPrices" */
export type StockPrices_Inc_Input = {
  close?: InputMaybe<Scalars['float8']>;
  high?: InputMaybe<Scalars['float8']>;
  low?: InputMaybe<Scalars['float8']>;
  open?: InputMaybe<Scalars['float8']>;
  value?: InputMaybe<Scalars['float8']>;
  volume?: InputMaybe<Scalars['float8']>;
};

/** input type for inserting data into table "stockPrices" */
export type StockPrices_Insert_Input = {
  close?: InputMaybe<Scalars['float8']>;
  date?: InputMaybe<Scalars['date']>;
  high?: InputMaybe<Scalars['float8']>;
  low?: InputMaybe<Scalars['float8']>;
  open?: InputMaybe<Scalars['float8']>;
  stockIssue?: InputMaybe<StockIssues_Obj_Rel_Insert_Input>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['float8']>;
  volume?: InputMaybe<Scalars['float8']>;
};

/** aggregate max on columns */
export type StockPrices_Max_Fields = {
  __typename?: 'stockPrices_max_fields';
  close?: Maybe<Scalars['float8']>;
  date?: Maybe<Scalars['date']>;
  high?: Maybe<Scalars['float8']>;
  low?: Maybe<Scalars['float8']>;
  open?: Maybe<Scalars['float8']>;
  stockIssueCode?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['float8']>;
  volume?: Maybe<Scalars['float8']>;
};

/** order by max() on columns of table "stockPrices" */
export type StockPrices_Max_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type StockPrices_Min_Fields = {
  __typename?: 'stockPrices_min_fields';
  close?: Maybe<Scalars['float8']>;
  date?: Maybe<Scalars['date']>;
  high?: Maybe<Scalars['float8']>;
  low?: Maybe<Scalars['float8']>;
  open?: Maybe<Scalars['float8']>;
  stockIssueCode?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['float8']>;
  volume?: Maybe<Scalars['float8']>;
};

/** order by min() on columns of table "stockPrices" */
export type StockPrices_Min_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "stockPrices" */
export type StockPrices_Mutation_Response = {
  __typename?: 'stockPrices_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<StockPrices>;
};

/** on_conflict condition type for table "stockPrices" */
export type StockPrices_On_Conflict = {
  constraint: StockPrices_Constraint;
  update_columns?: Array<StockPrices_Update_Column>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};

/** Ordering options when selecting data from "stockPrices". */
export type StockPrices_Order_By = {
  close?: InputMaybe<Order_By>;
  date?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  stockIssue?: InputMaybe<StockIssues_Order_By>;
  stockIssueCode?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** primary key columns input for table: stockPrices */
export type StockPrices_Pk_Columns_Input = {
  date: Scalars['date'];
  stockIssueCode: Scalars['String'];
};

/** select columns of table "stockPrices" */
export enum StockPrices_Select_Column {
  /** column name */
  Close = 'close',
  /** column name */
  Date = 'date',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  StockIssueCode = 'stockIssueCode',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_avg_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Avg_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_corr_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Corr_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_covar_samp_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Covar_Samp_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_max_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Max_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_min_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Min_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_stddev_samp_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Stddev_Samp_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_sum_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Sum_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** select "stockPrices_aggregate_bool_exp_var_samp_arguments_columns" columns of table "stockPrices" */
export enum StockPrices_Select_Column_StockPrices_Aggregate_Bool_Exp_Var_Samp_Arguments_Columns {
  /** column name */
  Close = 'close',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

/** input type for updating data in table "stockPrices" */
export type StockPrices_Set_Input = {
  close?: InputMaybe<Scalars['float8']>;
  date?: InputMaybe<Scalars['date']>;
  high?: InputMaybe<Scalars['float8']>;
  low?: InputMaybe<Scalars['float8']>;
  open?: InputMaybe<Scalars['float8']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['float8']>;
  volume?: InputMaybe<Scalars['float8']>;
};

/** aggregate stddev on columns */
export type StockPrices_Stddev_Fields = {
  __typename?: 'stockPrices_stddev_fields';
  close?: Maybe<Scalars['Float']>;
  high?: Maybe<Scalars['Float']>;
  low?: Maybe<Scalars['Float']>;
  open?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
  volume?: Maybe<Scalars['Float']>;
};

/** order by stddev() on columns of table "stockPrices" */
export type StockPrices_Stddev_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate stddev_pop on columns */
export type StockPrices_Stddev_Pop_Fields = {
  __typename?: 'stockPrices_stddev_pop_fields';
  close?: Maybe<Scalars['Float']>;
  high?: Maybe<Scalars['Float']>;
  low?: Maybe<Scalars['Float']>;
  open?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
  volume?: Maybe<Scalars['Float']>;
};

/** order by stddev_pop() on columns of table "stockPrices" */
export type StockPrices_Stddev_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate stddev_samp on columns */
export type StockPrices_Stddev_Samp_Fields = {
  __typename?: 'stockPrices_stddev_samp_fields';
  close?: Maybe<Scalars['Float']>;
  high?: Maybe<Scalars['Float']>;
  low?: Maybe<Scalars['Float']>;
  open?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
  volume?: Maybe<Scalars['Float']>;
};

/** order by stddev_samp() on columns of table "stockPrices" */
export type StockPrices_Stddev_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** Streaming cursor of the table "stockPrices" */
export type StockPrices_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: StockPrices_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type StockPrices_Stream_Cursor_Value_Input = {
  close?: InputMaybe<Scalars['float8']>;
  date?: InputMaybe<Scalars['date']>;
  high?: InputMaybe<Scalars['float8']>;
  low?: InputMaybe<Scalars['float8']>;
  open?: InputMaybe<Scalars['float8']>;
  stockIssueCode?: InputMaybe<Scalars['String']>;
  value?: InputMaybe<Scalars['float8']>;
  volume?: InputMaybe<Scalars['float8']>;
};

/** aggregate sum on columns */
export type StockPrices_Sum_Fields = {
  __typename?: 'stockPrices_sum_fields';
  close?: Maybe<Scalars['float8']>;
  high?: Maybe<Scalars['float8']>;
  low?: Maybe<Scalars['float8']>;
  open?: Maybe<Scalars['float8']>;
  value?: Maybe<Scalars['float8']>;
  volume?: Maybe<Scalars['float8']>;
};

/** order by sum() on columns of table "stockPrices" */
export type StockPrices_Sum_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** update columns of table "stockPrices" */
export enum StockPrices_Update_Column {
  /** column name */
  Close = 'close',
  /** column name */
  Date = 'date',
  /** column name */
  High = 'high',
  /** column name */
  Low = 'low',
  /** column name */
  Open = 'open',
  /** column name */
  StockIssueCode = 'stockIssueCode',
  /** column name */
  Value = 'value',
  /** column name */
  Volume = 'volume'
}

export type StockPrices_Updates = {
  /** increments the numeric columns with given value of the filtered values */
  _inc?: InputMaybe<StockPrices_Inc_Input>;
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<StockPrices_Set_Input>;
  where: StockPrices_Bool_Exp;
};

/** aggregate var_pop on columns */
export type StockPrices_Var_Pop_Fields = {
  __typename?: 'stockPrices_var_pop_fields';
  close?: Maybe<Scalars['Float']>;
  high?: Maybe<Scalars['Float']>;
  low?: Maybe<Scalars['Float']>;
  open?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
  volume?: Maybe<Scalars['Float']>;
};

/** order by var_pop() on columns of table "stockPrices" */
export type StockPrices_Var_Pop_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate var_samp on columns */
export type StockPrices_Var_Samp_Fields = {
  __typename?: 'stockPrices_var_samp_fields';
  close?: Maybe<Scalars['Float']>;
  high?: Maybe<Scalars['Float']>;
  low?: Maybe<Scalars['Float']>;
  open?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
  volume?: Maybe<Scalars['Float']>;
};

/** order by var_samp() on columns of table "stockPrices" */
export type StockPrices_Var_Samp_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

/** aggregate variance on columns */
export type StockPrices_Variance_Fields = {
  __typename?: 'stockPrices_variance_fields';
  close?: Maybe<Scalars['Float']>;
  high?: Maybe<Scalars['Float']>;
  low?: Maybe<Scalars['Float']>;
  open?: Maybe<Scalars['Float']>;
  value?: Maybe<Scalars['Float']>;
  volume?: Maybe<Scalars['Float']>;
};

/** order by variance() on columns of table "stockPrices" */
export type StockPrices_Variance_Order_By = {
  close?: InputMaybe<Order_By>;
  high?: InputMaybe<Order_By>;
  low?: InputMaybe<Order_By>;
  open?: InputMaybe<Order_By>;
  value?: InputMaybe<Order_By>;
  volume?: InputMaybe<Order_By>;
};

export type Subscription_Root = {
  __typename?: 'subscription_root';
  /** An array relationship */
  articleContentDecreaseKeywords: Array<ArticleContentDecreaseKeywords>;
  /** An aggregate relationship */
  articleContentDecreaseKeywords_aggregate: ArticleContentDecreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentDecreaseKeywords" using primary key columns */
  articleContentDecreaseKeywords_by_pk?: Maybe<ArticleContentDecreaseKeywords>;
  /** fetch data from the table in a streaming manner: "articleContentDecreaseKeywords" */
  articleContentDecreaseKeywords_stream: Array<ArticleContentDecreaseKeywords>;
  /** An array relationship */
  articleContentIncreaseKeywords: Array<ArticleContentIncreaseKeywords>;
  /** An aggregate relationship */
  articleContentIncreaseKeywords_aggregate: ArticleContentIncreaseKeywords_Aggregate;
  /** fetch data from the table: "articleContentIncreaseKeywords" using primary key columns */
  articleContentIncreaseKeywords_by_pk?: Maybe<ArticleContentIncreaseKeywords>;
  /** fetch data from the table in a streaming manner: "articleContentIncreaseKeywords" */
  articleContentIncreaseKeywords_stream: Array<ArticleContentIncreaseKeywords>;
  /** An array relationship */
  articleContentKeywords: Array<ArticleContentKeywords>;
  /** An aggregate relationship */
  articleContentKeywords_aggregate: ArticleContentKeywords_Aggregate;
  /** fetch data from the table: "articleContentKeywords" using primary key columns */
  articleContentKeywords_by_pk?: Maybe<ArticleContentKeywords>;
  /** fetch data from the table in a streaming manner: "articleContentKeywords" */
  articleContentKeywords_stream: Array<ArticleContentKeywords>;
  /** fetch data from the table: "articleContents" */
  articleContents: Array<ArticleContents>;
  /** fetch aggregated fields from the table: "articleContents" */
  articleContents_aggregate: ArticleContents_Aggregate;
  /** fetch data from the table: "articleContents" using primary key columns */
  articleContents_by_pk?: Maybe<ArticleContents>;
  /** fetch data from the table in a streaming manner: "articleContents" */
  articleContents_stream: Array<ArticleContents>;
  /** fetch data from the table: "articleSources" */
  articleSources: Array<ArticleSources>;
  /** fetch aggregated fields from the table: "articleSources" */
  articleSources_aggregate: ArticleSources_Aggregate;
  /** fetch data from the table: "articleSources" using primary key columns */
  articleSources_by_pk?: Maybe<ArticleSources>;
  /** fetch data from the table in a streaming manner: "articleSources" */
  articleSources_stream: Array<ArticleSources>;
  /** An array relationship */
  articles: Array<Articles>;
  /** An aggregate relationship */
  articles_aggregate: Articles_Aggregate;
  /** fetch data from the table: "articles" using primary key columns */
  articles_by_pk?: Maybe<Articles>;
  /** fetch data from the table in a streaming manner: "articles" */
  articles_stream: Array<Articles>;
  /** An array relationship */
  contracts: Array<Contracts>;
  /** An aggregate relationship */
  contracts_aggregate: Contracts_Aggregate;
  /** fetch data from the table: "contracts" using primary key columns */
  contracts_by_pk?: Maybe<Contracts>;
  /** fetch data from the table in a streaming manner: "contracts" */
  contracts_stream: Array<Contracts>;
  /** An array relationship */
  dailyImpacts: Array<DailyImpacts>;
  /** An aggregate relationship */
  dailyImpacts_aggregate: DailyImpacts_Aggregate;
  /** fetch data from the table: "dailyImpacts" using primary key columns */
  dailyImpacts_by_pk?: Maybe<DailyImpacts>;
  /** fetch data from the table in a streaming manner: "dailyImpacts" */
  dailyImpacts_stream: Array<DailyImpacts>;
  /** An array relationship */
  eventTypeTranslations: Array<EventTypeTranslations>;
  /** An aggregate relationship */
  eventTypeTranslations_aggregate: EventTypeTranslations_Aggregate;
  /** fetch data from the table: "eventTypeTranslations" using primary key columns */
  eventTypeTranslations_by_pk?: Maybe<EventTypeTranslations>;
  /** fetch data from the table in a streaming manner: "eventTypeTranslations" */
  eventTypeTranslations_stream: Array<EventTypeTranslations>;
  /** fetch data from the table: "eventTypes" */
  eventTypes: Array<EventTypes>;
  /** fetch aggregated fields from the table: "eventTypes" */
  eventTypes_aggregate: EventTypes_Aggregate;
  /** fetch data from the table: "eventTypes" using primary key columns */
  eventTypes_by_pk?: Maybe<EventTypes>;
  /** fetch data from the table in a streaming manner: "eventTypes" */
  eventTypes_stream: Array<EventTypes>;
  /** fetch data from the table: "groupContents" */
  groupContents: Array<GroupContents>;
  /** fetch aggregated fields from the table: "groupContents" */
  groupContents_aggregate: GroupContents_Aggregate;
  /** fetch data from the table: "groupContents" using primary key columns */
  groupContents_by_pk?: Maybe<GroupContents>;
  /** fetch data from the table in a streaming manner: "groupContents" */
  groupContents_stream: Array<GroupContents>;
  /** An array relationship */
  groupEvents: Array<GroupEvents>;
  /** An aggregate relationship */
  groupEvents_aggregate: GroupEvents_Aggregate;
  /** fetch data from the table: "groupEvents" using primary key columns */
  groupEvents_by_pk?: Maybe<GroupEvents>;
  /** fetch data from the table in a streaming manner: "groupEvents" */
  groupEvents_stream: Array<GroupEvents>;
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  /** fetch data from the table: "groupInvitations" using primary key columns */
  groupInvitations_by_pk?: Maybe<GroupInvitations>;
  /** fetch data from the table in a streaming manner: "groupInvitations" */
  groupInvitations_stream: Array<GroupInvitations>;
  /** An array relationship */
  groupListedStockIssues: Array<GroupListedStockIssues>;
  /** An aggregate relationship */
  groupListedStockIssues_aggregate: GroupListedStockIssues_Aggregate;
  /** fetch data from the table: "groupListedStockIssues" using primary key columns */
  groupListedStockIssues_by_pk?: Maybe<GroupListedStockIssues>;
  /** fetch data from the table in a streaming manner: "groupListedStockIssues" */
  groupListedStockIssues_stream: Array<GroupListedStockIssues>;
  /** fetch data from the table: "groupSettlementDates" */
  groupSettlementDates: Array<GroupSettlementDates>;
  /** fetch aggregated fields from the table: "groupSettlementDates" */
  groupSettlementDates_aggregate: GroupSettlementDates_Aggregate;
  /** fetch data from the table: "groupSettlementDates" using primary key columns */
  groupSettlementDates_by_pk?: Maybe<GroupSettlementDates>;
  /** fetch data from the table in a streaming manner: "groupSettlementDates" */
  groupSettlementDates_stream: Array<GroupSettlementDates>;
  /** An array relationship */
  groupStockIssueLists: Array<GroupStockIssueLists>;
  /** An aggregate relationship */
  groupStockIssueLists_aggregate: GroupStockIssueLists_Aggregate;
  /** fetch data from the table: "groupStockIssueLists" using primary key columns */
  groupStockIssueLists_by_pk?: Maybe<GroupStockIssueLists>;
  /** fetch data from the table in a streaming manner: "groupStockIssueLists" */
  groupStockIssueLists_stream: Array<GroupStockIssueLists>;
  /** An array relationship */
  groupStockIssues: Array<GroupStockIssues>;
  /** An aggregate relationship */
  groupStockIssues_aggregate: GroupStockIssues_Aggregate;
  /** fetch data from the table: "groupStockIssues" using primary key columns */
  groupStockIssues_by_pk?: Maybe<GroupStockIssues>;
  /** fetch data from the table in a streaming manner: "groupStockIssues" */
  groupStockIssues_stream: Array<GroupStockIssues>;
  /** An array relationship */
  groupTypeAssignments: Array<GroupTypeAssignments>;
  /** An aggregate relationship */
  groupTypeAssignments_aggregate: GroupTypeAssignments_Aggregate;
  /** fetch data from the table: "groupTypeAssignments" using primary key columns */
  groupTypeAssignments_by_pk?: Maybe<GroupTypeAssignments>;
  /** fetch data from the table in a streaming manner: "groupTypeAssignments" */
  groupTypeAssignments_stream: Array<GroupTypeAssignments>;
  /** An array relationship */
  groupTypeTranslations: Array<GroupTypeTranslations>;
  /** An aggregate relationship */
  groupTypeTranslations_aggregate: GroupTypeTranslations_Aggregate;
  /** fetch data from the table: "groupTypeTranslations" using primary key columns */
  groupTypeTranslations_by_pk?: Maybe<GroupTypeTranslations>;
  /** fetch data from the table in a streaming manner: "groupTypeTranslations" */
  groupTypeTranslations_stream: Array<GroupTypeTranslations>;
  /** fetch data from the table: "groupTypes" */
  groupTypes: Array<GroupTypes>;
  /** fetch aggregated fields from the table: "groupTypes" */
  groupTypes_aggregate: GroupTypes_Aggregate;
  /** fetch data from the table: "groupTypes" using primary key columns */
  groupTypes_by_pk?: Maybe<GroupTypes>;
  /** fetch data from the table in a streaming manner: "groupTypes" */
  groupTypes_stream: Array<GroupTypes>;
  /** fetch data from the table: "groups" */
  groups: Array<Groups>;
  /** fetch aggregated fields from the table: "groups" */
  groups_aggregate: Groups_Aggregate;
  /** fetch data from the table: "groups" using primary key columns */
  groups_by_pk?: Maybe<Groups>;
  /** fetch data from the table in a streaming manner: "groups" */
  groups_stream: Array<Groups>;
  /** fetch data from the table: "inactiveGroups" */
  inactiveGroups: Array<InactiveGroups>;
  /** fetch aggregated fields from the table: "inactiveGroups" */
  inactiveGroups_aggregate: InactiveGroups_Aggregate;
  /** fetch data from the table: "inactiveGroups" using primary key columns */
  inactiveGroups_by_pk?: Maybe<InactiveGroups>;
  /** fetch data from the table in a streaming manner: "inactiveGroups" */
  inactiveGroups_stream: Array<InactiveGroups>;
  /** fetch data from the table: "languages" */
  languages: Array<Languages>;
  /** fetch aggregated fields from the table: "languages" */
  languages_aggregate: Languages_Aggregate;
  /** fetch data from the table: "languages" using primary key columns */
  languages_by_pk?: Maybe<Languages>;
  /** fetch data from the table in a streaming manner: "languages" */
  languages_stream: Array<Languages>;
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  /** fetch data from the table: "memberships" using primary key columns */
  memberships_by_pk?: Maybe<Memberships>;
  /** fetch data from the table in a streaming manner: "memberships" */
  memberships_stream: Array<Memberships>;
  /** fetch data from the table: "mlModels" */
  mlModels: Array<MlModels>;
  /** fetch aggregated fields from the table: "mlModels" */
  mlModels_aggregate: MlModels_Aggregate;
  /** fetch data from the table: "mlModels" using primary key columns */
  mlModels_by_pk?: Maybe<MlModels>;
  /** fetch data from the table in a streaming manner: "mlModels" */
  mlModels_stream: Array<MlModels>;
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** fetch data from the table: "ownerships" using primary key columns */
  ownerships_by_pk?: Maybe<Ownerships>;
  /** fetch data from the table in a streaming manner: "ownerships" */
  ownerships_stream: Array<Ownerships>;
  /** An array relationship */
  planTranslations: Array<PlanTranslations>;
  /** An aggregate relationship */
  planTranslations_aggregate: PlanTranslations_Aggregate;
  /** fetch data from the table: "planTranslations" using primary key columns */
  planTranslations_by_pk?: Maybe<PlanTranslations>;
  /** fetch data from the table in a streaming manner: "planTranslations" */
  planTranslations_stream: Array<PlanTranslations>;
  /** fetch data from the table: "plans" */
  plans: Array<Plans>;
  /** fetch aggregated fields from the table: "plans" */
  plans_aggregate: Plans_Aggregate;
  /** fetch data from the table: "plans" using primary key columns */
  plans_by_pk?: Maybe<Plans>;
  /** fetch data from the table in a streaming manner: "plans" */
  plans_stream: Array<Plans>;
  /** fetch data from the table: "staffInvitations" */
  staffInvitations: Array<StaffInvitations>;
  /** fetch aggregated fields from the table: "staffInvitations" */
  staffInvitations_aggregate: StaffInvitations_Aggregate;
  /** fetch data from the table: "staffInvitations" using primary key columns */
  staffInvitations_by_pk?: Maybe<StaffInvitations>;
  /** fetch data from the table in a streaming manner: "staffInvitations" */
  staffInvitations_stream: Array<StaffInvitations>;
  /** fetch data from the table: "staffs" */
  staffs: Array<Staffs>;
  /** fetch aggregated fields from the table: "staffs" */
  staffs_aggregate: Staffs_Aggregate;
  /** fetch data from the table: "staffs" using primary key columns */
  staffs_by_pk?: Maybe<Staffs>;
  /** fetch data from the table in a streaming manner: "staffs" */
  staffs_stream: Array<Staffs>;
  /** fetch data from the table: "stockIssues" */
  stockIssues: Array<StockIssues>;
  /** fetch aggregated fields from the table: "stockIssues" */
  stockIssues_aggregate: StockIssues_Aggregate;
  /** fetch data from the table: "stockIssues" using primary key columns */
  stockIssues_by_pk?: Maybe<StockIssues>;
  /** fetch data from the table in a streaming manner: "stockIssues" */
  stockIssues_stream: Array<StockIssues>;
  /** An array relationship */
  stockPrices: Array<StockPrices>;
  /** An aggregate relationship */
  stockPrices_aggregate: StockPrices_Aggregate;
  /** fetch data from the table: "stockPrices" using primary key columns */
  stockPrices_by_pk?: Maybe<StockPrices>;
  /** fetch data from the table in a streaming manner: "stockPrices" */
  stockPrices_stream: Array<StockPrices>;
  /** fetch data from the table: "users" */
  users: Array<Users>;
  /** fetch aggregated fields from the table: "users" */
  users_aggregate: Users_Aggregate;
  /** fetch data from the table: "users" using primary key columns */
  users_by_pk?: Maybe<Users>;
  /** fetch data from the table in a streaming manner: "users" */
  users_stream: Array<Users>;
};


export type Subscription_RootArticleContentDecreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentDecreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentDecreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentDecreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentDecreaseKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


export type Subscription_RootArticleContentDecreaseKeywords_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<ArticleContentDecreaseKeywords_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContentDecreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentIncreaseKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentIncreaseKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentIncreaseKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentIncreaseKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentIncreaseKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


export type Subscription_RootArticleContentIncreaseKeywords_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<ArticleContentIncreaseKeywords_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContentIncreaseKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentKeywordsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentKeywords_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContentKeywords_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContentKeywords_Order_By>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentKeywords_By_PkArgs = {
  id: Scalars['uuid'];
  text: Scalars['String'];
};


export type Subscription_RootArticleContentKeywords_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<ArticleContentKeywords_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContentKeywords_Bool_Exp>;
};


export type Subscription_RootArticleContentsArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Subscription_RootArticleContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleContents_Order_By>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Subscription_RootArticleContents_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootArticleContents_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<ArticleContents_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleContents_Bool_Exp>;
};


export type Subscription_RootArticleSourcesArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Subscription_RootArticleSources_AggregateArgs = {
  distinct_on?: InputMaybe<Array<ArticleSources_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<ArticleSources_Order_By>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Subscription_RootArticleSources_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootArticleSources_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<ArticleSources_Stream_Cursor_Input>>;
  where?: InputMaybe<ArticleSources_Bool_Exp>;
};


export type Subscription_RootArticlesArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Subscription_RootArticles_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Articles_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Articles_Order_By>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Subscription_RootArticles_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootArticles_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Articles_Stream_Cursor_Input>>;
  where?: InputMaybe<Articles_Bool_Exp>;
};


export type Subscription_RootContractsArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Subscription_RootContracts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Contracts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Contracts_Order_By>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Subscription_RootContracts_By_PkArgs = {
  groupId: Scalars['uuid'];
};


export type Subscription_RootContracts_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Contracts_Stream_Cursor_Input>>;
  where?: InputMaybe<Contracts_Bool_Exp>;
};


export type Subscription_RootDailyImpactsArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Subscription_RootDailyImpacts_AggregateArgs = {
  distinct_on?: InputMaybe<Array<DailyImpacts_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<DailyImpacts_Order_By>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Subscription_RootDailyImpacts_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootDailyImpacts_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<DailyImpacts_Stream_Cursor_Input>>;
  where?: InputMaybe<DailyImpacts_Bool_Exp>;
};


export type Subscription_RootEventTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Subscription_RootEventTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypeTranslations_Order_By>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Subscription_RootEventTypeTranslations_By_PkArgs = {
  eventTypeCode: EventTypes_Enum;
  languageCode: Languages_Enum;
};


export type Subscription_RootEventTypeTranslations_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<EventTypeTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<EventTypeTranslations_Bool_Exp>;
};


export type Subscription_RootEventTypesArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Subscription_RootEventTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<EventTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<EventTypes_Order_By>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Subscription_RootEventTypes_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootEventTypes_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<EventTypes_Stream_Cursor_Input>>;
  where?: InputMaybe<EventTypes_Bool_Exp>;
};


export type Subscription_RootGroupContentsArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Subscription_RootGroupContents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupContents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupContents_Order_By>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Subscription_RootGroupContents_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootGroupContents_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupContents_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupContents_Bool_Exp>;
};


export type Subscription_RootGroupEventsArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Subscription_RootGroupEvents_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupEvents_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupEvents_Order_By>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Subscription_RootGroupEvents_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootGroupEvents_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupEvents_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupEvents_Bool_Exp>;
};


export type Subscription_RootGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Subscription_RootGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Subscription_RootGroupInvitations_By_PkArgs = {
  email: Scalars['String'];
  groupId: Scalars['uuid'];
};


export type Subscription_RootGroupInvitations_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupInvitations_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


export type Subscription_RootGroupListedStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupListedStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupListedStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupListedStockIssues_Order_By>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupListedStockIssues_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootGroupListedStockIssues_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupListedStockIssues_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupListedStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupSettlementDatesArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Subscription_RootGroupSettlementDates_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupSettlementDates_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupSettlementDates_Order_By>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Subscription_RootGroupSettlementDates_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootGroupSettlementDates_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupSettlementDates_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupSettlementDates_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueListsArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueLists_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssueLists_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssueLists_Order_By>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Subscription_RootGroupStockIssueLists_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootGroupStockIssueLists_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupStockIssueLists_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
};


export type Subscription_RootGroupStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupStockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupStockIssues_Order_By>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupStockIssues_By_PkArgs = {
  groupId: Scalars['uuid'];
};


export type Subscription_RootGroupStockIssues_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupStockIssues_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupStockIssues_Bool_Exp>;
};


export type Subscription_RootGroupTypeAssignmentsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Subscription_RootGroupTypeAssignments_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeAssignments_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeAssignments_Order_By>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Subscription_RootGroupTypeAssignments_By_PkArgs = {
  groupId: Scalars['uuid'];
};


export type Subscription_RootGroupTypeAssignments_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupTypeAssignments_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupTypeAssignments_Bool_Exp>;
};


export type Subscription_RootGroupTypeTranslationsArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Subscription_RootGroupTypeTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypeTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypeTranslations_Order_By>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Subscription_RootGroupTypeTranslations_By_PkArgs = {
  groupTypeCode: Scalars['String'];
  languageCode: Languages_Enum;
};


export type Subscription_RootGroupTypeTranslations_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupTypeTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupTypeTranslations_Bool_Exp>;
};


export type Subscription_RootGroupTypesArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Subscription_RootGroupTypes_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupTypes_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupTypes_Order_By>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Subscription_RootGroupTypes_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootGroupTypes_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<GroupTypes_Stream_Cursor_Input>>;
  where?: InputMaybe<GroupTypes_Bool_Exp>;
};


export type Subscription_RootGroupsArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Subscription_RootGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Groups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Groups_Order_By>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Subscription_RootGroups_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootGroups_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Groups_Stream_Cursor_Input>>;
  where?: InputMaybe<Groups_Bool_Exp>;
};


export type Subscription_RootInactiveGroupsArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Subscription_RootInactiveGroups_AggregateArgs = {
  distinct_on?: InputMaybe<Array<InactiveGroups_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<InactiveGroups_Order_By>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Subscription_RootInactiveGroups_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootInactiveGroups_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<InactiveGroups_Stream_Cursor_Input>>;
  where?: InputMaybe<InactiveGroups_Bool_Exp>;
};


export type Subscription_RootLanguagesArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Subscription_RootLanguages_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Languages_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Languages_Order_By>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Subscription_RootLanguages_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootLanguages_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Languages_Stream_Cursor_Input>>;
  where?: InputMaybe<Languages_Bool_Exp>;
};


export type Subscription_RootMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Subscription_RootMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Subscription_RootMemberships_By_PkArgs = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};


export type Subscription_RootMemberships_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Memberships_Stream_Cursor_Input>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


export type Subscription_RootMlModelsArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Subscription_RootMlModels_AggregateArgs = {
  distinct_on?: InputMaybe<Array<MlModels_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<MlModels_Order_By>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Subscription_RootMlModels_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootMlModels_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<MlModels_Stream_Cursor_Input>>;
  where?: InputMaybe<MlModels_Bool_Exp>;
};


export type Subscription_RootOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Subscription_RootOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Subscription_RootOwnerships_By_PkArgs = {
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
};


export type Subscription_RootOwnerships_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Ownerships_Stream_Cursor_Input>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


export type Subscription_RootPlanTranslationsArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Subscription_RootPlanTranslations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<PlanTranslations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<PlanTranslations_Order_By>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Subscription_RootPlanTranslations_By_PkArgs = {
  languageCode: Languages_Enum;
  planCode: Scalars['String'];
};


export type Subscription_RootPlanTranslations_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<PlanTranslations_Stream_Cursor_Input>>;
  where?: InputMaybe<PlanTranslations_Bool_Exp>;
};


export type Subscription_RootPlansArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Subscription_RootPlans_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Plans_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Plans_Order_By>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Subscription_RootPlans_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootPlans_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Plans_Stream_Cursor_Input>>;
  where?: InputMaybe<Plans_Bool_Exp>;
};


export type Subscription_RootStaffInvitationsArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Subscription_RootStaffInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StaffInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StaffInvitations_Order_By>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Subscription_RootStaffInvitations_By_PkArgs = {
  email: Scalars['String'];
};


export type Subscription_RootStaffInvitations_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<StaffInvitations_Stream_Cursor_Input>>;
  where?: InputMaybe<StaffInvitations_Bool_Exp>;
};


export type Subscription_RootStaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Subscription_RootStaffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Subscription_RootStaffs_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootStaffs_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Staffs_Stream_Cursor_Input>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


export type Subscription_RootStockIssuesArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Subscription_RootStockIssues_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockIssues_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockIssues_Order_By>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Subscription_RootStockIssues_By_PkArgs = {
  code: Scalars['String'];
};


export type Subscription_RootStockIssues_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<StockIssues_Stream_Cursor_Input>>;
  where?: InputMaybe<StockIssues_Bool_Exp>;
};


export type Subscription_RootStockPricesArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Subscription_RootStockPrices_AggregateArgs = {
  distinct_on?: InputMaybe<Array<StockPrices_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<StockPrices_Order_By>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Subscription_RootStockPrices_By_PkArgs = {
  date: Scalars['date'];
  stockIssueCode: Scalars['String'];
};


export type Subscription_RootStockPrices_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<StockPrices_Stream_Cursor_Input>>;
  where?: InputMaybe<StockPrices_Bool_Exp>;
};


export type Subscription_RootUsersArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Subscription_RootUsers_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Users_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Users_Order_By>>;
  where?: InputMaybe<Users_Bool_Exp>;
};


export type Subscription_RootUsers_By_PkArgs = {
  id: Scalars['uuid'];
};


export type Subscription_RootUsers_StreamArgs = {
  batch_size: Scalars['Int'];
  cursor: Array<InputMaybe<Users_Stream_Cursor_Input>>;
  where?: InputMaybe<Users_Bool_Exp>;
};

/** Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'. */
export type Timestamp_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['timestamp']>;
  _gt?: InputMaybe<Scalars['timestamp']>;
  _gte?: InputMaybe<Scalars['timestamp']>;
  _in?: InputMaybe<Array<Scalars['timestamp']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['timestamp']>;
  _lte?: InputMaybe<Scalars['timestamp']>;
  _neq?: InputMaybe<Scalars['timestamp']>;
  _nin?: InputMaybe<Array<Scalars['timestamp']>>;
};

/** columns and relationships of "users" */
export type Users = {
  __typename?: 'users';
  /** An array relationship */
  _staffs: Array<Staffs>;
  /** An aggregate relationship */
  _staffs_aggregate: Staffs_Aggregate;
  email: Scalars['String'];
  /** An array relationship */
  groupInvitations: Array<GroupInvitations>;
  /** An aggregate relationship */
  groupInvitations_aggregate: GroupInvitations_Aggregate;
  id: Scalars['uuid'];
  /** An array relationship */
  memberships: Array<Memberships>;
  /** An aggregate relationship */
  memberships_aggregate: Memberships_Aggregate;
  name: Scalars['String'];
  /** An array relationship */
  ownerships: Array<Ownerships>;
  /** An aggregate relationship */
  ownerships_aggregate: Ownerships_Aggregate;
  /** An object relationship */
  staff?: Maybe<Staffs>;
  uid: Scalars['String'];
};


/** columns and relationships of "users" */
export type Users_StaffsArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


/** columns and relationships of "users" */
export type Users_Staffs_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Staffs_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Staffs_Order_By>>;
  where?: InputMaybe<Staffs_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersGroupInvitationsArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersGroupInvitations_AggregateArgs = {
  distinct_on?: InputMaybe<Array<GroupInvitations_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<GroupInvitations_Order_By>>;
  where?: InputMaybe<GroupInvitations_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersMembershipsArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersMemberships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Memberships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Memberships_Order_By>>;
  where?: InputMaybe<Memberships_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersOwnershipsArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};


/** columns and relationships of "users" */
export type UsersOwnerships_AggregateArgs = {
  distinct_on?: InputMaybe<Array<Ownerships_Select_Column>>;
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Array<Ownerships_Order_By>>;
  where?: InputMaybe<Ownerships_Bool_Exp>;
};

/** aggregated selection of "users" */
export type Users_Aggregate = {
  __typename?: 'users_aggregate';
  aggregate?: Maybe<Users_Aggregate_Fields>;
  nodes: Array<Users>;
};

export type Users_Aggregate_Bool_Exp = {
  count?: InputMaybe<Users_Aggregate_Bool_Exp_Count>;
};

export type Users_Aggregate_Bool_Exp_Count = {
  arguments?: InputMaybe<Array<Users_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Users_Bool_Exp>;
  predicate: Int_Comparison_Exp;
};

/** aggregate fields of "users" */
export type Users_Aggregate_Fields = {
  __typename?: 'users_aggregate_fields';
  count: Scalars['Int'];
  max?: Maybe<Users_Max_Fields>;
  min?: Maybe<Users_Min_Fields>;
};


/** aggregate fields of "users" */
export type Users_Aggregate_FieldsCountArgs = {
  columns?: InputMaybe<Array<Users_Select_Column>>;
  distinct?: InputMaybe<Scalars['Boolean']>;
};

/** order by aggregate values of table "users" */
export type Users_Aggregate_Order_By = {
  count?: InputMaybe<Order_By>;
  max?: InputMaybe<Users_Max_Order_By>;
  min?: InputMaybe<Users_Min_Order_By>;
};

/** input type for inserting array relation for remote table "users" */
export type Users_Arr_Rel_Insert_Input = {
  data: Array<Users_Insert_Input>;
  /** upsert condition */
  on_conflict?: InputMaybe<Users_On_Conflict>;
};

/** Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'. */
export type Users_Bool_Exp = {
  _and?: InputMaybe<Array<Users_Bool_Exp>>;
  _not?: InputMaybe<Users_Bool_Exp>;
  _or?: InputMaybe<Array<Users_Bool_Exp>>;
  _staffs?: InputMaybe<Staffs_Bool_Exp>;
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Bool_Exp>;
  email?: InputMaybe<String_Comparison_Exp>;
  groupInvitations?: InputMaybe<GroupInvitations_Bool_Exp>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Bool_Exp>;
  id?: InputMaybe<Uuid_Comparison_Exp>;
  memberships?: InputMaybe<Memberships_Bool_Exp>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Bool_Exp>;
  name?: InputMaybe<String_Comparison_Exp>;
  ownerships?: InputMaybe<Ownerships_Bool_Exp>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Bool_Exp>;
  staff?: InputMaybe<Staffs_Bool_Exp>;
  uid?: InputMaybe<String_Comparison_Exp>;
};

/** unique or primary key constraints on table "users" */
export enum Users_Constraint {
  /** unique or primary key constraint on columns "email" */
  UsersEmailUniqueness = 'users_email_uniqueness',
  /** unique or primary key constraint on columns "id" */
  UsersPkey = 'users_pkey',
  /** unique or primary key constraint on columns "uid" */
  UsersUidUniqueness = 'users_uid_uniqueness'
}

/** input type for inserting data into table "users" */
export type Users_Insert_Input = {
  _staffs?: InputMaybe<Staffs_Arr_Rel_Insert_Input>;
  email?: InputMaybe<Scalars['String']>;
  groupInvitations?: InputMaybe<GroupInvitations_Arr_Rel_Insert_Input>;
  id?: InputMaybe<Scalars['uuid']>;
  memberships?: InputMaybe<Memberships_Arr_Rel_Insert_Input>;
  name?: InputMaybe<Scalars['String']>;
  ownerships?: InputMaybe<Ownerships_Arr_Rel_Insert_Input>;
  staff?: InputMaybe<Staffs_Obj_Rel_Insert_Input>;
  uid?: InputMaybe<Scalars['String']>;
};

/** aggregate max on columns */
export type Users_Max_Fields = {
  __typename?: 'users_max_fields';
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  uid?: Maybe<Scalars['String']>;
};

/** order by max() on columns of table "users" */
export type Users_Max_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** aggregate min on columns */
export type Users_Min_Fields = {
  __typename?: 'users_min_fields';
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['uuid']>;
  name?: Maybe<Scalars['String']>;
  uid?: Maybe<Scalars['String']>;
};

/** order by min() on columns of table "users" */
export type Users_Min_Order_By = {
  email?: InputMaybe<Order_By>;
  id?: InputMaybe<Order_By>;
  name?: InputMaybe<Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** response of any mutation on the table "users" */
export type Users_Mutation_Response = {
  __typename?: 'users_mutation_response';
  /** number of rows affected by the mutation */
  affected_rows: Scalars['Int'];
  /** data from the rows affected by the mutation */
  returning: Array<Users>;
};

/** input type for inserting object relation for remote table "users" */
export type Users_Obj_Rel_Insert_Input = {
  data: Users_Insert_Input;
  /** upsert condition */
  on_conflict?: InputMaybe<Users_On_Conflict>;
};

/** on_conflict condition type for table "users" */
export type Users_On_Conflict = {
  constraint: Users_Constraint;
  update_columns?: Array<Users_Update_Column>;
  where?: InputMaybe<Users_Bool_Exp>;
};

/** Ordering options when selecting data from "users". */
export type Users_Order_By = {
  _staffs_aggregate?: InputMaybe<Staffs_Aggregate_Order_By>;
  email?: InputMaybe<Order_By>;
  groupInvitations_aggregate?: InputMaybe<GroupInvitations_Aggregate_Order_By>;
  id?: InputMaybe<Order_By>;
  memberships_aggregate?: InputMaybe<Memberships_Aggregate_Order_By>;
  name?: InputMaybe<Order_By>;
  ownerships_aggregate?: InputMaybe<Ownerships_Aggregate_Order_By>;
  staff?: InputMaybe<Staffs_Order_By>;
  uid?: InputMaybe<Order_By>;
};

/** primary key columns input for table: users */
export type Users_Pk_Columns_Input = {
  id: Scalars['uuid'];
};

/** select columns of table "users" */
export enum Users_Select_Column {
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Uid = 'uid'
}

/** input type for updating data in table "users" */
export type Users_Set_Input = {
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  uid?: InputMaybe<Scalars['String']>;
};

/** Streaming cursor of the table "users" */
export type Users_Stream_Cursor_Input = {
  /** Stream column input with initial value */
  initial_value: Users_Stream_Cursor_Value_Input;
  /** cursor ordering */
  ordering?: InputMaybe<Cursor_Ordering>;
};

/** Initial value of the column from where the streaming should start */
export type Users_Stream_Cursor_Value_Input = {
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['uuid']>;
  name?: InputMaybe<Scalars['String']>;
  uid?: InputMaybe<Scalars['String']>;
};

/** update columns of table "users" */
export enum Users_Update_Column {
  /** column name */
  Email = 'email',
  /** column name */
  Id = 'id',
  /** column name */
  Name = 'name',
  /** column name */
  Uid = 'uid'
}

export type Users_Updates = {
  /** sets the columns of the filtered rows to the given values */
  _set?: InputMaybe<Users_Set_Input>;
  where: Users_Bool_Exp;
};

/** Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'. */
export type Uuid_Comparison_Exp = {
  _eq?: InputMaybe<Scalars['uuid']>;
  _gt?: InputMaybe<Scalars['uuid']>;
  _gte?: InputMaybe<Scalars['uuid']>;
  _in?: InputMaybe<Array<Scalars['uuid']>>;
  _is_null?: InputMaybe<Scalars['Boolean']>;
  _lt?: InputMaybe<Scalars['uuid']>;
  _lte?: InputMaybe<Scalars['uuid']>;
  _neq?: InputMaybe<Scalars['uuid']>;
  _nin?: InputMaybe<Array<Scalars['uuid']>>;
};

export type SelectArticlesQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']>;
  offset?: InputMaybe<Scalars['Int']>;
  orderBy: Array<Articles_Order_By> | Articles_Order_By;
  where?: InputMaybe<Articles_Bool_Exp>;
}>;


export type SelectArticlesQuery = { __typename?: 'query_root', articlesAggregate: { __typename?: 'articles_aggregate', aggregate?: { __typename?: 'articles_aggregate_fields', count: number } | null }, articles: Array<{ __typename?: 'articles', id: UuidString, title: string, timestamp: TimestampString, path: string, articleSourceCode: ArticleSources_Enum, stockIssue: { __typename?: 'stockIssues', code: string, name: string }, articleSource: { __typename?: 'articleSources', code: string }, articleContent?: { __typename?: 'articleContents', text: string, articleContentKeywords: Array<{ __typename?: 'articleContentKeywords', text: string }>, articleContentIncreaseKeywords: Array<{ __typename?: 'articleContentIncreaseKeywords', text: string }>, articleContentDecreaseKeywords: Array<{ __typename?: 'articleContentDecreaseKeywords', text: string }> } | null }> };

export type SelectGroupByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
  userId: Scalars['uuid'];
}>;


export type SelectGroupByIdQuery = { __typename?: 'query_root', group?: { __typename?: 'groups', id: UuidString, name: string, groupStockIssue?: { __typename?: 'groupStockIssues', stockIssue?: { __typename?: 'stockIssues', code: string, name: string } | null } | null, contract?: { __typename?: 'contracts', planCode: string, expireAt: TimestampString, maxUsers: number, startAt: TimestampString } | null } | null, ownerships?: { __typename?: 'ownerships', userId: UuidString } | null };

export type SelectGroupDetailByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
  isStaff?: InputMaybe<Scalars['Boolean']>;
}>;


export type SelectGroupDetailByIdQuery = { __typename?: 'query_root', groups_by_pk?: { __typename?: 'groups', id: UuidString, name: string, userNum: { __typename?: 'memberships_aggregate', aggregate?: { __typename?: 'memberships_aggregate_fields', count: number } | null }, contract?: { __typename?: 'contracts', startAt: TimestampString, expireAt: TimestampString, maxUsers: number, plan?: { __typename?: 'plans', code: string } | null } | null, groupStockIssue?: { __typename?: 'groupStockIssues', stockIssue?: { __typename?: 'stockIssues', code: string, name: string } | null } | null, groupSettlementDate?: { __typename?: 'groupSettlementDates', month: number, day: number } | null, groupTypeAssignment?: { __typename?: 'groupTypeAssignments', groupType?: { __typename?: 'groupTypes', code: string } | null } | null, groupInvitations: Array<{ __typename?: 'groupInvitations', email: string }>, groupContent?: { __typename?: 'groupContents', memo: string } | null } | null };

export type DeleteGroupEventMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteGroupEventMutation = { __typename?: 'mutation_root', delete_groupEvents_by_pk?: { __typename?: 'groupEvents', id: UuidString } | null };

export type UpdateGroupEventMutationVariables = Exact<{
  id: Scalars['uuid'];
  set: GroupEvents_Set_Input;
}>;


export type UpdateGroupEventMutation = { __typename?: 'mutation_root', update_groupEvents_by_pk?: { __typename?: 'groupEvents', id: UuidString } | null };

export type InsertGroupEventMutationVariables = Exact<{
  insert: GroupEvents_Insert_Input;
}>;


export type InsertGroupEventMutation = { __typename?: 'mutation_root', insert_groupEvents_one?: { __typename?: 'groupEvents', id: UuidString } | null };

export type InsertGroupListedStockIssuesMutationVariables = Exact<{
  insert: Array<GroupListedStockIssues_Insert_Input> | GroupListedStockIssues_Insert_Input;
}>;


export type InsertGroupListedStockIssuesMutation = { __typename?: 'mutation_root', insert_groupListedStockIssues?: { __typename?: 'groupListedStockIssues_mutation_response', returning: Array<{ __typename?: 'groupListedStockIssues', id: UuidString }> } | null };

export type DeleteGroupListedStockIssuesMutationVariables = Exact<{
  groupStockIssueListId: Scalars['uuid'];
}>;


export type DeleteGroupListedStockIssuesMutation = { __typename?: 'mutation_root', delete_groupListedStockIssues?: { __typename?: 'groupListedStockIssues_mutation_response', returning: Array<{ __typename?: 'groupListedStockIssues', id: UuidString }> } | null };

export type InsertMembershipMutationVariables = Exact<{
  object: Memberships_Insert_Input;
}>;


export type InsertMembershipMutation = { __typename?: 'mutation_root', insert_memberships_one?: { __typename?: 'memberships', userId: UuidString } | null };

export type DeleteMembershipMutationVariables = Exact<{
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
}>;


export type DeleteMembershipMutation = { __typename?: 'mutation_root', delete_memberships_by_pk?: { __typename?: 'memberships', groupId: UuidString } | null };

export type InsertOwnershipMutationVariables = Exact<{
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
}>;


export type InsertOwnershipMutation = { __typename?: 'mutation_root', insert_ownerships_one?: { __typename?: 'ownerships', userId: UuidString } | null };

export type DeleteOwnershipMutationVariables = Exact<{
  groupId: Scalars['uuid'];
  userId: Scalars['uuid'];
}>;


export type DeleteOwnershipMutation = { __typename?: 'mutation_root', delete_ownerships_by_pk?: { __typename?: 'ownerships', userId: UuidString } | null };

export type SelectMembershipsQueryVariables = Exact<{
  groupId: Scalars['uuid'];
}>;


export type SelectMembershipsQuery = { __typename?: 'query_root', memberships: Array<{ __typename?: 'memberships', userId: UuidString, groupInvitation?: { __typename?: 'groupInvitations', userId: UuidString, email: string, name: string } | null, user?: { __typename?: 'users', id: UuidString, email: string, name: string } | null, ownership?: { __typename?: 'ownerships', userId: UuidString } | null }> };

export type DeleteGroupStockIssueListsMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteGroupStockIssueListsMutation = { __typename?: 'mutation_root', delete_groupStockIssueLists_by_pk?: { __typename?: 'groupStockIssueLists', id: UuidString } | null };

export type UpdateGroupStockIssueListsMutationVariables = Exact<{
  id: Scalars['uuid'];
  set: GroupStockIssueLists_Set_Input;
}>;


export type UpdateGroupStockIssueListsMutation = { __typename?: 'mutation_root', update_groupStockIssueLists_by_pk?: { __typename?: 'groupStockIssueLists', id: UuidString } | null };

export type InsertGroupStockIssueListsMutationVariables = Exact<{
  insert: GroupStockIssueLists_Insert_Input;
}>;


export type InsertGroupStockIssueListsMutation = { __typename?: 'mutation_root', insert_groupStockIssueLists_one?: { __typename?: 'groupStockIssueLists', id: UuidString } | null };

export type SelectGroupStockIssueListQueryVariables = Exact<{
  where?: InputMaybe<GroupStockIssueLists_Bool_Exp>;
}>;


export type SelectGroupStockIssueListQuery = { __typename?: 'query_root', groupStockIssueLists: Array<{ __typename?: 'groupStockIssueLists', id: UuidString, groupId: UuidString, name: string, items: Array<{ __typename?: 'groupListedStockIssues', id: UuidString, stockIssueCode: string, stockIssue: { __typename?: 'stockIssues', code: string, name: string } }> }> };

export type SelectGroupsQueryVariables = Exact<{
  where: Groups_Bool_Exp;
  email?: InputMaybe<Scalars['String']>;
  isStaff?: InputMaybe<Scalars['Boolean']>;
}>;


export type SelectGroupsQuery = { __typename?: 'query_root', invited: Array<{ __typename?: 'groupInvitations', group?: { __typename?: 'groups', id: UuidString, name: string } | null }>, groups: Array<{ __typename?: 'groups', id: UuidString, name: string, userNum: { __typename?: 'memberships_aggregate', aggregate?: { __typename?: 'memberships_aggregate_fields', count: number } | null }, contract?: { __typename?: 'contracts', startAt: TimestampString, expireAt: TimestampString, maxUsers: number, plan?: { __typename?: 'plans', code: string } | null } | null, groupStockIssue?: { __typename?: 'groupStockIssues', stockIssue?: { __typename?: 'stockIssues', code: string, name: string } | null } | null, groupSettlementDate?: { __typename?: 'groupSettlementDates', month: number, day: number } | null, groupTypeAssignment?: { __typename?: 'groupTypeAssignments', groupType?: { __typename?: 'groupTypes', code: string } | null } | null, groupInvitations: Array<{ __typename?: 'groupInvitations', email: string }>, groupContent?: { __typename?: 'groupContents', memo: string } | null }> };

export type AcceptGroupInvitationMutationVariables = Exact<{
  userId: Scalars['uuid'];
  email: Scalars['String'];
  groupId: Scalars['uuid'];
}>;


export type AcceptGroupInvitationMutation = { __typename?: 'mutation_root', update_memberships?: { __typename?: 'memberships_mutation_response', affected_rows: number } | null, delete_groupInvitations_by_pk?: { __typename?: 'groupInvitations', groupId: UuidString, email: string } | null };

export type InsertGroupOneMutationVariables = Exact<{
  object: Groups_Insert_Input;
}>;


export type InsertGroupOneMutation = { __typename?: 'mutation_root', insert_groups_one?: { __typename?: 'groups', id: UuidString } | null };

export type UpdateGroupByStaffMutationVariables = Exact<{
  id: Scalars['uuid'];
  groupStockIssueSet?: InputMaybe<GroupStockIssues_Set_Input>;
  groupSet?: InputMaybe<Groups_Set_Input>;
  groupTypeAssignmentSet?: InputMaybe<GroupTypeAssignments_Set_Input>;
  groupSettlementDateSet?: InputMaybe<GroupSettlementDates_Set_Input>;
  contractSet?: InputMaybe<Contracts_Set_Input>;
  groupContentsSet?: InputMaybe<GroupContents_Set_Input>;
}>;


export type UpdateGroupByStaffMutation = { __typename?: 'mutation_root', update_groups_by_pk?: { __typename?: 'groups', id: UuidString } | null, update_groupStockIssues_by_pk?: { __typename?: 'groupStockIssues', groupId: UuidString } | null, update_groupTypeAssignments?: { __typename?: 'groupTypeAssignments_mutation_response', affected_rows: number } | null, update_groupSettlementDates_by_pk?: { __typename?: 'groupSettlementDates', id: UuidString } | null, update_contracts_by_pk?: { __typename?: 'contracts', groupId: UuidString } | null, update_groupContents_by_pk?: { __typename?: 'groupContents', id: UuidString } | null };

export type UpdateGroupMutationVariables = Exact<{
  id: Scalars['uuid'];
  groupStockIssueSet?: InputMaybe<GroupStockIssues_Set_Input>;
  groupSet?: InputMaybe<Groups_Set_Input>;
}>;


export type UpdateGroupMutation = { __typename?: 'mutation_root', update_groups_by_pk?: { __typename?: 'groups', id: UuidString } | null, update_groupStockIssues_by_pk?: { __typename?: 'groupStockIssues', groupId: UuidString } | null };

export type SelectMasterTypesQueryVariables = Exact<{
  lang?: InputMaybe<Languages_Enum>;
}>;


export type SelectMasterTypesQuery = { __typename?: 'query_root', groupTypes: Array<{ __typename?: 'groupTypes', code: string, label: Array<{ __typename?: 'groupTypeTranslations', text: string }> }>, planTypes: Array<{ __typename?: 'plans', code: string, label: Array<{ __typename?: 'planTranslations', text: string }> }> };

export type SelectNewsItemsQueryVariables = Exact<{
  groupId?: InputMaybe<Scalars['uuid']>;
  where?: InputMaybe<Articles_Bool_Exp>;
}>;


export type SelectNewsItemsQuery = { __typename?: 'query_root', groups: Array<{ __typename?: 'groups', groupEvents: Array<{ __typename?: 'groupEvents', id: UuidString, eventTypeCode: EventTypes_Enum, memo: string, date: DateString, eventType?: { __typename?: 'eventTypes', code: string } | null, stockIssue: { __typename?: 'stockIssues', code: string, name: string } }> }>, articles: Array<{ __typename?: 'articles', id: UuidString, title: string, timestamp: TimestampString, path: string, articleSourceCode: ArticleSources_Enum, stockIssue: { __typename?: 'stockIssues', code: string, name: string }, articleSource: { __typename?: 'articleSources', code: string } }> };

export type SelectStaffsQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectStaffsQuery = { __typename?: 'query_root', staffs: Array<{ __typename?: 'staffs', user?: { __typename?: 'users', id: UuidString, email: string, name: string } | null }>, staffInvitations: Array<{ __typename?: 'staffInvitations', email: string, name: string, staff?: { __typename?: 'staffs', user?: { __typename?: 'users', id: UuidString, email: string, name: string } | null } | null }> };

export type InsertStaffInvitationMutationVariables = Exact<{
  object: Staffs_Insert_Input;
}>;


export type InsertStaffInvitationMutation = { __typename?: 'mutation_root', insert_staffs_one?: { __typename?: 'staffs', id: UuidString } | null };

export type DeleteStaffByIdMutationVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type DeleteStaffByIdMutation = { __typename?: 'mutation_root', delete_staffs_by_pk?: { __typename?: 'staffs', id: UuidString } | null };

export type SelectStockIssuesQueryVariables = Exact<{ [key: string]: never; }>;


export type SelectStockIssuesQuery = { __typename?: 'query_root', stockIssues: Array<{ __typename?: 'stockIssues', code: string, name: string }> };

export type SelectStockPricesQueryVariables = Exact<{
  where?: InputMaybe<StockIssues_Bool_Exp>;
}>;


export type SelectStockPricesQuery = { __typename?: 'query_root', stockIssues: Array<{ __typename?: 'stockIssues', code: string, stockPrices: Array<{ __typename?: 'stockPrices', stockIssueCode: string, date: DateString, open?: number | null, close?: number | null, high?: number | null, low?: number | null, volume: number }> }> };

export type SelectUserByIdQueryVariables = Exact<{
  id: Scalars['uuid'];
}>;


export type SelectUserByIdQuery = { __typename?: 'query_root', user?: { __typename?: 'users', id: UuidString, email: string, name: string } | null };

export type UpdateUserMutationVariables = Exact<{
  id: Scalars['uuid'];
  set?: InputMaybe<Users_Set_Input>;
}>;


export type UpdateUserMutation = { __typename?: 'mutation_root', update_users_by_pk?: { __typename?: 'users', id: UuidString } | null };

import { IntrospectionQuery } from 'graphql';
export default {
  "__schema": {
    "queryType": {
      "name": "query_root"
    },
    "mutationType": {
      "name": "mutation_root"
    },
    "subscriptionType": {
      "name": "subscription_root"
    },
    "types": [
      {
        "kind": "OBJECT",
        "name": "articleContentDecreaseKeywords",
        "fields": [
          {
            "name": "articleContent",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentDecreaseKeywords_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentDecreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentDecreaseKeywords_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentDecreaseKeywords_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentDecreaseKeywords_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentDecreaseKeywords_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentDecreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentIncreaseKeywords",
        "fields": [
          {
            "name": "articleContent",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentIncreaseKeywords_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentIncreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentIncreaseKeywords_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentIncreaseKeywords_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentIncreaseKeywords_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentIncreaseKeywords_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentIncreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentKeywords",
        "fields": [
          {
            "name": "articleContent",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentKeywords_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentKeywords_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentKeywords_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentKeywords_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContentKeywords_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContents",
        "fields": [
          {
            "name": "_articles",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_articles_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articles_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "article",
            "type": {
              "kind": "OBJECT",
              "name": "articles",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "articleContentDecreaseKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentDecreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentDecreaseKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentDecreaseKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentIncreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentIncreaseKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContents_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContents_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContents_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContents_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleContents_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleSources",
        "fields": [
          {
            "name": "articles",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articles_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articles_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "code",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleSources_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleSources",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleSources_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleSources_max_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleSources_min_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articleSources_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleSources",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articles",
        "fields": [
          {
            "name": "_articleContents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_articleContents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContent",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "articleSource",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleSources",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "articleSourceCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "originalId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "path",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "stockIssue",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockIssues",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "timestamp",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articles_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "articles_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articles_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "articles_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "articles_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articles_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "originalId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "path",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "timestamp",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articles_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "originalId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "path",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "timestamp",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "title",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "articles_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts",
        "fields": [
          {
            "name": "_groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "expireAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "maxUsers",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "plan",
            "type": {
              "kind": "OBJECT",
              "name": "plans",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "planCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "startAt",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "contracts",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_aggregate_fields",
        "fields": [
          {
            "name": "avg",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_avg_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_min_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_stddev_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_pop",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_stddev_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_samp",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_stddev_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sum",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_sum_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_pop",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_var_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_samp",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_var_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "variance",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_variance_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_avg_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_max_fields",
        "fields": [
          {
            "name": "expireAt",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "planCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startAt",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_min_fields",
        "fields": [
          {
            "name": "expireAt",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "planCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startAt",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "contracts",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_stddev_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_stddev_pop_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_stddev_samp_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_sum_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_var_pop_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_var_samp_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "contracts_variance_fields",
        "fields": [
          {
            "name": "maxUsers",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts",
        "fields": [
          {
            "name": "date",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "mlModel",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "mlModels",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "mlModelId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "stockIssue",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockIssues",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "timestamp",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "dailyImpacts",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_aggregate_fields",
        "fields": [
          {
            "name": "avg",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_avg_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_min_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_stddev_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_pop",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_stddev_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_samp",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_stddev_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sum",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_sum_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_pop",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_var_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_samp",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_var_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "variance",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_variance_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_avg_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_max_fields",
        "fields": [
          {
            "name": "date",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mlModelId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "timestamp",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_min_fields",
        "fields": [
          {
            "name": "date",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "mlModelId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "timestamp",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "dailyImpacts",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_stddev_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_stddev_pop_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_stddev_samp_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_sum_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_var_pop_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_var_samp_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "dailyImpacts_variance_fields",
        "fields": [
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypeTranslations",
        "fields": [
          {
            "name": "eventType",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "eventTypeCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "languageCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypeTranslations_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypeTranslations_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypeTranslations_max_fields",
        "fields": [
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypeTranslations_min_fields",
        "fields": [
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypeTranslations_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypes",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "eventTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupEvents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypes_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypes_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypes_max_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypes_min_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "eventTypes_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupContents",
        "fields": [
          {
            "name": "_groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "memo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupContents_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupContents_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupContents_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "memo",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupContents_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "memo",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupContents_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupEvents",
        "fields": [
          {
            "name": "date",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "eventType",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "eventTypeCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "group",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "memo",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "stockIssue",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockIssues",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupEvents_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupEvents_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupEvents_max_fields",
        "fields": [
          {
            "name": "date",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "memo",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupEvents_min_fields",
        "fields": [
          {
            "name": "date",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "memo",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupEvents_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupInvitations",
        "fields": [
          {
            "name": "_memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "email",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "membership",
            "type": {
              "kind": "OBJECT",
              "name": "memberships",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupInvitations_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupInvitations_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupInvitations_max_fields",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupInvitations_min_fields",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupInvitations_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupListedStockIssues",
        "fields": [
          {
            "name": "groupStockIssueList",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssueLists",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "groupStockIssueListId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "stockIssue",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockIssues",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupListedStockIssues_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupListedStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupListedStockIssues_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupListedStockIssues_max_fields",
        "fields": [
          {
            "name": "groupStockIssueListId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupListedStockIssues_min_fields",
        "fields": [
          {
            "name": "groupStockIssueListId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupListedStockIssues_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupListedStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates",
        "fields": [
          {
            "name": "_groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "day",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupSettlementDates",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_aggregate_fields",
        "fields": [
          {
            "name": "avg",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_avg_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_min_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_stddev_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_pop",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_stddev_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_samp",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_stddev_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sum",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_sum_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_pop",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_var_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_samp",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_var_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "variance",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_variance_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_avg_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_max_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_min_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupSettlementDates",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_stddev_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_stddev_pop_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_stddev_samp_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_sum_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_var_pop_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_var_samp_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupSettlementDates_variance_fields",
        "fields": [
          {
            "name": "day",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "month",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssueLists",
        "fields": [
          {
            "name": "group",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups",
                "ofType": null
              }
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "groupListedStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupListedStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupListedStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssueLists_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssueLists",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssueLists_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssueLists_max_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssueLists_min_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssueLists_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssueLists",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssues",
        "fields": [
          {
            "name": "_groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "groupStockIssueLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssueLists",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssueLists_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockIssue",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssues_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssues_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssues_max_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssues_min_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupStockIssues_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeAssignments",
        "fields": [
          {
            "name": "_groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "groupType",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupTypeCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeAssignments_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeAssignments",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeAssignments_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeAssignments_max_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupTypeCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeAssignments_min_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "groupTypeCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeAssignments_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeAssignments",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeTranslations",
        "fields": [
          {
            "name": "groupType",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupTypeCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "languageCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeTranslations_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeTranslations_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeTranslations_max_fields",
        "fields": [
          {
            "name": "groupTypeCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeTranslations_min_fields",
        "fields": [
          {
            "name": "groupTypeCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypeTranslations_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypes",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "groupTypeAssignments",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeAssignments",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeAssignments_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypes_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypes_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypes_max_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypes_min_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groupTypes_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groups",
        "fields": [
          {
            "name": "_contracts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "contracts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_contracts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "contracts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupContents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupContents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupContents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupSettlementDates",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupSettlementDates",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupSettlementDates_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupSettlementDates_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupTypeAssignments",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeAssignments",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupTypeAssignments_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeAssignments_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_inactiveGroups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "inactiveGroups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_inactiveGroups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "inactiveGroups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "contract",
            "type": {
              "kind": "OBJECT",
              "name": "contracts",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupContent",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupEvents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupEvents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupSettlementDate",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupStockIssue",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupStockIssueLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssueLists",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssueLists_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignment",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "inactiveGroup",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groups_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "groups_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groups_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "groups_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "groups_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groups_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groups_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "groups_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "inactiveGroups",
        "fields": [
          {
            "name": "_groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "inactiveGroups_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "inactiveGroups",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "inactiveGroups_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "inactiveGroups_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "inactiveGroups_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "inactiveGroups_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "inactiveGroups",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "languages",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "eventTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "planTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "planTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "languages_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "languages_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "languages",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "languages_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "languages_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "languages_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "languages_max_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "languages_min_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "languages_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "languages",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "memberships",
        "fields": [
          {
            "name": "_groupInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_groupInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "groupInvitation",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownership",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "memberships_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "memberships_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "memberships_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "memberships_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "memberships_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "memberships_max_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "memberships_min_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "memberships_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "mlModels",
        "fields": [
          {
            "name": "dailyImpacts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "dailyImpacts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "dailyImpacts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "dailyImpacts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "path",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "mlModels_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "mlModels",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "mlModels_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "mlModels_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "path",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "mlModels_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "path",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "mlModels_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "mlModels",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "mutation_root",
        "fields": [
          {
            "name": "delete_articleContentDecreaseKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleContentDecreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleContentIncreaseKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleContentIncreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleContentKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleContentKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleContents",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleSources",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articleSources_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articles",
            "type": {
              "kind": "OBJECT",
              "name": "articles_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_articles_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articles",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_contracts",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_contracts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "contracts",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_dailyImpacts",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_dailyImpacts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_eventTypeTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_eventTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "eventTypeCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_eventTypes",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_eventTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupContents",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupEvents",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupEvents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupInvitations",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "email",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupListedStockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupListedStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupSettlementDates",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupSettlementDates_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupStockIssueLists",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupStockIssueLists_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupStockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupTypeAssignments",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupTypeAssignments_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupTypeTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "groupTypeCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupTypes",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groupTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groups",
            "type": {
              "kind": "OBJECT",
              "name": "groups_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_groups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_inactiveGroups",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_inactiveGroups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_languages",
            "type": {
              "kind": "OBJECT",
              "name": "languages_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_languages_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_memberships",
            "type": {
              "kind": "OBJECT",
              "name": "memberships_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_memberships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "memberships",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_mlModels",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_mlModels_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_ownerships",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_ownerships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_planTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_planTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "planCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_plans",
            "type": {
              "kind": "OBJECT",
              "name": "plans_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_plans_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "plans",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_staffInvitations",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_staffInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "email",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_staffs",
            "type": {
              "kind": "OBJECT",
              "name": "staffs_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_staffs_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffs",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_stockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_stockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_stockPrices",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_stockPrices_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices",
              "ofType": null
            },
            "args": [
              {
                "name": "date",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "stockIssueCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_users",
            "type": {
              "kind": "OBJECT",
              "name": "users_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "delete_users_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "insert_articleContentDecreaseKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleContentDecreaseKeywords_one",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleContentIncreaseKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleContentIncreaseKeywords_one",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleContentKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleContentKeywords_one",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleContents",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleContents_one",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleSources",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articleSources_one",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articles",
            "type": {
              "kind": "OBJECT",
              "name": "articles_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_articles_one",
            "type": {
              "kind": "OBJECT",
              "name": "articles",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_contracts",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_contracts_one",
            "type": {
              "kind": "OBJECT",
              "name": "contracts",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_dailyImpacts",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_dailyImpacts_one",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_eventTypeTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_eventTypeTranslations_one",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_eventTypes",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_eventTypes_one",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupContents",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupContents_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupEvents",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupEvents_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupInvitations",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupInvitations_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupListedStockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupListedStockIssues_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupSettlementDates",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupSettlementDates_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupStockIssueLists",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupStockIssueLists_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupStockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupStockIssues_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupTypeAssignments",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupTypeAssignments_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupTypeTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupTypeTranslations_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupTypes",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groupTypes_one",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groups",
            "type": {
              "kind": "OBJECT",
              "name": "groups_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_groups_one",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_inactiveGroups",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_inactiveGroups_one",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_languages",
            "type": {
              "kind": "OBJECT",
              "name": "languages_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_languages_one",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_memberships",
            "type": {
              "kind": "OBJECT",
              "name": "memberships_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_memberships_one",
            "type": {
              "kind": "OBJECT",
              "name": "memberships",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_mlModels",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_mlModels_one",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_ownerships",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_ownerships_one",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_planTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_planTranslations_one",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_plans",
            "type": {
              "kind": "OBJECT",
              "name": "plans_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_plans_one",
            "type": {
              "kind": "OBJECT",
              "name": "plans",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_staffInvitations",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_staffInvitations_one",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_staffs",
            "type": {
              "kind": "OBJECT",
              "name": "staffs_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_staffs_one",
            "type": {
              "kind": "OBJECT",
              "name": "staffs",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_stockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_stockIssues_one",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_stockPrices",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_stockPrices_one",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_users",
            "type": {
              "kind": "OBJECT",
              "name": "users_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "objects",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "insert_users_one",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": [
              {
                "name": "object",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "on_conflict",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "update_articleContentDecreaseKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentDecreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentDecreaseKeywords_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentDecreaseKeywords_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentIncreaseKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentIncreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentIncreaseKeywords_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentIncreaseKeywords_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentKeywords",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContentKeywords_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentKeywords_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContents",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleContents_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContents_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleSources",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleSources_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articleSources_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleSources_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_articles",
            "type": {
              "kind": "OBJECT",
              "name": "articles_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articles_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articles",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_articles_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "articles_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_contracts",
            "type": {
              "kind": "OBJECT",
              "name": "contracts_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_contracts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "contracts",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_contracts_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "contracts_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_dailyImpacts",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_dailyImpacts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_dailyImpacts_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "dailyImpacts_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_eventTypeTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_eventTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_eventTypeTranslations_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypeTranslations_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_eventTypes",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_eventTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_eventTypes_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypes_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupContents",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupContents_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupContents_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupEvents",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupEvents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupEvents_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupEvents_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupInvitations",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupInvitations_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupInvitations_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupListedStockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupListedStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupListedStockIssues_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupListedStockIssues_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupSettlementDates",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupSettlementDates_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupSettlementDates_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupSettlementDates_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupStockIssueLists",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupStockIssueLists_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupStockIssueLists_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssueLists_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupStockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupStockIssues_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssues_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypeAssignments",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypeAssignments_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypeAssignments_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeAssignments_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypeTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypeTranslations_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeTranslations_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypes",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groupTypes_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypes_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_groups",
            "type": {
              "kind": "OBJECT",
              "name": "groups_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_groups_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_inactiveGroups",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_inactiveGroups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_inactiveGroups_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "inactiveGroups_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_languages",
            "type": {
              "kind": "OBJECT",
              "name": "languages_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_languages_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_languages_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "languages_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_memberships",
            "type": {
              "kind": "OBJECT",
              "name": "memberships_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_memberships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "memberships",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_memberships_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_mlModels",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_mlModels_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_mlModels_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "mlModels_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_ownerships",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_ownerships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_ownerships_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_planTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_planTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_planTranslations_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "planTranslations_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_plans",
            "type": {
              "kind": "OBJECT",
              "name": "plans_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_plans_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "plans",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_plans_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "plans_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_staffInvitations",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_staffInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_staffInvitations_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffInvitations_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_staffs",
            "type": {
              "kind": "OBJECT",
              "name": "staffs_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_staffs_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffs",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_staffs_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffs_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_stockIssues",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_stockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_stockIssues_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockIssues_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_stockPrices",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_stockPrices_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices",
              "ofType": null
            },
            "args": [
              {
                "name": "_inc",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_stockPrices_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockPrices_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "name": "update_users",
            "type": {
              "kind": "OBJECT",
              "name": "users_mutation_response",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_users_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": [
              {
                "name": "_set",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "pk_columns",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "update_users_many",
            "type": {
              "kind": "LIST",
              "ofType": {
                "kind": "OBJECT",
                "name": "users_mutation_response",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "updates",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "NON_NULL",
                      "ofType": {
                        "kind": "SCALAR",
                        "name": "Any"
                      }
                    }
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ownerships",
        "fields": [
          {
            "name": "_memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "group",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "groupId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "membership",
            "type": {
              "kind": "OBJECT",
              "name": "memberships",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ownerships_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ownerships_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ownerships_max_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ownerships_min_fields",
        "fields": [
          {
            "name": "groupId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "userId",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "ownerships_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "planTranslations",
        "fields": [
          {
            "name": "language",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "languageCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "plan",
            "type": {
              "kind": "OBJECT",
              "name": "plans",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "planCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "planTranslations",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "planTranslations_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "planTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "planTranslations_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "planTranslations_max_fields",
        "fields": [
          {
            "name": "planCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "planTranslations_min_fields",
        "fields": [
          {
            "name": "planCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "text",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "planTranslations_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "planTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "plans",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "contracts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "contracts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "contracts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "contracts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "planTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "planTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "plans_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "plans_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "plans",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "plans_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "plans_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "plans_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "plans_max_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "plans_min_fields",
        "fields": [
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "plans_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "plans",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "query_root",
        "fields": [
          {
            "name": "articleContentDecreaseKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentDecreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentDecreaseKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentDecreaseKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentDecreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentIncreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentIncreaseKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleContents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleSources",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleSources",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleSources_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleSources_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleSources_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articles",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articles_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articles_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articles_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articles",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "contracts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "contracts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "contracts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "contracts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "contracts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "contracts",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "dailyImpacts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "dailyImpacts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "dailyImpacts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "dailyImpacts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "dailyImpacts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "eventTypeCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "eventTypes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypes_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypes_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupContents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupContents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupContents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupEvents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupEvents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "email",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupListedStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupListedStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupSettlementDates",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupSettlementDates",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupSettlementDates_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupSettlementDates_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupSettlementDates_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssueLists",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssueLists_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeAssignments",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeAssignments_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "groupTypeCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupTypes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypes_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypes_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "inactiveGroups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "inactiveGroups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "inactiveGroups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "inactiveGroups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "inactiveGroups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "languages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "languages",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "languages_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "languages_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "languages_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "memberships",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "mlModels",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "mlModels",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "mlModels_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "mlModels_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "mlModels_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "planTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "planTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "planTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "planCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "plans",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "plans",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "plans_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "plans_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "plans_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "plans",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "email",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffs",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffs_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffs_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffs_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffs",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "stockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "stockPrices",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockPrices",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockPrices_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockPrices_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockPrices_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices",
              "ofType": null
            },
            "args": [
              {
                "name": "date",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "stockIssueCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "users",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "users",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "users_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "users_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "users_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffInvitations",
        "fields": [
          {
            "name": "_staffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffs",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_staffs_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffs_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "email",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "staff",
            "type": {
              "kind": "OBJECT",
              "name": "staffs",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffInvitations_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffInvitations_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffInvitations_max_fields",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffInvitations_min_fields",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffInvitations_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffs",
        "fields": [
          {
            "name": "_staffInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_staffInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_users",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "users",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_users_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "users_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "staffInvitation",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "user",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffs_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "staffs_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffs",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffs_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "staffs_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "staffs_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffs_max_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffs_min_fields",
        "fields": [
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "staffs_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffs",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockIssues",
        "fields": [
          {
            "name": "accountClosingMonth",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "address",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "articles",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articles_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articles_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "averageAge",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "averageSalary",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "capital",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "code",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "commonShares",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "dailyImpacts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "dailyImpacts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "dailyImpacts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "dailyImpacts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "employees",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "enName",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "establishedDate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "excludingTreasurySharesCommonShares",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "groupEvents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupEvents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupListedStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupListedStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "indicatorNames",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "marketName",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "nikkeiIndustryName",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "outstandingShares",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "representative",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "shareholdersMeetingDate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "shortName",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "startingSalary",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "stockPrices",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockPrices",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockPrices_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockPrices_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "telephone",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "toshoIndustryName",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "tradingUnit",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockIssues_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockIssues_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockIssues_max_fields",
        "fields": [
          {
            "name": "accountClosingMonth",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "address",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageAge",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageSalary",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "capital",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "commonShares",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "employees",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "enName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "establishedDate",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "excludingTreasurySharesCommonShares",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "indicatorNames",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "marketName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nikkeiIndustryName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "outstandingShares",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "representative",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "shareholdersMeetingDate",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "shortName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startingSalary",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "telephone",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "toshoIndustryName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "tradingUnit",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockIssues_min_fields",
        "fields": [
          {
            "name": "accountClosingMonth",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "address",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageAge",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "averageSalary",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "capital",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "code",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "commonShares",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "employees",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "enName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "establishedDate",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "excludingTreasurySharesCommonShares",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "indicatorNames",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "marketName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "nikkeiIndustryName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "outstandingShares",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "representative",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "shareholdersMeetingDate",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "shortName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "startingSalary",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "telephone",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "toshoIndustryName",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "tradingUnit",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "url",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockIssues_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "date",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssue",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockPrices",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_aggregate_fields",
        "fields": [
          {
            "name": "avg",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_avg_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_min_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_stddev_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_pop",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_stddev_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "stddev_samp",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_stddev_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "sum",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_sum_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_pop",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_var_pop_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "var_samp",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_var_samp_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "variance",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices_variance_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_avg_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_max_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "date",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_min_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "date",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "stockIssueCode",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockPrices",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_stddev_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_stddev_pop_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_stddev_samp_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_sum_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_var_pop_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_var_samp_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "stockPrices_variance_fields",
        "fields": [
          {
            "name": "close",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "high",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "low",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "open",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "value",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "volume",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "subscription_root",
        "fields": [
          {
            "name": "articleContentDecreaseKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentDecreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentDecreaseKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentDecreaseKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentDecreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentDecreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleContentDecreaseKeywords_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentDecreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentIncreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentIncreaseKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentIncreaseKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleContentIncreaseKeywords_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentIncreaseKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContentKeywords_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContentKeywords",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "text",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleContentKeywords_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContentKeywords",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleContents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleContents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleContents_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleSources",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleSources",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleSources_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articleSources_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articleSources_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articleSources",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articleSources_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articleSources",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articles",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articles_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "articles_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "articles_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "articles",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "articles_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "articles",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "contracts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "contracts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "contracts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "contracts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "contracts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "contracts",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "contracts_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "contracts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "dailyImpacts",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "dailyImpacts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "dailyImpacts_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "dailyImpacts_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "dailyImpacts_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "dailyImpacts",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "dailyImpacts_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "dailyImpacts",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "eventTypeCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "eventTypeTranslations_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypes_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "eventTypes_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "eventTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "eventTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "eventTypes_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "eventTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupContents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupContents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupContents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupContents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupContents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupContents_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupContents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupEvents_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupEvents_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupEvents",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupEvents_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupEvents",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "email",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupInvitations_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupListedStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupListedStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupListedStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupListedStockIssues_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupListedStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupSettlementDates",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupSettlementDates",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupSettlementDates_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupSettlementDates_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupSettlementDates_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupSettlementDates",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupSettlementDates_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupSettlementDates",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssueLists",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssueLists_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssueLists",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupStockIssueLists_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssueLists",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupStockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupStockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupStockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupStockIssues_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupStockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeAssignments",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeAssignments_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeAssignments",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupTypeAssignments_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeAssignments",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypeTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypeTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "groupTypeCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupTypeTranslations_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypeTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypes_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupTypes_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupTypes_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groupTypes",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groupTypes_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupTypes",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "groups",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "groups_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "inactiveGroups",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "inactiveGroups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "inactiveGroups_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "inactiveGroups_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "inactiveGroups_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "inactiveGroups",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "inactiveGroups_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "inactiveGroups",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "languages",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "languages",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "languages_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "languages_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "languages_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "languages",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "languages_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "languages",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "memberships",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "memberships_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "mlModels",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "mlModels",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "mlModels_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "mlModels_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "mlModels_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "mlModels",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "mlModels_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "mlModels",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "ownerships",
              "ofType": null
            },
            "args": [
              {
                "name": "groupId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "userId",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "ownerships_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "planTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "planTranslations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "planTranslations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "planTranslations",
              "ofType": null
            },
            "args": [
              {
                "name": "languageCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "planCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "planTranslations_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "planTranslations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "plans",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "plans",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "plans_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "plans_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "plans_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "plans",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "plans_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "plans",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffInvitations_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffInvitations",
              "ofType": null
            },
            "args": [
              {
                "name": "email",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffInvitations_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffs",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffs_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffs_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staffs_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "staffs",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "staffs_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffs",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockIssues",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockIssues_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockIssues_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockIssues_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockIssues",
              "ofType": null
            },
            "args": [
              {
                "name": "code",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "stockIssues_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockIssues",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockPrices",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockPrices",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockPrices_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "stockPrices_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "stockPrices_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "stockPrices",
              "ofType": null
            },
            "args": [
              {
                "name": "date",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "stockIssueCode",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "stockPrices_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "stockPrices",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "users",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "users",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "users_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "users_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "users_by_pk",
            "type": {
              "kind": "OBJECT",
              "name": "users",
              "ofType": null
            },
            "args": [
              {
                "name": "id",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              }
            ]
          },
          {
            "name": "users_stream",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "users",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "batch_size",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "SCALAR",
                    "name": "Any"
                  }
                }
              },
              {
                "name": "cursor",
                "type": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "LIST",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "users",
        "fields": [
          {
            "name": "_staffs",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "staffs",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "_staffs_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "staffs_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "email",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "groupInvitations",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "groupInvitations",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "groupInvitations_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "groupInvitations_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "id",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "memberships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "memberships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "memberships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "memberships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "name",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "ownerships",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "ownerships",
                    "ofType": null
                  }
                }
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "ownerships_aggregate",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "OBJECT",
                "name": "ownerships_aggregate",
                "ofType": null
              }
            },
            "args": [
              {
                "name": "distinct_on",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "limit",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "offset",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              },
              {
                "name": "order_by",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "where",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "staff",
            "type": {
              "kind": "OBJECT",
              "name": "staffs",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "uid",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "users_aggregate",
        "fields": [
          {
            "name": "aggregate",
            "type": {
              "kind": "OBJECT",
              "name": "users_aggregate_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "nodes",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "users",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "users_aggregate_fields",
        "fields": [
          {
            "name": "count",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": [
              {
                "name": "columns",
                "type": {
                  "kind": "LIST",
                  "ofType": {
                    "kind": "NON_NULL",
                    "ofType": {
                      "kind": "SCALAR",
                      "name": "Any"
                    }
                  }
                }
              },
              {
                "name": "distinct",
                "type": {
                  "kind": "SCALAR",
                  "name": "Any"
                }
              }
            ]
          },
          {
            "name": "max",
            "type": {
              "kind": "OBJECT",
              "name": "users_max_fields",
              "ofType": null
            },
            "args": []
          },
          {
            "name": "min",
            "type": {
              "kind": "OBJECT",
              "name": "users_min_fields",
              "ofType": null
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "users_max_fields",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "uid",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "users_min_fields",
        "fields": [
          {
            "name": "email",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "id",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "name",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          },
          {
            "name": "uid",
            "type": {
              "kind": "SCALAR",
              "name": "Any"
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "OBJECT",
        "name": "users_mutation_response",
        "fields": [
          {
            "name": "affected_rows",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "SCALAR",
                "name": "Any"
              }
            },
            "args": []
          },
          {
            "name": "returning",
            "type": {
              "kind": "NON_NULL",
              "ofType": {
                "kind": "LIST",
                "ofType": {
                  "kind": "NON_NULL",
                  "ofType": {
                    "kind": "OBJECT",
                    "name": "users",
                    "ofType": null
                  }
                }
              }
            },
            "args": []
          }
        ],
        "interfaces": []
      },
      {
        "kind": "SCALAR",
        "name": "Any"
      }
    ],
    "directives": []
  }
} as unknown as IntrospectionQuery;

export const SelectArticlesDocument = gql`
    query selectArticles($limit: Int = 30, $offset: Int = 0, $orderBy: [articles_order_by!]!, $where: articles_bool_exp) {
  articlesAggregate: articles_aggregate(order_by: $orderBy, where: $where) {
    aggregate {
      count
    }
  }
  articles(limit: $limit, offset: $offset, order_by: $orderBy, where: $where) {
    id
    title
    timestamp
    path
    stockIssue {
      code
      name
    }
    articleSourceCode
    articleSource {
      code
    }
    articleContent {
      text
      articleContentKeywords {
        text
      }
      articleContentIncreaseKeywords {
        text
      }
      articleContentDecreaseKeywords {
        text
      }
    }
  }
}
    `;

export function useSelectArticlesQuery(options: Omit<Urql.UseQueryArgs<SelectArticlesQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectArticlesQuery, SelectArticlesQueryVariables>({ query: SelectArticlesDocument, ...options });
};
export const SelectGroupByIdDocument = gql`
    query selectGroupById($id: uuid!, $userId: uuid!) {
  group: groups_by_pk(id: $id) {
    id
    name
    groupStockIssue {
      stockIssue {
        code
        name
      }
    }
    contract {
      planCode
      expireAt
      maxUsers
      startAt
    }
  }
  ownerships: ownerships_by_pk(groupId: $id, userId: $userId) {
    userId
  }
}
    `;

export function useSelectGroupByIdQuery(options: Omit<Urql.UseQueryArgs<SelectGroupByIdQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectGroupByIdQuery, SelectGroupByIdQueryVariables>({ query: SelectGroupByIdDocument, ...options });
};
export const SelectGroupDetailByIdDocument = gql`
    query selectGroupDetailById($id: uuid!, $isStaff: Boolean = false) {
  groups_by_pk(id: $id) {
    userNum: memberships_aggregate {
      aggregate {
        count
      }
    }
    id
    name
    contract {
      plan {
        code
      }
      startAt
      expireAt
      maxUsers
    }
    groupStockIssue {
      stockIssue {
        code
        name
      }
    }
    groupSettlementDate {
      month
      day
    }
    groupTypeAssignment {
      groupType {
        code
      }
    }
    groupInvitations {
      email
    }
    groupContent @include(if: $isStaff) {
      memo
    }
  }
}
    `;

export function useSelectGroupDetailByIdQuery(options: Omit<Urql.UseQueryArgs<SelectGroupDetailByIdQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectGroupDetailByIdQuery, SelectGroupDetailByIdQueryVariables>({ query: SelectGroupDetailByIdDocument, ...options });
};
export const DeleteGroupEventDocument = gql`
    mutation deleteGroupEvent($id: uuid!) {
  delete_groupEvents_by_pk(id: $id) {
    id
  }
}
    `;

export function useDeleteGroupEventMutation() {
  return Urql.useMutation<DeleteGroupEventMutation, DeleteGroupEventMutationVariables>(DeleteGroupEventDocument);
};
export const UpdateGroupEventDocument = gql`
    mutation updateGroupEvent($id: uuid!, $set: groupEvents_set_input!) {
  update_groupEvents_by_pk(pk_columns: {id: $id}, _set: $set) {
    id
  }
}
    `;

export function useUpdateGroupEventMutation() {
  return Urql.useMutation<UpdateGroupEventMutation, UpdateGroupEventMutationVariables>(UpdateGroupEventDocument);
};
export const InsertGroupEventDocument = gql`
    mutation insertGroupEvent($insert: groupEvents_insert_input!) {
  insert_groupEvents_one(object: $insert) {
    id
  }
}
    `;

export function useInsertGroupEventMutation() {
  return Urql.useMutation<InsertGroupEventMutation, InsertGroupEventMutationVariables>(InsertGroupEventDocument);
};
export const InsertGroupListedStockIssuesDocument = gql`
    mutation insertGroupListedStockIssues($insert: [groupListedStockIssues_insert_input!]!) {
  insert_groupListedStockIssues(objects: $insert) {
    returning {
      id
    }
  }
}
    `;

export function useInsertGroupListedStockIssuesMutation() {
  return Urql.useMutation<InsertGroupListedStockIssuesMutation, InsertGroupListedStockIssuesMutationVariables>(InsertGroupListedStockIssuesDocument);
};
export const DeleteGroupListedStockIssuesDocument = gql`
    mutation deleteGroupListedStockIssues($groupStockIssueListId: uuid!) {
  delete_groupListedStockIssues(
    where: {groupStockIssueListId: {_eq: $groupStockIssueListId}}
  ) {
    returning {
      id
    }
  }
}
    `;

export function useDeleteGroupListedStockIssuesMutation() {
  return Urql.useMutation<DeleteGroupListedStockIssuesMutation, DeleteGroupListedStockIssuesMutationVariables>(DeleteGroupListedStockIssuesDocument);
};
export const InsertMembershipDocument = gql`
    mutation insertMembership($object: memberships_insert_input!) {
  insert_memberships_one(object: $object) {
    userId
  }
}
    `;

export function useInsertMembershipMutation() {
  return Urql.useMutation<InsertMembershipMutation, InsertMembershipMutationVariables>(InsertMembershipDocument);
};
export const DeleteMembershipDocument = gql`
    mutation deleteMembership($groupId: uuid!, $userId: uuid!) {
  delete_memberships_by_pk(groupId: $groupId, userId: $userId) {
    groupId
  }
}
    `;

export function useDeleteMembershipMutation() {
  return Urql.useMutation<DeleteMembershipMutation, DeleteMembershipMutationVariables>(DeleteMembershipDocument);
};
export const InsertOwnershipDocument = gql`
    mutation insertOwnership($groupId: uuid!, $userId: uuid!) {
  insert_ownerships_one(object: {groupId: $groupId, userId: $userId}) {
    userId
  }
}
    `;

export function useInsertOwnershipMutation() {
  return Urql.useMutation<InsertOwnershipMutation, InsertOwnershipMutationVariables>(InsertOwnershipDocument);
};
export const DeleteOwnershipDocument = gql`
    mutation deleteOwnership($groupId: uuid!, $userId: uuid!) {
  delete_ownerships_by_pk(groupId: $groupId, userId: $userId) {
    userId
  }
}
    `;

export function useDeleteOwnershipMutation() {
  return Urql.useMutation<DeleteOwnershipMutation, DeleteOwnershipMutationVariables>(DeleteOwnershipDocument);
};
export const SelectMembershipsDocument = gql`
    query selectMemberships($groupId: uuid!) {
  memberships(where: {groupId: {_eq: $groupId}}) {
    userId
    groupInvitation {
      userId
      email
      name
    }
    user {
      id
      email
      name
    }
    ownership {
      userId
    }
  }
}
    `;

export function useSelectMembershipsQuery(options: Omit<Urql.UseQueryArgs<SelectMembershipsQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectMembershipsQuery, SelectMembershipsQueryVariables>({ query: SelectMembershipsDocument, ...options });
};
export const DeleteGroupStockIssueListsDocument = gql`
    mutation deleteGroupStockIssueLists($id: uuid!) {
  delete_groupStockIssueLists_by_pk(id: $id) {
    id
  }
}
    `;

export function useDeleteGroupStockIssueListsMutation() {
  return Urql.useMutation<DeleteGroupStockIssueListsMutation, DeleteGroupStockIssueListsMutationVariables>(DeleteGroupStockIssueListsDocument);
};
export const UpdateGroupStockIssueListsDocument = gql`
    mutation updateGroupStockIssueLists($id: uuid!, $set: groupStockIssueLists_set_input!) {
  update_groupStockIssueLists_by_pk(pk_columns: {id: $id}, _set: $set) {
    id
  }
}
    `;

export function useUpdateGroupStockIssueListsMutation() {
  return Urql.useMutation<UpdateGroupStockIssueListsMutation, UpdateGroupStockIssueListsMutationVariables>(UpdateGroupStockIssueListsDocument);
};
export const InsertGroupStockIssueListsDocument = gql`
    mutation insertGroupStockIssueLists($insert: groupStockIssueLists_insert_input!) {
  insert_groupStockIssueLists_one(object: $insert) {
    id
  }
}
    `;

export function useInsertGroupStockIssueListsMutation() {
  return Urql.useMutation<InsertGroupStockIssueListsMutation, InsertGroupStockIssueListsMutationVariables>(InsertGroupStockIssueListsDocument);
};
export const SelectGroupStockIssueListDocument = gql`
    query selectGroupStockIssueList($where: groupStockIssueLists_bool_exp) {
  groupStockIssueLists(where: $where, order_by: {name: asc}) {
    id
    groupId
    name
    items: groupListedStockIssues(order_by: {stockIssueCode: asc}) {
      id
      stockIssueCode
      stockIssue {
        code
        name
      }
    }
  }
}
    `;

export function useSelectGroupStockIssueListQuery(options?: Omit<Urql.UseQueryArgs<SelectGroupStockIssueListQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectGroupStockIssueListQuery, SelectGroupStockIssueListQueryVariables>({ query: SelectGroupStockIssueListDocument, ...options });
};
export const SelectGroupsDocument = gql`
    query selectGroups($where: groups_bool_exp!, $email: String = "", $isStaff: Boolean = false) {
  invited: groupInvitations(where: {email: {_eq: $email}}) {
    group {
      id
      name
    }
  }
  groups(where: $where) {
    userNum: memberships_aggregate {
      aggregate {
        count
      }
    }
    id
    name
    contract {
      plan {
        code
      }
      startAt
      expireAt
      maxUsers
    }
    groupStockIssue {
      stockIssue {
        code
        name
      }
    }
    groupSettlementDate {
      month
      day
    }
    groupTypeAssignment {
      groupType {
        code
      }
    }
    groupInvitations {
      email
    }
    groupContent @include(if: $isStaff) {
      memo
    }
  }
}
    `;

export function useSelectGroupsQuery(options: Omit<Urql.UseQueryArgs<SelectGroupsQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectGroupsQuery, SelectGroupsQueryVariables>({ query: SelectGroupsDocument, ...options });
};
export const AcceptGroupInvitationDocument = gql`
    mutation acceptGroupInvitation($userId: uuid!, $email: String!, $groupId: uuid!) {
  update_memberships(
    where: {groupInvitation: {email: {_eq: $email}}}
    _set: {userId: $userId}
  ) {
    affected_rows
  }
  delete_groupInvitations_by_pk(groupId: $groupId, email: $email) {
    groupId
    email
  }
}
    `;

export function useAcceptGroupInvitationMutation() {
  return Urql.useMutation<AcceptGroupInvitationMutation, AcceptGroupInvitationMutationVariables>(AcceptGroupInvitationDocument);
};
export const InsertGroupOneDocument = gql`
    mutation insertGroupOne($object: groups_insert_input!) {
  insert_groups_one(object: $object) {
    id
  }
}
    `;

export function useInsertGroupOneMutation() {
  return Urql.useMutation<InsertGroupOneMutation, InsertGroupOneMutationVariables>(InsertGroupOneDocument);
};
export const UpdateGroupByStaffDocument = gql`
    mutation updateGroupByStaff($id: uuid!, $groupStockIssueSet: groupStockIssues_set_input = {}, $groupSet: groups_set_input = {}, $groupTypeAssignmentSet: groupTypeAssignments_set_input = {}, $groupSettlementDateSet: groupSettlementDates_set_input = {}, $contractSet: contracts_set_input = {}, $groupContentsSet: groupContents_set_input = {}) {
  update_groups_by_pk(pk_columns: {id: $id}, _set: $groupSet) {
    id
  }
  update_groupStockIssues_by_pk(
    pk_columns: {groupId: $id}
    _set: $groupStockIssueSet
  ) {
    groupId
  }
  update_groupTypeAssignments(
    where: {groupId: {_eq: $id}}
    _set: $groupTypeAssignmentSet
  ) {
    affected_rows
  }
  update_groupSettlementDates_by_pk(
    pk_columns: {id: $id}
    _set: $groupSettlementDateSet
  ) {
    id
  }
  update_contracts_by_pk(pk_columns: {groupId: $id}, _set: $contractSet) {
    groupId
  }
  update_groupContents_by_pk(pk_columns: {id: $id}, _set: $groupContentsSet) {
    id
  }
}
    `;

export function useUpdateGroupByStaffMutation() {
  return Urql.useMutation<UpdateGroupByStaffMutation, UpdateGroupByStaffMutationVariables>(UpdateGroupByStaffDocument);
};
export const UpdateGroupDocument = gql`
    mutation updateGroup($id: uuid!, $groupStockIssueSet: groupStockIssues_set_input = {}, $groupSet: groups_set_input = {}) {
  update_groups_by_pk(pk_columns: {id: $id}, _set: $groupSet) {
    id
  }
  update_groupStockIssues_by_pk(
    pk_columns: {groupId: $id}
    _set: $groupStockIssueSet
  ) {
    groupId
  }
}
    `;

export function useUpdateGroupMutation() {
  return Urql.useMutation<UpdateGroupMutation, UpdateGroupMutationVariables>(UpdateGroupDocument);
};
export const SelectMasterTypesDocument = gql`
    query selectMasterTypes($lang: languages_enum = ja) {
  groupTypes {
    code
    label: groupTypeTranslations(where: {languageCode: {_eq: $lang}}) {
      text
    }
  }
  planTypes: plans {
    code
    label: planTranslations(where: {languageCode: {_eq: $lang}}) {
      text
    }
  }
}
    `;

export function useSelectMasterTypesQuery(options?: Omit<Urql.UseQueryArgs<SelectMasterTypesQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectMasterTypesQuery, SelectMasterTypesQueryVariables>({ query: SelectMasterTypesDocument, ...options });
};
export const SelectNewsItemsDocument = gql`
    query selectNewsItems($groupId: uuid, $where: articles_bool_exp) {
  groups(where: {id: {_eq: $groupId}}) {
    groupEvents(order_by: {date: desc}) {
      id
      eventTypeCode
      eventType {
        code
      }
      memo
      date
      stockIssue {
        code
        name
      }
    }
  }
  articles(order_by: {timestamp: desc}, where: $where) {
    id
    title
    timestamp
    path
    stockIssue {
      code
      name
    }
    articleSourceCode
    articleSource {
      code
    }
  }
}
    `;

export function useSelectNewsItemsQuery(options?: Omit<Urql.UseQueryArgs<SelectNewsItemsQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectNewsItemsQuery, SelectNewsItemsQueryVariables>({ query: SelectNewsItemsDocument, ...options });
};
export const SelectStaffsDocument = gql`
    query selectStaffs {
  staffs(order_by: {user: {name: asc}}) {
    user {
      id
      email
      name
    }
  }
  staffInvitations(order_by: {staff: {user: {name: asc}}}) {
    email
    name
    staff {
      user {
        id
        email
        name
      }
    }
  }
}
    `;

export function useSelectStaffsQuery(options?: Omit<Urql.UseQueryArgs<SelectStaffsQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectStaffsQuery, SelectStaffsQueryVariables>({ query: SelectStaffsDocument, ...options });
};
export const InsertStaffInvitationDocument = gql`
    mutation insertStaffInvitation($object: staffs_insert_input!) {
  insert_staffs_one(object: $object) {
    id
  }
}
    `;

export function useInsertStaffInvitationMutation() {
  return Urql.useMutation<InsertStaffInvitationMutation, InsertStaffInvitationMutationVariables>(InsertStaffInvitationDocument);
};
export const DeleteStaffByIdDocument = gql`
    mutation deleteStaffById($id: uuid!) {
  delete_staffs_by_pk(id: $id) {
    id
  }
}
    `;

export function useDeleteStaffByIdMutation() {
  return Urql.useMutation<DeleteStaffByIdMutation, DeleteStaffByIdMutationVariables>(DeleteStaffByIdDocument);
};
export const SelectStockIssuesDocument = gql`
    query selectStockIssues {
  stockIssues {
    code
    name
  }
}
    `;

export function useSelectStockIssuesQuery(options?: Omit<Urql.UseQueryArgs<SelectStockIssuesQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectStockIssuesQuery, SelectStockIssuesQueryVariables>({ query: SelectStockIssuesDocument, ...options });
};
export const SelectStockPricesDocument = gql`
    query selectStockPrices($where: stockIssues_bool_exp) {
  stockIssues(where: $where) {
    code
    stockPrices(order_by: {date: asc}) {
      stockIssueCode
      date
      open
      close
      high
      low
      volume
    }
  }
}
    `;

export function useSelectStockPricesQuery(options?: Omit<Urql.UseQueryArgs<SelectStockPricesQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectStockPricesQuery, SelectStockPricesQueryVariables>({ query: SelectStockPricesDocument, ...options });
};
export const SelectUserByIdDocument = gql`
    query selectUserById($id: uuid!) {
  user: users_by_pk(id: $id) {
    id
    email
    name
  }
}
    `;

export function useSelectUserByIdQuery(options: Omit<Urql.UseQueryArgs<SelectUserByIdQueryVariables>, 'query'>) {
  return Urql.useQuery<SelectUserByIdQuery, SelectUserByIdQueryVariables>({ query: SelectUserByIdDocument, ...options });
};
export const UpdateUserDocument = gql`
    mutation updateUser($id: uuid!, $set: users_set_input) {
  update_users_by_pk(pk_columns: {id: $id}, _set: $set) {
    id
  }
}
    `;

export function useUpdateUserMutation() {
  return Urql.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument);
};